// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/formancehq/formance-sdk-go/pkg/utils"
)

type V2BulkElementResultV2BulkElementResultError struct {
	ErrorCode        string  `json:"errorCode"`
	ErrorDescription string  `json:"errorDescription"`
	ErrorDetails     *string `json:"errorDetails,omitempty"`
	ResponseType     string  `json:"responseType"`
}

func (o *V2BulkElementResultV2BulkElementResultError) GetErrorCode() string {
	if o == nil {
		return ""
	}
	return o.ErrorCode
}

func (o *V2BulkElementResultV2BulkElementResultError) GetErrorDescription() string {
	if o == nil {
		return ""
	}
	return o.ErrorDescription
}

func (o *V2BulkElementResultV2BulkElementResultError) GetErrorDetails() *string {
	if o == nil {
		return nil
	}
	return o.ErrorDetails
}

func (o *V2BulkElementResultV2BulkElementResultError) GetResponseType() string {
	if o == nil {
		return ""
	}
	return o.ResponseType
}

type V2BulkElementResultV2BulkElementResultDeleteMetadata struct {
	ResponseType string `json:"responseType"`
}

func (o *V2BulkElementResultV2BulkElementResultDeleteMetadata) GetResponseType() string {
	if o == nil {
		return ""
	}
	return o.ResponseType
}

type V2BulkElementResultV2BulkElementResultRevertTransaction struct {
	Data         V2Transaction `json:"data"`
	ResponseType string        `json:"responseType"`
}

func (o *V2BulkElementResultV2BulkElementResultRevertTransaction) GetData() V2Transaction {
	if o == nil {
		return V2Transaction{}
	}
	return o.Data
}

func (o *V2BulkElementResultV2BulkElementResultRevertTransaction) GetResponseType() string {
	if o == nil {
		return ""
	}
	return o.ResponseType
}

type V2BulkElementResultV2BulkElementResultAddMetadata struct {
	ResponseType string `json:"responseType"`
}

func (o *V2BulkElementResultV2BulkElementResultAddMetadata) GetResponseType() string {
	if o == nil {
		return ""
	}
	return o.ResponseType
}

type V2BulkElementResultV2BulkElementResultCreateTransaction struct {
	Data         V2Transaction `json:"data"`
	ResponseType string        `json:"responseType"`
}

func (o *V2BulkElementResultV2BulkElementResultCreateTransaction) GetData() V2Transaction {
	if o == nil {
		return V2Transaction{}
	}
	return o.Data
}

func (o *V2BulkElementResultV2BulkElementResultCreateTransaction) GetResponseType() string {
	if o == nil {
		return ""
	}
	return o.ResponseType
}

type V2BulkElementResultType string

const (
	V2BulkElementResultTypeAddMetadata       V2BulkElementResultType = "ADD_METADATA"
	V2BulkElementResultTypeCreateTransaction V2BulkElementResultType = "CREATE_TRANSACTION"
	V2BulkElementResultTypeDeleteMetadata    V2BulkElementResultType = "DELETE_METADATA"
	V2BulkElementResultTypeError             V2BulkElementResultType = "ERROR"
	V2BulkElementResultTypeRevertTransaction V2BulkElementResultType = "REVERT_TRANSACTION"
)

type V2BulkElementResult struct {
	V2BulkElementResultV2BulkElementResultCreateTransaction *V2BulkElementResultV2BulkElementResultCreateTransaction
	V2BulkElementResultV2BulkElementResultAddMetadata       *V2BulkElementResultV2BulkElementResultAddMetadata
	V2BulkElementResultV2BulkElementResultRevertTransaction *V2BulkElementResultV2BulkElementResultRevertTransaction
	V2BulkElementResultV2BulkElementResultDeleteMetadata    *V2BulkElementResultV2BulkElementResultDeleteMetadata
	V2BulkElementResultV2BulkElementResultError             *V2BulkElementResultV2BulkElementResultError

	Type V2BulkElementResultType
}

func CreateV2BulkElementResultAddMetadata(addMetadata V2BulkElementResultV2BulkElementResultAddMetadata) V2BulkElementResult {
	typ := V2BulkElementResultTypeAddMetadata
	typStr := string(typ)
	addMetadata.ResponseType = typStr

	return V2BulkElementResult{
		V2BulkElementResultV2BulkElementResultAddMetadata: &addMetadata,
		Type: typ,
	}
}

func CreateV2BulkElementResultCreateTransaction(createTransaction V2BulkElementResultV2BulkElementResultCreateTransaction) V2BulkElementResult {
	typ := V2BulkElementResultTypeCreateTransaction
	typStr := string(typ)
	createTransaction.ResponseType = typStr

	return V2BulkElementResult{
		V2BulkElementResultV2BulkElementResultCreateTransaction: &createTransaction,
		Type: typ,
	}
}

func CreateV2BulkElementResultDeleteMetadata(deleteMetadata V2BulkElementResultV2BulkElementResultDeleteMetadata) V2BulkElementResult {
	typ := V2BulkElementResultTypeDeleteMetadata
	typStr := string(typ)
	deleteMetadata.ResponseType = typStr

	return V2BulkElementResult{
		V2BulkElementResultV2BulkElementResultDeleteMetadata: &deleteMetadata,
		Type: typ,
	}
}

func CreateV2BulkElementResultError(error V2BulkElementResultV2BulkElementResultError) V2BulkElementResult {
	typ := V2BulkElementResultTypeError
	typStr := string(typ)
	error.ResponseType = typStr

	return V2BulkElementResult{
		V2BulkElementResultV2BulkElementResultError: &error,
		Type: typ,
	}
}

func CreateV2BulkElementResultRevertTransaction(revertTransaction V2BulkElementResultV2BulkElementResultRevertTransaction) V2BulkElementResult {
	typ := V2BulkElementResultTypeRevertTransaction
	typStr := string(typ)
	revertTransaction.ResponseType = typStr

	return V2BulkElementResult{
		V2BulkElementResultV2BulkElementResultRevertTransaction: &revertTransaction,
		Type: typ,
	}
}

func (u *V2BulkElementResult) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ResponseType string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ResponseType {
	case "ADD_METADATA":
		v2BulkElementResultV2BulkElementResultAddMetadata := new(V2BulkElementResultV2BulkElementResultAddMetadata)
		if err := utils.UnmarshalJSON(data, &v2BulkElementResultV2BulkElementResultAddMetadata, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.V2BulkElementResultV2BulkElementResultAddMetadata = v2BulkElementResultV2BulkElementResultAddMetadata
		u.Type = V2BulkElementResultTypeAddMetadata
		return nil
	case "CREATE_TRANSACTION":
		v2BulkElementResultV2BulkElementResultCreateTransaction := new(V2BulkElementResultV2BulkElementResultCreateTransaction)
		if err := utils.UnmarshalJSON(data, &v2BulkElementResultV2BulkElementResultCreateTransaction, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.V2BulkElementResultV2BulkElementResultCreateTransaction = v2BulkElementResultV2BulkElementResultCreateTransaction
		u.Type = V2BulkElementResultTypeCreateTransaction
		return nil
	case "DELETE_METADATA":
		v2BulkElementResultV2BulkElementResultDeleteMetadata := new(V2BulkElementResultV2BulkElementResultDeleteMetadata)
		if err := utils.UnmarshalJSON(data, &v2BulkElementResultV2BulkElementResultDeleteMetadata, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.V2BulkElementResultV2BulkElementResultDeleteMetadata = v2BulkElementResultV2BulkElementResultDeleteMetadata
		u.Type = V2BulkElementResultTypeDeleteMetadata
		return nil
	case "ERROR":
		v2BulkElementResultV2BulkElementResultError := new(V2BulkElementResultV2BulkElementResultError)
		if err := utils.UnmarshalJSON(data, &v2BulkElementResultV2BulkElementResultError, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.V2BulkElementResultV2BulkElementResultError = v2BulkElementResultV2BulkElementResultError
		u.Type = V2BulkElementResultTypeError
		return nil
	case "REVERT_TRANSACTION":
		v2BulkElementResultV2BulkElementResultRevertTransaction := new(V2BulkElementResultV2BulkElementResultRevertTransaction)
		if err := utils.UnmarshalJSON(data, &v2BulkElementResultV2BulkElementResultRevertTransaction, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.V2BulkElementResultV2BulkElementResultRevertTransaction = v2BulkElementResultV2BulkElementResultRevertTransaction
		u.Type = V2BulkElementResultTypeRevertTransaction
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u V2BulkElementResult) MarshalJSON() ([]byte, error) {
	if u.V2BulkElementResultV2BulkElementResultCreateTransaction != nil {
		return utils.MarshalJSON(u.V2BulkElementResultV2BulkElementResultCreateTransaction, "", true)
	}

	if u.V2BulkElementResultV2BulkElementResultAddMetadata != nil {
		return utils.MarshalJSON(u.V2BulkElementResultV2BulkElementResultAddMetadata, "", true)
	}

	if u.V2BulkElementResultV2BulkElementResultRevertTransaction != nil {
		return utils.MarshalJSON(u.V2BulkElementResultV2BulkElementResultRevertTransaction, "", true)
	}

	if u.V2BulkElementResultV2BulkElementResultDeleteMetadata != nil {
		return utils.MarshalJSON(u.V2BulkElementResultV2BulkElementResultDeleteMetadata, "", true)
	}

	if u.V2BulkElementResultV2BulkElementResultError != nil {
		return utils.MarshalJSON(u.V2BulkElementResultV2BulkElementResultError, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
