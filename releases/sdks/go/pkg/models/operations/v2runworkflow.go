// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/formance-sdk-go/v2/pkg/models/sdkerrors"
	"github.com/formancehq/formance-sdk-go/v2/pkg/models/shared"
	"net/http"
)

type V2RunWorkflowRequest struct {
	RequestBody map[string]string `request:"mediaType=application/json"`
	// Wait end of the workflow before return
	Wait *bool `queryParam:"style=form,explode=true,name=wait"`
	// The flow id
	WorkflowID string `pathParam:"style=simple,explode=false,name=workflowID"`
}

func (o *V2RunWorkflowRequest) GetRequestBody() map[string]string {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *V2RunWorkflowRequest) GetWait() *bool {
	if o == nil {
		return nil
	}
	return o.Wait
}

func (o *V2RunWorkflowRequest) GetWorkflowID() string {
	if o == nil {
		return ""
	}
	return o.WorkflowID
}

type V2RunWorkflowResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// General error
	V2Error *sdkerrors.V2Error
	// The workflow instance
	V2RunWorkflowResponse *shared.V2RunWorkflowResponse
}

func (o *V2RunWorkflowResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *V2RunWorkflowResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *V2RunWorkflowResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *V2RunWorkflowResponse) GetV2Error() *sdkerrors.V2Error {
	if o == nil {
		return nil
	}
	return o.V2Error
}

func (o *V2RunWorkflowResponse) GetV2RunWorkflowResponse() *shared.V2RunWorkflowResponse {
	if o == nil {
		return nil
	}
	return o.V2RunWorkflowResponse
}
