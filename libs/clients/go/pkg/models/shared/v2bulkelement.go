// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/formancehq/formance-sdk-go/pkg/utils"
	"math/big"
)

type V2BulkElementV2BulkElementDeleteMetadataData struct {
	Key        string       `json:"key"`
	TargetID   V2TargetID   `json:"targetId"`
	TargetType V2TargetType `json:"targetType"`
}

func (o *V2BulkElementV2BulkElementDeleteMetadataData) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *V2BulkElementV2BulkElementDeleteMetadataData) GetTargetID() V2TargetID {
	if o == nil {
		return V2TargetID{}
	}
	return o.TargetID
}

func (o *V2BulkElementV2BulkElementDeleteMetadataData) GetTargetType() V2TargetType {
	if o == nil {
		return V2TargetType("")
	}
	return o.TargetType
}

type V2BulkElementV2BulkElementDeleteMetadata struct {
	Action string                                        `json:"action"`
	Data   *V2BulkElementV2BulkElementDeleteMetadataData `json:"data,omitempty"`
	Ik     *string                                       `json:"ik,omitempty"`
}

func (o *V2BulkElementV2BulkElementDeleteMetadata) GetAction() string {
	if o == nil {
		return ""
	}
	return o.Action
}

func (o *V2BulkElementV2BulkElementDeleteMetadata) GetData() *V2BulkElementV2BulkElementDeleteMetadataData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *V2BulkElementV2BulkElementDeleteMetadata) GetIk() *string {
	if o == nil {
		return nil
	}
	return o.Ik
}

type V2BulkElementV2BulkElementRevertTransactionData struct {
	Force *bool    `json:"force,omitempty"`
	ID    *big.Int `json:"id"`
}

func (v V2BulkElementV2BulkElementRevertTransactionData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2BulkElementV2BulkElementRevertTransactionData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V2BulkElementV2BulkElementRevertTransactionData) GetForce() *bool {
	if o == nil {
		return nil
	}
	return o.Force
}

func (o *V2BulkElementV2BulkElementRevertTransactionData) GetID() *big.Int {
	if o == nil {
		return big.NewInt(0)
	}
	return o.ID
}

type V2BulkElementV2BulkElementRevertTransaction struct {
	Action string                                           `json:"action"`
	Data   *V2BulkElementV2BulkElementRevertTransactionData `json:"data,omitempty"`
	Ik     *string                                          `json:"ik,omitempty"`
}

func (o *V2BulkElementV2BulkElementRevertTransaction) GetAction() string {
	if o == nil {
		return ""
	}
	return o.Action
}

func (o *V2BulkElementV2BulkElementRevertTransaction) GetData() *V2BulkElementV2BulkElementRevertTransactionData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *V2BulkElementV2BulkElementRevertTransaction) GetIk() *string {
	if o == nil {
		return nil
	}
	return o.Ik
}

type V2BulkElementV2BulkElementAddMetadataData struct {
	Metadata   map[string]string `json:"metadata"`
	TargetID   V2TargetID        `json:"targetId"`
	TargetType V2TargetType      `json:"targetType"`
}

func (o *V2BulkElementV2BulkElementAddMetadataData) GetMetadata() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Metadata
}

func (o *V2BulkElementV2BulkElementAddMetadataData) GetTargetID() V2TargetID {
	if o == nil {
		return V2TargetID{}
	}
	return o.TargetID
}

func (o *V2BulkElementV2BulkElementAddMetadataData) GetTargetType() V2TargetType {
	if o == nil {
		return V2TargetType("")
	}
	return o.TargetType
}

type V2BulkElementV2BulkElementAddMetadata struct {
	Action string                                     `json:"action"`
	Data   *V2BulkElementV2BulkElementAddMetadataData `json:"data,omitempty"`
	Ik     *string                                    `json:"ik,omitempty"`
}

func (o *V2BulkElementV2BulkElementAddMetadata) GetAction() string {
	if o == nil {
		return ""
	}
	return o.Action
}

func (o *V2BulkElementV2BulkElementAddMetadata) GetData() *V2BulkElementV2BulkElementAddMetadataData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *V2BulkElementV2BulkElementAddMetadata) GetIk() *string {
	if o == nil {
		return nil
	}
	return o.Ik
}

type V2BulkElementV2BulkElementCreateTransaction struct {
	Action string             `json:"action"`
	Data   *V2PostTransaction `json:"data,omitempty"`
	Ik     *string            `json:"ik,omitempty"`
}

func (o *V2BulkElementV2BulkElementCreateTransaction) GetAction() string {
	if o == nil {
		return ""
	}
	return o.Action
}

func (o *V2BulkElementV2BulkElementCreateTransaction) GetData() *V2PostTransaction {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *V2BulkElementV2BulkElementCreateTransaction) GetIk() *string {
	if o == nil {
		return nil
	}
	return o.Ik
}

type V2BulkElementType string

const (
	V2BulkElementTypeAddMetadata       V2BulkElementType = "ADD_METADATA"
	V2BulkElementTypeCreateTransaction V2BulkElementType = "CREATE_TRANSACTION"
	V2BulkElementTypeDeleteMetadata    V2BulkElementType = "DELETE_METADATA"
	V2BulkElementTypeRevertTransaction V2BulkElementType = "REVERT_TRANSACTION"
)

type V2BulkElement struct {
	V2BulkElementV2BulkElementCreateTransaction *V2BulkElementV2BulkElementCreateTransaction
	V2BulkElementV2BulkElementAddMetadata       *V2BulkElementV2BulkElementAddMetadata
	V2BulkElementV2BulkElementRevertTransaction *V2BulkElementV2BulkElementRevertTransaction
	V2BulkElementV2BulkElementDeleteMetadata    *V2BulkElementV2BulkElementDeleteMetadata

	Type V2BulkElementType
}

func CreateV2BulkElementAddMetadata(addMetadata V2BulkElementV2BulkElementAddMetadata) V2BulkElement {
	typ := V2BulkElementTypeAddMetadata
	typStr := string(typ)
	addMetadata.Action = typStr

	return V2BulkElement{
		V2BulkElementV2BulkElementAddMetadata: &addMetadata,
		Type:                                  typ,
	}
}

func CreateV2BulkElementCreateTransaction(createTransaction V2BulkElementV2BulkElementCreateTransaction) V2BulkElement {
	typ := V2BulkElementTypeCreateTransaction
	typStr := string(typ)
	createTransaction.Action = typStr

	return V2BulkElement{
		V2BulkElementV2BulkElementCreateTransaction: &createTransaction,
		Type: typ,
	}
}

func CreateV2BulkElementDeleteMetadata(deleteMetadata V2BulkElementV2BulkElementDeleteMetadata) V2BulkElement {
	typ := V2BulkElementTypeDeleteMetadata
	typStr := string(typ)
	deleteMetadata.Action = typStr

	return V2BulkElement{
		V2BulkElementV2BulkElementDeleteMetadata: &deleteMetadata,
		Type:                                     typ,
	}
}

func CreateV2BulkElementRevertTransaction(revertTransaction V2BulkElementV2BulkElementRevertTransaction) V2BulkElement {
	typ := V2BulkElementTypeRevertTransaction
	typStr := string(typ)
	revertTransaction.Action = typStr

	return V2BulkElement{
		V2BulkElementV2BulkElementRevertTransaction: &revertTransaction,
		Type: typ,
	}
}

func (u *V2BulkElement) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Action string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Action {
	case "ADD_METADATA":
		v2BulkElementV2BulkElementAddMetadata := new(V2BulkElementV2BulkElementAddMetadata)
		if err := utils.UnmarshalJSON(data, &v2BulkElementV2BulkElementAddMetadata, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.V2BulkElementV2BulkElementAddMetadata = v2BulkElementV2BulkElementAddMetadata
		u.Type = V2BulkElementTypeAddMetadata
		return nil
	case "CREATE_TRANSACTION":
		v2BulkElementV2BulkElementCreateTransaction := new(V2BulkElementV2BulkElementCreateTransaction)
		if err := utils.UnmarshalJSON(data, &v2BulkElementV2BulkElementCreateTransaction, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.V2BulkElementV2BulkElementCreateTransaction = v2BulkElementV2BulkElementCreateTransaction
		u.Type = V2BulkElementTypeCreateTransaction
		return nil
	case "DELETE_METADATA":
		v2BulkElementV2BulkElementDeleteMetadata := new(V2BulkElementV2BulkElementDeleteMetadata)
		if err := utils.UnmarshalJSON(data, &v2BulkElementV2BulkElementDeleteMetadata, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.V2BulkElementV2BulkElementDeleteMetadata = v2BulkElementV2BulkElementDeleteMetadata
		u.Type = V2BulkElementTypeDeleteMetadata
		return nil
	case "REVERT_TRANSACTION":
		v2BulkElementV2BulkElementRevertTransaction := new(V2BulkElementV2BulkElementRevertTransaction)
		if err := utils.UnmarshalJSON(data, &v2BulkElementV2BulkElementRevertTransaction, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.V2BulkElementV2BulkElementRevertTransaction = v2BulkElementV2BulkElementRevertTransaction
		u.Type = V2BulkElementTypeRevertTransaction
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u V2BulkElement) MarshalJSON() ([]byte, error) {
	if u.V2BulkElementV2BulkElementCreateTransaction != nil {
		return utils.MarshalJSON(u.V2BulkElementV2BulkElementCreateTransaction, "", true)
	}

	if u.V2BulkElementV2BulkElementAddMetadata != nil {
		return utils.MarshalJSON(u.V2BulkElementV2BulkElementAddMetadata, "", true)
	}

	if u.V2BulkElementV2BulkElementRevertTransaction != nil {
		return utils.MarshalJSON(u.V2BulkElementV2BulkElementRevertTransaction, "", true)
	}

	if u.V2BulkElementV2BulkElementDeleteMetadata != nil {
		return utils.MarshalJSON(u.V2BulkElementV2BulkElementDeleteMetadata, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
