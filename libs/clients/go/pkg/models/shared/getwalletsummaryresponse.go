// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/formancehq/formance-sdk-go/pkg/utils"
	"math/big"
)

type GetWalletSummaryResponse struct {
	AvailableFunds map[string]*big.Int `json:"availableFunds"`
	Balances       []BalanceWithAssets `json:"balances"`
	ExpirableFunds map[string]*big.Int `json:"expirableFunds"`
	ExpiredFunds   map[string]*big.Int `json:"expiredFunds"`
	HoldFunds      map[string]*big.Int `json:"holdFunds"`
}

func (g GetWalletSummaryResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWalletSummaryResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetWalletSummaryResponse) GetAvailableFunds() map[string]*big.Int {
	if o == nil {
		return map[string]*big.Int{}
	}
	return o.AvailableFunds
}

func (o *GetWalletSummaryResponse) GetBalances() []BalanceWithAssets {
	if o == nil {
		return []BalanceWithAssets{}
	}
	return o.Balances
}

func (o *GetWalletSummaryResponse) GetExpirableFunds() map[string]*big.Int {
	if o == nil {
		return map[string]*big.Int{}
	}
	return o.ExpirableFunds
}

func (o *GetWalletSummaryResponse) GetExpiredFunds() map[string]*big.Int {
	if o == nil {
		return map[string]*big.Int{}
	}
	return o.ExpiredFunds
}

func (o *GetWalletSummaryResponse) GetHoldFunds() map[string]*big.Int {
	if o == nil {
		return map[string]*big.Int{}
	}
	return o.HoldFunds
}
