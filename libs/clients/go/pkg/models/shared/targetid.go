// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/formancehq/formance-sdk-go/pkg/utils"
	"math/big"
)

type TargetIDType string

const (
	TargetIDTypeStr    TargetIDType = "str"
	TargetIDTypeBigint TargetIDType = "bigint"
)

type TargetID struct {
	Str    *string
	Bigint *big.Int

	Type TargetIDType
}

func CreateTargetIDStr(str string) TargetID {
	typ := TargetIDTypeStr

	return TargetID{
		Str:  &str,
		Type: typ,
	}
}

func CreateTargetIDBigint(bigint *big.Int) TargetID {
	typ := TargetIDTypeBigint

	return TargetID{
		Bigint: bigint,
		Type:   typ,
	}
}

func (u *TargetID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TargetIDTypeStr
		return nil
	}

	bigint := big.NewInt(0)
	if err := utils.UnmarshalJSON(data, &bigint, "", true, true); err == nil {
		u.Bigint = bigint
		u.Type = TargetIDTypeBigint
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TargetID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Bigint != nil {
		return utils.MarshalJSON(u.Bigint, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
