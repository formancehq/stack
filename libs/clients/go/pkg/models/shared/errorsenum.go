// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ErrorsEnum string

const (
	ErrorsEnumInternal          ErrorsEnum = "INTERNAL"
	ErrorsEnumInsufficientFund  ErrorsEnum = "INSUFFICIENT_FUND"
	ErrorsEnumValidation        ErrorsEnum = "VALIDATION"
	ErrorsEnumConflict          ErrorsEnum = "CONFLICT"
	ErrorsEnumCompilationFailed ErrorsEnum = "COMPILATION_FAILED"
	ErrorsEnumMetadataOverride  ErrorsEnum = "METADATA_OVERRIDE"
	ErrorsEnumNotFound          ErrorsEnum = "NOT_FOUND"
	ErrorsEnumRevertOccurring   ErrorsEnum = "REVERT_OCCURRING"
	ErrorsEnumAlreadyRevert     ErrorsEnum = "ALREADY_REVERT"
	ErrorsEnumNoPostings        ErrorsEnum = "NO_POSTINGS"
)

func (e ErrorsEnum) ToPointer() *ErrorsEnum {
	return &e
}

func (e *ErrorsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INTERNAL":
		fallthrough
	case "INSUFFICIENT_FUND":
		fallthrough
	case "VALIDATION":
		fallthrough
	case "CONFLICT":
		fallthrough
	case "COMPILATION_FAILED":
		fallthrough
	case "METADATA_OVERRIDE":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "REVERT_OCCURRING":
		fallthrough
	case "ALREADY_REVERT":
		fallthrough
	case "NO_POSTINGS":
		*e = ErrorsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsEnum: %v", v)
	}
}
