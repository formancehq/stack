---
input:
  event_bus:
    topic: ledger
    consumer_group: search

pipeline:
  processors:
  - switch_event_type:
      events:
      - label: COMMITTED_TRANSACTIONS
        processors:
        - bloblang: |
            map account {
              root = this.map_each(v -> v.value.map_each(v2 -> {
                  "action": "upsert",
                  "id": v.key,
                  "document": {
                      "data": {
                          "address": v.key
                      },
                      "indexed": {
                          "address": v.key
                      },
                      "kind": "ACCOUNT"
                  }
              }).values()).values().flatten()
            }

            map volumes {
                root = this.map_each(v -> v.value.map_each(v2 -> {
                    "action": "index",
                    "id": "%s-%s".format(v.key, v2.key),
                    "document": {
                        "data": {
                            "name": v2.key,
                            "input": v2.value.input,
                            "output": v2.value.output,
                            "account": v.key
                        },
                        "indexed": {
                            "account": v.key,
                            "name": v2.key
                        },
                        "kind": "ASSET"
                    }
                }).values()).values().flatten()
            }

            map tx {
              root = {
                "action": "index",
                "id": "%s".format(this.txid),
                "document": {
                  "data": {
                    "postings": this.postings,
                    "reference": this.reference,
                    "txid": this.txid,
                    "timestamp": this.timestamp,
                    "metadata": if this.metadata { this.metadata } else {{}}
                  },
                  "indexed": {
                    "reference": this.reference,
                    "txid": this.txid,
                    "timestamp": this.timestamp,
                    "asset": this.postings.map_each(p -> p.asset),
                    "source": this.postings.map_each(p -> p.source),
                    "destination": this.postings.map_each(p -> p.destination),
                    "amount": this.postings.map_each(p -> if p.asset.contains("/") {
                      [
                        p.amount,
                        p.amount / if p.asset.split("/").index(1).number(){ range(0, p.asset.split("/").index(1).number()).fold(1, t -> t.tally * 10) } else { 1 } # amount / pow(10, decimal part of asset)
                      ]
                    } else { [ p.amount ] }).flatten().map_each(v -> "%v".format(v))
                  },
                  "kind": "TRANSACTION"
                }
              }
            }

            map committedTransactions {
                root = [
                    this.payload.transactions.map_each(t -> t.apply("tx")).map_each(t -> t.assign({
                        "id": "TRANSACTION-%s-%s".format(this.payload.ledger, t.id)
                    })),
                    this.payload.volumes.apply("volumes").
                        sort(v -> v.right.id > v.left.id).
                        map_each(t -> t.assign({
                            "id": "ASSET-%s-%s".format(this.payload.ledger, t.id)
                        })),
                    this.payload.volumes.apply("account").
                        sort(v -> v.right.id > v.left.id).
                        map_each(t -> t.assign({
                            "id": "ACCOUNT-%s-%s".format(this.payload.ledger, t.id)
                        })),
                ].flatten().map_each(t -> t.merge({
                   "document": {
                       "when": this.date,
                       "ledger": this.payload.ledger,
                       "data": {
                           "ledger": this.payload.ledger
                       },
                       "indexed": {
                           "ledger": this.payload.ledger
                       }
                   },
               }))
            }

            root = this.apply("committedTransactions")
        - unarchive:
            format: json_array
        - bloblang: |
            meta action = this.action
            meta id = this.id
            root = this.document
      - label: SAVED_METADATA
        processors:
        - bloblang: |
            meta targetType = this.payload.targetType
            meta targetId = this.payload.targetId
            meta ledger = this.payload.ledger
            meta id = "%s-%s-%s".format(this.payload.targetType, this.payload.ledger, this.payload.targetId)
            meta action = "upsert"
            root = this
        - get_doc:
            id: ${!meta("id")}
        - catch:
          - log:
              level: INFO
              message: Document not found, assume it is an account
          - bloblang: |
              root = this.assign({
                "_doc": {
                  "data": {
                    "address": meta("targetId"),
                    "metadata": {}
                  },
                  "indexed": {
                    "address": meta("targetId")
                  },
                  "kind": "ACCOUNT", # If not found, so, this is an account
                }
              })
        - bloblang: |
            root = this._doc.assign({
              "data": {
                "metadata": this.payload.metadata,
                "ledger": this.payload.ledger
              },
              "indexed": {
                "ledger": this.payload.ledger
              },
              "ledger": this.payload.ledger,
              "when": this.date
            })

output:
  resource: elasticsearch
