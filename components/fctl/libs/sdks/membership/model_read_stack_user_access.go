/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
)

// checks if the ReadStackUserAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReadStackUserAccess{}

// ReadStackUserAccess struct for ReadStackUserAccess
type ReadStackUserAccess struct {
	Data *StackUserAccess `json:"data,omitempty"`
}

// NewReadStackUserAccess instantiates a new ReadStackUserAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadStackUserAccess() *ReadStackUserAccess {
	this := ReadStackUserAccess{}
	return &this
}

// NewReadStackUserAccessWithDefaults instantiates a new ReadStackUserAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadStackUserAccessWithDefaults() *ReadStackUserAccess {
	this := ReadStackUserAccess{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ReadStackUserAccess) GetData() StackUserAccess {
	if o == nil || IsNil(o.Data) {
		var ret StackUserAccess
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadStackUserAccess) GetDataOk() (*StackUserAccess, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ReadStackUserAccess) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given StackUserAccess and assigns it to the Data field.
func (o *ReadStackUserAccess) SetData(v StackUserAccess) {
	o.Data = &v
}

func (o ReadStackUserAccess) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReadStackUserAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableReadStackUserAccess struct {
	value *ReadStackUserAccess
	isSet bool
}

func (v NullableReadStackUserAccess) Get() *ReadStackUserAccess {
	return v.value
}

func (v *NullableReadStackUserAccess) Set(val *ReadStackUserAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableReadStackUserAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableReadStackUserAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadStackUserAccess(val *ReadStackUserAccess) *NullableReadStackUserAccess {
	return &NullableReadStackUserAccess{value: val, isSet: true}
}

func (v NullableReadStackUserAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadStackUserAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


