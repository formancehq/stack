/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
)

// checks if the StackVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackVersion{}

// StackVersion struct for StackVersion
type StackVersion struct {
	// Supported only with agent version >= v0.7.0
	Version *string `json:"version,omitempty"`
}

// NewStackVersion instantiates a new StackVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackVersion() *StackVersion {
	this := StackVersion{}
	return &this
}

// NewStackVersionWithDefaults instantiates a new StackVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackVersionWithDefaults() *StackVersion {
	this := StackVersion{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *StackVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *StackVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *StackVersion) SetVersion(v string) {
	o.Version = &v
}

func (o StackVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableStackVersion struct {
	value *StackVersion
	isSet bool
}

func (v NullableStackVersion) Get() *StackVersion {
	return v.value
}

func (v *NullableStackVersion) Set(val *StackVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableStackVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableStackVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackVersion(val *StackVersion) *NullableStackVersion {
	return &NullableStackVersion{value: val, isSet: true}
}

func (v NullableStackVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


