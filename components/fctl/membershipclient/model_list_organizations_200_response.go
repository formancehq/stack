/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"fmt"
)

// ListOrganizations200Response - struct for ListOrganizations200Response
type ListOrganizations200Response struct {
	ListOrganizationExpandedResponse *ListOrganizationExpandedResponse
	ListOrganizationResponse *ListOrganizationResponse
}

// ListOrganizationExpandedResponseAsListOrganizations200Response is a convenience function that returns ListOrganizationExpandedResponse wrapped in ListOrganizations200Response
func ListOrganizationExpandedResponseAsListOrganizations200Response(v *ListOrganizationExpandedResponse) ListOrganizations200Response {
	return ListOrganizations200Response{
		ListOrganizationExpandedResponse: v,
	}
}

// ListOrganizationResponseAsListOrganizations200Response is a convenience function that returns ListOrganizationResponse wrapped in ListOrganizations200Response
func ListOrganizationResponseAsListOrganizations200Response(v *ListOrganizationResponse) ListOrganizations200Response {
	return ListOrganizations200Response{
		ListOrganizationResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListOrganizations200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListOrganizationExpandedResponse
	err = newStrictDecoder(data).Decode(&dst.ListOrganizationExpandedResponse)
	if err == nil {
		jsonListOrganizationExpandedResponse, _ := json.Marshal(dst.ListOrganizationExpandedResponse)
		if string(jsonListOrganizationExpandedResponse) == "{}" { // empty struct
			dst.ListOrganizationExpandedResponse = nil
		} else {
			match++
		}
	} else {
		dst.ListOrganizationExpandedResponse = nil
	}

	// try to unmarshal data into ListOrganizationResponse
	err = newStrictDecoder(data).Decode(&dst.ListOrganizationResponse)
	if err == nil {
		jsonListOrganizationResponse, _ := json.Marshal(dst.ListOrganizationResponse)
		if string(jsonListOrganizationResponse) == "{}" { // empty struct
			dst.ListOrganizationResponse = nil
		} else {
			match++
		}
	} else {
		dst.ListOrganizationResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListOrganizationExpandedResponse = nil
		dst.ListOrganizationResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListOrganizations200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListOrganizations200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListOrganizations200Response) MarshalJSON() ([]byte, error) {
	if src.ListOrganizationExpandedResponse != nil {
		return json.Marshal(&src.ListOrganizationExpandedResponse)
	}

	if src.ListOrganizationResponse != nil {
		return json.Marshal(&src.ListOrganizationResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListOrganizations200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ListOrganizationExpandedResponse != nil {
		return obj.ListOrganizationExpandedResponse
	}

	if obj.ListOrganizationResponse != nil {
		return obj.ListOrganizationResponse
	}

	// all schemas are nil
	return nil
}

type NullableListOrganizations200Response struct {
	value *ListOrganizations200Response
	isSet bool
}

func (v NullableListOrganizations200Response) Get() *ListOrganizations200Response {
	return v.value
}

func (v *NullableListOrganizations200Response) Set(val *ListOrganizations200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListOrganizations200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListOrganizations200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOrganizations200Response(val *ListOrganizations200Response) *NullableListOrganizations200Response {
	return &NullableListOrganizations200Response{value: val, isSet: true}
}

func (v NullableListOrganizations200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOrganizations200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


