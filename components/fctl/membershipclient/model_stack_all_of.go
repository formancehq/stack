/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
)

// checks if the StackAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackAllOf{}

// StackAllOf struct for StackAllOf
type StackAllOf struct {
	// Stack ID
	Id string `json:"id"`
	// Organization ID
	OrganizationId string `json:"organizationId"`
	// Base stack uri
	Uri string `json:"uri"`
	// The region where the stack is installed
	RegionID string `json:"regionID"`
}

// NewStackAllOf instantiates a new StackAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackAllOf(id string, organizationId string, uri string, regionID string) *StackAllOf {
	this := StackAllOf{}
	this.Id = id
	this.OrganizationId = organizationId
	this.Uri = uri
	this.RegionID = regionID
	return &this
}

// NewStackAllOfWithDefaults instantiates a new StackAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackAllOfWithDefaults() *StackAllOf {
	this := StackAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *StackAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StackAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StackAllOf) SetId(v string) {
	o.Id = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *StackAllOf) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *StackAllOf) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *StackAllOf) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetUri returns the Uri field value
func (o *StackAllOf) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *StackAllOf) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *StackAllOf) SetUri(v string) {
	o.Uri = v
}

// GetRegionID returns the RegionID field value
func (o *StackAllOf) GetRegionID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionID
}

// GetRegionIDOk returns a tuple with the RegionID field value
// and a boolean to check if the value has been set.
func (o *StackAllOf) GetRegionIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionID, true
}

// SetRegionID sets field value
func (o *StackAllOf) SetRegionID(v string) {
	o.RegionID = v
}

func (o StackAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["organizationId"] = o.OrganizationId
	toSerialize["uri"] = o.Uri
	toSerialize["regionID"] = o.RegionID
	return toSerialize, nil
}

type NullableStackAllOf struct {
	value *StackAllOf
	isSet bool
}

func (v NullableStackAllOf) Get() *StackAllOf {
	return v.value
}

func (v *NullableStackAllOf) Set(val *StackAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStackAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStackAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackAllOf(val *StackAllOf) *NullableStackAllOf {
	return &NullableStackAllOf{value: val, isSet: true}
}

func (v NullableStackAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
