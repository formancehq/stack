openapi: 3.0.3
info:
  contact: {}
  title: Membership API
  version: 0.1.0
servers:
- description: Local server
  url: http://localhost:8080
security:
- oauth2: []
paths:
  /_info:
    get:
      operationId: getServerInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
          description: Server information
      summary: Get server info
  /organizations:
    get:
      operationId: listOrganizations
      parameters:
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: bool
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationExpandedResponse'
          description: List of organizations
      summary: List organizations of the connected user
    post:
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationResponse'
          description: Organization created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Create organization
  /organizations/expanded:
    get:
      deprecated: true
      operationId: listOrganizationsExpanded
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationExpandedResponse'
          description: List of organizations with expanded data
      summary: List organizations of the connected user with expanded data
  /organizations/{organizationId}:
    delete:
      operationId: deleteOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
        "204":
          description: Organization deleted
      summary: Delete organization
    get:
      operationId: readOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: bool
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOrganizationResponse'
          description: OK
      summary: Read organization
    put:
      operationId: updateOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationData'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOrganizationResponse'
          description: Organization updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update organization
  /organizations/{organizationId}/logs:
    get:
      operationId: listLogs
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: stackId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pageSize
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: action
        required: false
        schema:
          $ref: '#/components/schemas/Action'
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: value
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogCursor'
          description: Cursor of logs
      summary: List logs
  /organizations/{organizationId}/users:
    get:
      operationId: listUsersOfOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
          description: List of users
      summary: List users of organization
  /organizations/{organizationId}/users/{userId}:
    delete:
      description: |
        The owner of the organization can remove anyone while each user can leave any organization where it is not owner.
      operationId: deleteUserFromOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: User deleted from organization
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: delete user from organization
    get:
      operationId: readUserOfOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOrganizationUserResponse'
          description: Read a user
      summary: Read user of organization
    put:
      operationId: upsertOrganizationUser
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationUserRequest'
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "204":
          description: Updated user
      summary: Update user within an organization
  /organizations/{organizationId}/stacks:
    get:
      operationId: listStacks
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - description: Include deleted and disabled stacks
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: boolean
        style: form
      - deprecated: true
        description: Include deleted stacks
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStacksResponse'
          description: List of stacks
      summary: List stacks
    post:
      operationId: createStack
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStackRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStackResponse'
          description: Stack created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Create stack
  /organizations/{organizationId}/stacks/{stackId}/modules:
    delete:
      operationId: disableModule
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "202":
          description: Module disabled
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: disable module
    get:
      operationId: listModules
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModulesResponse'
          description: List of modules
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: List modules of a stack
    post:
      operationId: enableModule
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "202":
          description: Module enabled
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: enable module
  /organizations/{organizationId}/stacks/{stackId}/upgrade:
    put:
      operationId: upgradeStack
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StackVersion'
      responses:
        "202":
          description: Stack upgrade accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Upgrade stack
  /organizations/{organizationId}/stacks/{stackId}:
    delete:
      operationId: deleteStack
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: Stack deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Delete stack
    get:
      operationId: getStack
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadStackResponse'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: NotFound
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Find stack
    put:
      operationId: updateStack
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStackRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadStackResponse'
          description: Updated stack
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Update stack
  /organizations/{organizationId}/stacks/{stackId}/users:
    get:
      operationId: listStackUsersAccesses
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackUserAccessResponse'
          description: Stack users access role
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: List stack users accesses within an organization
  /organizations/{organizationId}/stacks/{stackId}/users/{userId}:
    delete:
      operationId: deleteStackUserAccess
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "204":
          description: Updated user
      summary: Delete stack user access role within an organization
    get:
      operationId: readStackUserAccess
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadStackUserAccess'
          description: Stack user access role
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Read stack user access role within an organization
    put:
      operationId: upsertStackUserAccess
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStackUserRequest'
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "204":
          description: Updated user
      summary: Update stack user access role within an organization
  /organizations/{organizationId}/stacks/{stackId}/disable:
    put:
      operationId: disableStack
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Stack disabled
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Disable stack
  /organizations/{organizationId}/stacks/{stackId}/enable:
    put:
      operationId: enableStack
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Stack enabled
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Enable stack
  /organizations/{organizationId}/stacks/{stackId}/restore:
    put:
      operationId: restoreStack
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadStackResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Restore stack
  /organizations/{organizationId}/stacks/{stackId}/stargate/enable:
    put:
      operationId: enableStargate
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Enable stargate on a stack
  /organizations/{organizationId}/stacks/{stackId}/stargate/disable:
    put:
      operationId: disableStargate
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: stackId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Disable stargate on a stack
  /me/invitations:
    get:
      operationId: listInvitations
      parameters:
      - description: Status of organizations
        explode: true
        in: query
        name: status
        required: false
        schema:
          type: string
        style: form
      - description: Status of organizations
        explode: true
        in: query
        name: organization
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInvitationsResponse'
          description: List of the invitations for the connected user
      summary: List invitations of the user
  /me/invitations/{invitationId}/accept:
    post:
      operationId: acceptInvitation
      parameters:
      - explode: false
        in: path
        name: invitationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Invitation accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Accept invitation
  /me/invitations/{invitationId}/reject:
    post:
      operationId: declineInvitation
      parameters:
      - explode: false
        in: path
        name: invitationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Invitation declined
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Decline invitation
  /organizations/{organizationId}/invitations:
    get:
      operationId: listOrganizationInvitations
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - description: Status of organizations
        explode: true
        in: query
        name: status
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInvitationsResponse'
          description: List of the invitations for the organization
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: List invitations of the organization
    post:
      operationId: createInvitation
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationClaim'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateInvitationResponse'
          description: Invitation created
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Create invitation
  /organizations/{organizationId}/invitations/{invitationId}:
    delete:
      operationId: deleteInvitation
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: invitationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Invitation deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Authorized
      summary: Delete invitation
  /organizations/{organizationId}/regions:
    get:
      operationId: listRegions
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRegionsResponse'
          description: List of the regions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
      summary: List regions
    post:
      operationId: createPrivateRegion
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrivateRegionRequest'
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not authorized
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedPrivateRegionResponse'
          description: Created region
      summary: Create a private region
  /organizations/{organizationId}/regions/{regionId}:
    delete:
      operationId: deleteRegion
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: regionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Delete a specific region
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not authorized
      summary: Delete region
    get:
      operationId: getRegion
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: regionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegionResponse'
          description: Get a specific region
      summary: Get region
  /organizations/{organizationId}/regions/{regionId}/versions:
    get:
      operationId: getRegionVersions
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: regionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegionVersionsResponse'
          description: Get a specific region
      summary: Get region versions
  /me:
    get:
      operationId: readConnectedUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserResponse'
          description: Read a user
      summary: Read user
components:
  schemas:
    Module:
      example:
        lastStateUpdate: 2000-01-23T04:56:07.000+00:00
        name: name
        lastStatusUpdate: 2000-01-23T04:56:07.000+00:00
        state: state
        status: status
      properties:
        name:
          type: string
        state:
          type: string
        status:
          type: string
        lastStatusUpdate:
          format: date-time
          type: string
        lastStateUpdate:
          format: date-time
          type: string
      required:
      - lastStateUpdate
      - lastStatusUpdate
      - name
      - state
      - status
      type: object
    ListModulesResponse:
      example:
        data:
        - lastStateUpdate: 2000-01-23T04:56:07.000+00:00
          name: name
          lastStatusUpdate: 2000-01-23T04:56:07.000+00:00
          state: state
          status: status
        - lastStateUpdate: 2000-01-23T04:56:07.000+00:00
          name: name
          lastStatusUpdate: 2000-01-23T04:56:07.000+00:00
          state: state
          status: status
      properties:
        data:
          items:
            $ref: '#/components/schemas/Module'
          type: array
      required:
      - data
      type: object
    Action:
      enum:
      - agents.connected
      - agents.disconnected
      - invitations.created
      - invitations.accepted
      - invitations.rejected
      - organizations.created
      - organizations.updated
      - organizations.deleted
      - organizations.user.deleted
      - organizations.user.updated
      - regions.created
      - regions.deleted
      - users.created
      - users.deleted
      - stacks.disposal
      - stacks.disposal-reset
      - stacks.warned
      - stacks.pruned
      - stacks.status.updated
      - stacks.created
      - stacks.updated
      - stacks.deleted
      - stacks.restored
      - stacks.disabled
      - stacks.enabled
      - stacks.upgraded
      - stacks.stargate.enabled
      - stacks.stargate.disabled
      - stacks.user.updated
      - stacks.user.deleted
      - stacks.reachness.updated
      type: string
    LogCursor:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/LogCursor_data'
      required:
      - data
    Log:
      properties:
        seq:
          example: 1e6f8b6e-1b6b-4b3b-8b3b-1b6b4b3b8b3b
          type: string
        organizationId:
          type: string
        userId:
          type: string
        action:
          type: string
        date:
          format: date-time
          type: string
        data:
          type: object
      required:
      - action
      - data
      - date
      - organizationId
      - seq
      - userId
      type: object
    Cursor:
      properties:
        pageSize:
          example: 15
          format: int64
          maximum: 1000
          minimum: 1
          type: integer
        hasMore:
          example: false
          type: boolean
        previous:
          example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=
          type: string
        next:
          example: ""
          type: string
      required:
      - data
      - hasMore
      - pageSize
      type: object
    CreatePrivateRegionRequest:
      example:
        name: name
      properties:
        name:
          type: string
      required:
      - name
      type: object
    CreatedPrivateRegionResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/PrivateRegion'
      required:
      - data
    PrivateRegion:
      allOf:
      - $ref: '#/components/schemas/Region'
      - $ref: '#/components/schemas/PrivateRegion_allOf'
    PublicRegion:
      allOf:
      - $ref: '#/components/schemas/Region'
      - $ref: '#/components/schemas/PublicRegion_allOf'
    AnyRegion:
      allOf:
      - $ref: '#/components/schemas/Region'
      - $ref: '#/components/schemas/AnyRegion_allOf'
    OrganizationData:
      example:
        defaultOrganizationAccess: null
        defaultStackAccess: null
        domain: domain
        name: name
      properties:
        name:
          description: Organization name
          type: string
        defaultOrganizationAccess:
          $ref: '#/components/schemas/Role'
        defaultStackAccess:
          $ref: '#/components/schemas/Role'
        domain:
          description: Organization domain
          type: string
      required:
      - name
      type: object
    Organization:
      allOf:
      - $ref: '#/components/schemas/OrganizationData'
      - $ref: '#/components/schemas/Organization_allOf'
    StackData:
      properties:
        name:
          description: Stack name
          type: string
        metadata:
          additionalProperties:
            type: string
          type: object
      required:
      - metadata
      - name
      type: object
    StackVersion:
      example:
        version: version
      properties:
        version:
          description: Supported only with agent version >= v0.7.0
          type: string
      type: object
    StackLifeCycle:
      properties:
        status:
          enum:
          - UNKNOWN
          - PROGRESSING
          - READY
          - DISABLED
          - DELETED
          type: string
        state:
          enum:
          - ACTIVE
          - DISABLED
          - DELETED
          type: string
        expectedStatus:
          enum:
          - UNKNOWN
          - PROGRESSING
          - READY
          - DISABLED
          - DELETED
          type: string
        lastStateUpdate:
          format: date-time
          type: string
        lastExpectedStatusUpdate:
          format: date-time
          type: string
        lastStatusUpdate:
          format: date-time
          type: string
      required:
      - expectedStatus
      - lastExpectedStatusUpdate
      - lastStateUpdate
      - lastStatusUpdate
      - state
      - status
      type: object
    StackReachability:
      properties:
        reachable:
          description: Stack is reachable through Stargate
          type: boolean
        lastReachableUpdate:
          description: Last time the stack was reachable
          format: date-time
          type: string
      required:
      - reachable
      type: object
    Stack:
      allOf:
      - $ref: '#/components/schemas/StackData'
      - $ref: '#/components/schemas/StackVersion'
      - $ref: '#/components/schemas/StackLifeCycle'
      - $ref: '#/components/schemas/StackReachability'
      - $ref: '#/components/schemas/Stack_allOf'
    UserData:
      allOf:
      - $ref: '#/components/schemas/UserData_allOf'
    Role:
      default: ""
      enum:
      - ""
      - NONE
      - ADMIN
      - GUEST
      - USER
      type: string
    User:
      allOf:
      - $ref: '#/components/schemas/UserData'
      - $ref: '#/components/schemas/User_allOf'
    OrganizationUserArray:
      items:
        $ref: '#/components/schemas/OrganizationUserArray_inner'
      type: array
    ReadOrganizationUserResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/OrganizationUser'
      type: object
    OrganizationUser:
      allOf:
      - $ref: '#/components/schemas/OrganizationUser_allOf'
      - $ref: '#/components/schemas/User'
    OrganizationArray:
      items:
        $ref: '#/components/schemas/Organization'
      type: array
    StackArray:
      items:
        $ref: '#/components/schemas/Stack'
      type: array
    UserArray:
      items:
        $ref: '#/components/schemas/User'
      type: array
    ReadStackUserAccess:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/StackUserAccess'
      type: object
    StackUserAccess:
      allOf:
      - $ref: '#/components/schemas/StackUserAccess_allOf'
    StackUserAccessResponse:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/StackUserAccess'
          type: array
      type: object
    StackUserAccessArray:
      items:
        $ref: '#/components/schemas/StackUserAccess'
      type: array
    ListOrganizationResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
      type: object
    CreateOrganizationRequest:
      $ref: '#/components/schemas/OrganizationData'
    CreateOrganizationResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/OrganizationExpanded'
      type: object
    ReadOrganizationResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/OrganizationExpanded'
      type: object
    ListStacksResponse:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/Stack'
          type: array
      type: object
    ListUsersResponse:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/OrganizationUserArray_inner'
          type: array
      type: object
    CreateStackRequest:
      allOf:
      - $ref: '#/components/schemas/StackData'
      - $ref: '#/components/schemas/StackVersion'
      - $ref: '#/components/schemas/CreateStackRequest_allOf'
    UpdateStackRequest:
      allOf:
      - $ref: '#/components/schemas/StackData'
    CreateStackResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/Stack'
      type: object
    ReadStackResponse:
      $ref: '#/components/schemas/CreateStackResponse'
    ReadUserResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/User'
      type: object
    ListInvitationsResponse:
      example:
        data:
        - organizationId: organizationId
          role: null
          userEmail: userEmail
          stackClaims:
          - role: null
            id: id
          - role: null
            id: id
          id: id
          creationDate: 2000-01-23T04:56:07.000+00:00
          userId: userId
          organizationAccess: null
          status: pending
          updatedAt: updatedAt
        - organizationId: organizationId
          role: null
          userEmail: userEmail
          stackClaims:
          - role: null
            id: id
          - role: null
            id: id
          id: id
          creationDate: 2000-01-23T04:56:07.000+00:00
          userId: userId
          organizationAccess: null
          status: pending
          updatedAt: updatedAt
      properties:
        data:
          items:
            $ref: '#/components/schemas/Invitation'
          type: array
      type: object
    CreateInvitationResponse:
      example:
        data:
          organizationId: organizationId
          role: null
          userEmail: userEmail
          stackClaims:
          - role: null
            id: id
          - role: null
            id: id
          id: id
          creationDate: 2000-01-23T04:56:07.000+00:00
          userId: userId
          organizationAccess: null
          status: pending
          updatedAt: updatedAt
      properties:
        data:
          $ref: '#/components/schemas/Invitation'
      type: object
    Error:
      properties:
        errorCode:
          type: string
        errorMessage:
          type: string
      required:
      - errorCode
      type: object
    Invitation:
      example:
        organizationId: organizationId
        role: null
        userEmail: userEmail
        stackClaims:
        - role: null
          id: id
        - role: null
          id: id
        id: id
        creationDate: 2000-01-23T04:56:07.000+00:00
        userId: userId
        organizationAccess: null
        status: pending
        updatedAt: updatedAt
      properties:
        id:
          type: string
        organizationId:
          type: string
        userEmail:
          type: string
        status:
          enum:
          - pending
          - accepted
          - rejected
          type: string
        creationDate:
          format: date-time
          type: string
        updatedAt:
          format: date-tim
          type: string
        role:
          $ref: '#/components/schemas/Role'
        stackClaims:
          items:
            $ref: '#/components/schemas/StackClaim'
          type: array
        userId:
          type: string
        organizationAccess:
          $ref: '#/components/schemas/OrganizationUser'
      required:
      - creationDate
      - id
      - organizationId
      - role
      - status
      - userEmail
      type: object
    InvitationClaim:
      example:
        role: null
        stackClaims:
        - role: null
          id: id
        - role: null
          id: id
      properties:
        role:
          $ref: '#/components/schemas/Role'
        stackClaims:
          items:
            $ref: '#/components/schemas/StackClaim'
          type: array
      required:
      - orgClaim
      - stackClaims
      type: object
    StackClaims:
      items:
        $ref: '#/components/schemas/StackClaim'
      type: array
    StackClaim:
      example:
        role: null
        id: id
      properties:
        id:
          type: string
        role:
          $ref: '#/components/schemas/Role'
      required:
      - id
      - role
      type: object
    Region:
      properties:
        id:
          type: string
        baseUrl:
          type: string
        createdAt:
          format: datetime
          type: string
        active:
          type: boolean
        lastPing:
          format: date-time
          type: string
        name:
          type: string
      required:
      - active
      - baseUrl
      - createdAt
      - id
      - name
      type: object
    ListOrganizationExpandedResponse:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/ListOrganizationExpandedResponse_data_inner'
          type: array
      type: object
    OrganizationExpanded:
      allOf:
      - $ref: '#/components/schemas/Organization'
      - $ref: '#/components/schemas/OrganizationExpanded_allOf'
    ListRegionsResponse:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/AnyRegion'
          type: array
      required:
      - data
      type: object
    GetRegionResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/AnyRegion'
      required:
      - data
      type: object
    ServerInfo:
      example:
        version: version
      properties:
        version:
          type: string
      required:
      - version
      type: object
    Version:
      example:
        versions:
          key: versions
        name: name
      properties:
        name:
          type: string
        versions:
          additionalProperties:
            type: string
          type: object
      required:
      - name
      - versions
      type: object
    UpdateOrganizationUserRequest:
      example:
        role: null
      properties:
        role:
          $ref: '#/components/schemas/Role'
      required:
      - role
      type: object
    UpdateStackUserRequest:
      example:
        role: null
      properties:
        role:
          $ref: '#/components/schemas/Role'
      required:
      - role
      type: object
    GetRegionVersionsResponse:
      example:
        data:
        - versions:
            key: versions
          name: name
        - versions:
            key: versions
          name: name
      properties:
        data:
          items:
            $ref: '#/components/schemas/Version'
          type: array
      required:
      - data
      type: object
    LogCursor_data_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Log'
          type: array
      type: object
    LogCursor_data:
      allOf:
      - $ref: '#/components/schemas/Cursor'
      - $ref: '#/components/schemas/LogCursor_data_allOf'
    PrivateRegion_allOf_secret:
      properties:
        lastDigits:
          type: string
        clear:
          type: string
      required:
      - lastDigits
      type: object
      example: null
    PrivateRegion_allOf:
      properties:
        organizationID:
          type: string
        creatorID:
          type: string
        secret:
          $ref: '#/components/schemas/PrivateRegion_allOf_secret'
      required:
      - creatorID
      - organizationID
      type: object
      example: null
    PublicRegion_allOf:
      properties:
        production:
          type: boolean
      required:
      - production
      type: object
      example: null
    AnyRegion_allOf:
      properties:
        clientID:
          type: string
        organizationID:
          type: string
        creator:
          $ref: '#/components/schemas/User'
        production:
          type: boolean
        public:
          type: boolean
        version:
          type: string
      required:
      - public
      type: object
      example: null
    Organization_allOf:
      properties:
        id:
          description: Organization ID
          type: string
        ownerId:
          description: Owner ID
          type: string
        availableStacks:
          description: Number of available stacks
          type: integer
        availableSandboxes:
          description: Number of available sandboxes
          type: integer
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - id
      - ownerId
      type: object
      example: null
    Stack_allOf:
      properties:
        id:
          description: Stack ID
          type: string
        organizationId:
          description: Organization ID
          type: string
        uri:
          description: Base stack uri
          type: string
        regionID:
          description: The region where the stack is installed
          type: string
        stargateEnabled:
          type: boolean
        createdAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          type: string
        disabledAt:
          format: date-time
          type: string
        auditEnabled:
          type: boolean
      required:
      - id
      - organizationId
      - regionID
      - stargateEnabled
      - uri
      type: object
      example: null
    UserData_allOf:
      properties:
        email:
          type: string
      required:
      - email
      type: object
      example: null
    User_allOf:
      properties:
        id:
          description: User ID
          type: string
      required:
      - id
      type: object
      example: null
    OrganizationUserArray_inner:
      allOf:
      - $ref: '#/components/schemas/OrganizationUser'
    OrganizationUser_allOf:
      properties:
        role:
          $ref: '#/components/schemas/Role'
      required:
      - role
      type: object
      example: null
    StackUserAccess_allOf:
      properties:
        stackId:
          description: Stack ID
          type: string
        userId:
          description: User ID
          type: string
        role:
          $ref: '#/components/schemas/Role'
      required:
      - role
      - stackId
      - userId
      type: object
      example: null
    CreateStackRequest_allOf:
      properties:
        regionID:
          type: string
      required:
      - regionID
      type: object
      example: null
    ListOrganizationExpandedResponse_data_inner:
      allOf:
      - $ref: '#/components/schemas/OrganizationExpanded'
    OrganizationExpanded_allOf:
      properties:
        totalStacks:
          type: integer
        totalUsers:
          type: integer
        owner:
          $ref: '#/components/schemas/User'
      type: object
      example: null
  securitySchemes:
    oauth2:
      flows:
        authorizationCode:
          authorizationUrl: /authorize
          scopes:
            openid: Enable OIDC
            email: Ask email access
          tokenUrl: /oauth/token
      type: oauth2
