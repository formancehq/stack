/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"fmt"
)

// ReadOrganizationResponseData struct for ReadOrganizationResponseData
type ReadOrganizationResponseData struct {
	Organization *Organization
	OrganizationExpanded *OrganizationExpanded
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ReadOrganizationResponseData) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Organization
	err = json.Unmarshal(data, &dst.Organization);
	if err == nil {
		jsonOrganization, _ := json.Marshal(dst.Organization)
		if string(jsonOrganization) == "{}" { // empty struct
			dst.Organization = nil
		} else {
			return nil // data stored in dst.Organization, return on the first match
		}
	} else {
		dst.Organization = nil
	}

	// try to unmarshal JSON data into OrganizationExpanded
	err = json.Unmarshal(data, &dst.OrganizationExpanded);
	if err == nil {
		jsonOrganizationExpanded, _ := json.Marshal(dst.OrganizationExpanded)
		if string(jsonOrganizationExpanded) == "{}" { // empty struct
			dst.OrganizationExpanded = nil
		} else {
			return nil // data stored in dst.OrganizationExpanded, return on the first match
		}
	} else {
		dst.OrganizationExpanded = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ReadOrganizationResponseData)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ReadOrganizationResponseData) MarshalJSON() ([]byte, error) {
	if src.Organization != nil {
		return json.Marshal(&src.Organization)
	}

	if src.OrganizationExpanded != nil {
		return json.Marshal(&src.OrganizationExpanded)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableReadOrganizationResponseData struct {
	value *ReadOrganizationResponseData
	isSet bool
}

func (v NullableReadOrganizationResponseData) Get() *ReadOrganizationResponseData {
	return v.value
}

func (v *NullableReadOrganizationResponseData) Set(val *ReadOrganizationResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableReadOrganizationResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableReadOrganizationResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadOrganizationResponseData(val *ReadOrganizationResponseData) *NullableReadOrganizationResponseData {
	return &NullableReadOrganizationResponseData{value: val, isSet: true}
}

func (v NullableReadOrganizationResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadOrganizationResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


