/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
)

// checks if the RegionCapability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionCapability{}

// RegionCapability struct for RegionCapability
type RegionCapability struct {
	MODULE_LIST []string `json:"MODULE_LIST,omitempty"`
	EE []string `json:"EE,omitempty"`
}

// NewRegionCapability instantiates a new RegionCapability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionCapability() *RegionCapability {
	this := RegionCapability{}
	return &this
}

// NewRegionCapabilityWithDefaults instantiates a new RegionCapability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionCapabilityWithDefaults() *RegionCapability {
	this := RegionCapability{}
	return &this
}

// GetMODULE_LIST returns the MODULE_LIST field value if set, zero value otherwise.
func (o *RegionCapability) GetMODULE_LIST() []string {
	if o == nil || IsNil(o.MODULE_LIST) {
		var ret []string
		return ret
	}
	return o.MODULE_LIST
}

// GetMODULE_LISTOk returns a tuple with the MODULE_LIST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionCapability) GetMODULE_LISTOk() ([]string, bool) {
	if o == nil || IsNil(o.MODULE_LIST) {
		return nil, false
	}
	return o.MODULE_LIST, true
}

// HasMODULE_LIST returns a boolean if a field has been set.
func (o *RegionCapability) HasMODULE_LIST() bool {
	if o != nil && !IsNil(o.MODULE_LIST) {
		return true
	}

	return false
}

// SetMODULE_LIST gets a reference to the given []string and assigns it to the MODULE_LIST field.
func (o *RegionCapability) SetMODULE_LIST(v []string) {
	o.MODULE_LIST = v
}

// GetEE returns the EE field value if set, zero value otherwise.
func (o *RegionCapability) GetEE() []string {
	if o == nil || IsNil(o.EE) {
		var ret []string
		return ret
	}
	return o.EE
}

// GetEEOk returns a tuple with the EE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionCapability) GetEEOk() ([]string, bool) {
	if o == nil || IsNil(o.EE) {
		return nil, false
	}
	return o.EE, true
}

// HasEE returns a boolean if a field has been set.
func (o *RegionCapability) HasEE() bool {
	if o != nil && !IsNil(o.EE) {
		return true
	}

	return false
}

// SetEE gets a reference to the given []string and assigns it to the EE field.
func (o *RegionCapability) SetEE(v []string) {
	o.EE = v
}

func (o RegionCapability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionCapability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MODULE_LIST) {
		toSerialize["MODULE_LIST"] = o.MODULE_LIST
	}
	if !IsNil(o.EE) {
		toSerialize["EE"] = o.EE
	}
	return toSerialize, nil
}

type NullableRegionCapability struct {
	value *RegionCapability
	isSet bool
}

func (v NullableRegionCapability) Get() *RegionCapability {
	return v.value
}

func (v *NullableRegionCapability) Set(val *RegionCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionCapability(val *RegionCapability) *NullableRegionCapability {
	return &NullableRegionCapability{value: val, isSet: true}
}

func (v NullableRegionCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


