/*
Payments API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CurrencyCloudConfig struct for CurrencyCloudConfig
type CurrencyCloudConfig struct {
	ApiKey interface{} `json:"apiKey"`
	// Username of the API Key holder
	LoginID interface{} `json:"loginID"`
	// The frequency at which the connector will fetch transactions
	PollingPeriod interface{} `json:"pollingPeriod,omitempty"`
	// The endpoint to use for the API. Defaults to https://devapi.currencycloud.com
	Endpoint interface{} `json:"endpoint,omitempty"`
}

// NewCurrencyCloudConfig instantiates a new CurrencyCloudConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyCloudConfig(apiKey interface{}, loginID interface{}) *CurrencyCloudConfig {
	this := CurrencyCloudConfig{}
	this.ApiKey = apiKey
	this.LoginID = loginID
	return &this
}

// NewCurrencyCloudConfigWithDefaults instantiates a new CurrencyCloudConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyCloudConfigWithDefaults() *CurrencyCloudConfig {
	this := CurrencyCloudConfig{}
	return &this
}

// GetApiKey returns the ApiKey field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CurrencyCloudConfig) GetApiKey() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyCloudConfig) GetApiKeyOk() (*interface{}, bool) {
	if o == nil || isNil(o.ApiKey) {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *CurrencyCloudConfig) SetApiKey(v interface{}) {
	o.ApiKey = v
}

// GetLoginID returns the LoginID field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CurrencyCloudConfig) GetLoginID() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.LoginID
}

// GetLoginIDOk returns a tuple with the LoginID field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyCloudConfig) GetLoginIDOk() (*interface{}, bool) {
	if o == nil || isNil(o.LoginID) {
		return nil, false
	}
	return &o.LoginID, true
}

// SetLoginID sets field value
func (o *CurrencyCloudConfig) SetLoginID(v interface{}) {
	o.LoginID = v
}

// GetPollingPeriod returns the PollingPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyCloudConfig) GetPollingPeriod() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PollingPeriod
}

// GetPollingPeriodOk returns a tuple with the PollingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyCloudConfig) GetPollingPeriodOk() (*interface{}, bool) {
	if o == nil || isNil(o.PollingPeriod) {
		return nil, false
	}
	return &o.PollingPeriod, true
}

// HasPollingPeriod returns a boolean if a field has been set.
func (o *CurrencyCloudConfig) HasPollingPeriod() bool {
	if o != nil && isNil(o.PollingPeriod) {
		return true
	}

	return false
}

// SetPollingPeriod gets a reference to the given interface{} and assigns it to the PollingPeriod field.
func (o *CurrencyCloudConfig) SetPollingPeriod(v interface{}) {
	o.PollingPeriod = v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyCloudConfig) GetEndpoint() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyCloudConfig) GetEndpointOk() (*interface{}, bool) {
	if o == nil || isNil(o.Endpoint) {
		return nil, false
	}
	return &o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *CurrencyCloudConfig) HasEndpoint() bool {
	if o != nil && isNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given interface{} and assigns it to the Endpoint field.
func (o *CurrencyCloudConfig) SetEndpoint(v interface{}) {
	o.Endpoint = v
}

func (o CurrencyCloudConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiKey != nil {
		toSerialize["apiKey"] = o.ApiKey
	}
	if o.LoginID != nil {
		toSerialize["loginID"] = o.LoginID
	}
	if o.PollingPeriod != nil {
		toSerialize["pollingPeriod"] = o.PollingPeriod
	}
	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}
	return json.Marshal(toSerialize)
}

type NullableCurrencyCloudConfig struct {
	value *CurrencyCloudConfig
	isSet bool
}

func (v NullableCurrencyCloudConfig) Get() *CurrencyCloudConfig {
	return v.value
}

func (v *NullableCurrencyCloudConfig) Set(val *CurrencyCloudConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyCloudConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyCloudConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyCloudConfig(val *CurrencyCloudConfig) *NullableCurrencyCloudConfig {
	return &NullableCurrencyCloudConfig{value: val, isSet: true}
}

func (v NullableCurrencyCloudConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyCloudConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
