/*
Payments API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ConnectorBaseInfo struct for ConnectorBaseInfo
type ConnectorBaseInfo struct {
	Provider interface{} `json:"provider,omitempty"`
	Disabled interface{} `json:"disabled,omitempty"`
}

// NewConnectorBaseInfo instantiates a new ConnectorBaseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorBaseInfo() *ConnectorBaseInfo {
	this := ConnectorBaseInfo{}
	return &this
}

// NewConnectorBaseInfoWithDefaults instantiates a new ConnectorBaseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorBaseInfoWithDefaults() *ConnectorBaseInfo {
	this := ConnectorBaseInfo{}
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorBaseInfo) GetProvider() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorBaseInfo) GetProviderOk() (*interface{}, bool) {
	if o == nil || isNil(o.Provider) {
		return nil, false
	}
	return &o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *ConnectorBaseInfo) HasProvider() bool {
	if o != nil && isNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given interface{} and assigns it to the Provider field.
func (o *ConnectorBaseInfo) SetProvider(v interface{}) {
	o.Provider = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorBaseInfo) GetDisabled() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorBaseInfo) GetDisabledOk() (*interface{}, bool) {
	if o == nil || isNil(o.Disabled) {
		return nil, false
	}
	return &o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *ConnectorBaseInfo) HasDisabled() bool {
	if o != nil && isNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given interface{} and assigns it to the Disabled field.
func (o *ConnectorBaseInfo) SetDisabled(v interface{}) {
	o.Disabled = v
}

func (o ConnectorBaseInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Provider != nil {
		toSerialize["provider"] = o.Provider
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorBaseInfo struct {
	value *ConnectorBaseInfo
	isSet bool
}

func (v NullableConnectorBaseInfo) Get() *ConnectorBaseInfo {
	return v.value
}

func (v *NullableConnectorBaseInfo) Set(val *ConnectorBaseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorBaseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorBaseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorBaseInfo(val *ConnectorBaseInfo) *NullableConnectorBaseInfo {
	return &NullableConnectorBaseInfo{value: val, isSet: true}
}

func (v NullableConnectorBaseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorBaseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
