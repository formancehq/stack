// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	stripe "github.com/stripe/stripe-go/v79"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccountBalances mocks base method.
func (m *MockClient) GetAccountBalances(ctx context.Context, accountID string) (*stripe.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalances", ctx, accountID)
	ret0, _ := ret[0].(*stripe.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalances indicates an expected call of GetAccountBalances.
func (mr *MockClientMockRecorder) GetAccountBalances(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalances", reflect.TypeOf((*MockClient)(nil).GetAccountBalances), ctx, accountID)
}

// GetAccounts mocks base method.
func (m *MockClient) GetAccounts(ctx context.Context, timeline Timeline, pageSize int64) ([]*stripe.Account, Timeline, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, timeline, pageSize)
	ret0, _ := ret[0].([]*stripe.Account)
	ret1, _ := ret[1].(Timeline)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockClientMockRecorder) GetAccounts(ctx, timeline, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockClient)(nil).GetAccounts), ctx, timeline, pageSize)
}

// GetExternalAccounts mocks base method.
func (m *MockClient) GetExternalAccounts(ctx context.Context, accountID string, timeline Timeline, pageSize int64) ([]*stripe.BankAccount, Timeline, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalAccounts", ctx, accountID, timeline, pageSize)
	ret0, _ := ret[0].([]*stripe.BankAccount)
	ret1, _ := ret[1].(Timeline)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetExternalAccounts indicates an expected call of GetExternalAccounts.
func (mr *MockClientMockRecorder) GetExternalAccounts(ctx, accountID, timeline, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalAccounts", reflect.TypeOf((*MockClient)(nil).GetExternalAccounts), ctx, accountID, timeline, pageSize)
}

// GetPayments mocks base method.
func (m *MockClient) GetPayments(ctx context.Context, accountID string, timeline Timeline, pageSize int64) ([]*stripe.BalanceTransaction, Timeline, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayments", ctx, accountID, timeline, pageSize)
	ret0, _ := ret[0].([]*stripe.BalanceTransaction)
	ret1, _ := ret[1].(Timeline)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetPayments indicates an expected call of GetPayments.
func (mr *MockClientMockRecorder) GetPayments(ctx, accountID, timeline, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayments", reflect.TypeOf((*MockClient)(nil).GetPayments), ctx, accountID, timeline, pageSize)
}
