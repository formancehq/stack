// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: payment.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PaymentType int32

const (
	PaymentType_PAYMENT_TYPE_UNKNOWN  PaymentType = 0
	PaymentType_PAYMENT_TYPE_PAYIN    PaymentType = 1
	PaymentType_PAYMENT_TYPE_PAYOUT   PaymentType = 2
	PaymentType_PAYMENT_TYPE_TRANSFER PaymentType = 3
	PaymentType_PAYMENT_TYPE_OTHER    PaymentType = 100
)

// Enum value maps for PaymentType.
var (
	PaymentType_name = map[int32]string{
		0:   "PAYMENT_TYPE_UNKNOWN",
		1:   "PAYMENT_TYPE_PAYIN",
		2:   "PAYMENT_TYPE_PAYOUT",
		3:   "PAYMENT_TYPE_TRANSFER",
		100: "PAYMENT_TYPE_OTHER",
	}
	PaymentType_value = map[string]int32{
		"PAYMENT_TYPE_UNKNOWN":  0,
		"PAYMENT_TYPE_PAYIN":    1,
		"PAYMENT_TYPE_PAYOUT":   2,
		"PAYMENT_TYPE_TRANSFER": 3,
		"PAYMENT_TYPE_OTHER":    100,
	}
)

func (x PaymentType) Enum() *PaymentType {
	p := new(PaymentType)
	*p = x
	return p
}

func (x PaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_proto_enumTypes[0].Descriptor()
}

func (PaymentType) Type() protoreflect.EnumType {
	return &file_payment_proto_enumTypes[0]
}

func (x PaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentType.Descriptor instead.
func (PaymentType) EnumDescriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{0}
}

type PaymentScheme int32

const (
	PaymentScheme_PAYMENT_SCHEME_UNKNOWN PaymentScheme = 0
	// Scheme cards
	PaymentScheme_PAYMENT_SCHEME_CARD_VISA       PaymentScheme = 1
	PaymentScheme_PAYMENT_SCHEME_CARD_MASTERCARD PaymentScheme = 2
	PaymentScheme_PAYMENT_SCHEME_CARD_AMEX       PaymentScheme = 3
	PaymentScheme_PAYMENT_SCHEME_CARD_DINERS     PaymentScheme = 4
	PaymentScheme_PAYMENT_SCHEME_CARD_DISCOVER   PaymentScheme = 5
	PaymentScheme_PAYMENT_SCHEME_CARD_JCB        PaymentScheme = 6
	PaymentScheme_PAYMENT_SCHEME_CARD_UNION_PAY  PaymentScheme = 7
	PaymentScheme_PAYMENT_SCHEME_CARD_ALIPAY     PaymentScheme = 8
	PaymentScheme_PAYMENT_SCHEME_CARD_CUP        PaymentScheme = 9
	PaymentScheme_PAYMENT_SCHEME_SEPA_DEBIT      PaymentScheme = 10
	PaymentScheme_PAYMENT_SCHEME_SEPA_CREDIT     PaymentScheme = 11
	PaymentScheme_PAYMENT_SCHEME_SEPA            PaymentScheme = 12
	PaymentScheme_PAYMENT_SCHEME_GOOGLE_PAY      PaymentScheme = 13
	PaymentScheme_PAYMENT_SCHEME_APPLE_PAY       PaymentScheme = 14
	PaymentScheme_PAYMENT_SCHEME_DOKU            PaymentScheme = 15
	PaymentScheme_PAYMENT_SCHEME_DRAGON_PAY      PaymentScheme = 16
	PaymentScheme_PAYMENT_SCHEME_MAESTRO         PaymentScheme = 17
	PaymentScheme_PAYMENT_SCHEME_MOL_PAY         PaymentScheme = 18
	PaymentScheme_PAYMENT_SCHEME_A2A             PaymentScheme = 19
	PaymentScheme_PAYMENT_SCHEME_ACH_DEBIT       PaymentScheme = 20
	PaymentScheme_PAYMENT_SCHEME_ACH             PaymentScheme = 21
	PaymentScheme_PAYMENT_SCHEME_RTP             PaymentScheme = 22
	PaymentScheme_PAYMENT_SCHEME_OTHER           PaymentScheme = 100
)

// Enum value maps for PaymentScheme.
var (
	PaymentScheme_name = map[int32]string{
		0:   "PAYMENT_SCHEME_UNKNOWN",
		1:   "PAYMENT_SCHEME_CARD_VISA",
		2:   "PAYMENT_SCHEME_CARD_MASTERCARD",
		3:   "PAYMENT_SCHEME_CARD_AMEX",
		4:   "PAYMENT_SCHEME_CARD_DINERS",
		5:   "PAYMENT_SCHEME_CARD_DISCOVER",
		6:   "PAYMENT_SCHEME_CARD_JCB",
		7:   "PAYMENT_SCHEME_CARD_UNION_PAY",
		8:   "PAYMENT_SCHEME_CARD_ALIPAY",
		9:   "PAYMENT_SCHEME_CARD_CUP",
		10:  "PAYMENT_SCHEME_SEPA_DEBIT",
		11:  "PAYMENT_SCHEME_SEPA_CREDIT",
		12:  "PAYMENT_SCHEME_SEPA",
		13:  "PAYMENT_SCHEME_GOOGLE_PAY",
		14:  "PAYMENT_SCHEME_APPLE_PAY",
		15:  "PAYMENT_SCHEME_DOKU",
		16:  "PAYMENT_SCHEME_DRAGON_PAY",
		17:  "PAYMENT_SCHEME_MAESTRO",
		18:  "PAYMENT_SCHEME_MOL_PAY",
		19:  "PAYMENT_SCHEME_A2A",
		20:  "PAYMENT_SCHEME_ACH_DEBIT",
		21:  "PAYMENT_SCHEME_ACH",
		22:  "PAYMENT_SCHEME_RTP",
		100: "PAYMENT_SCHEME_OTHER",
	}
	PaymentScheme_value = map[string]int32{
		"PAYMENT_SCHEME_UNKNOWN":         0,
		"PAYMENT_SCHEME_CARD_VISA":       1,
		"PAYMENT_SCHEME_CARD_MASTERCARD": 2,
		"PAYMENT_SCHEME_CARD_AMEX":       3,
		"PAYMENT_SCHEME_CARD_DINERS":     4,
		"PAYMENT_SCHEME_CARD_DISCOVER":   5,
		"PAYMENT_SCHEME_CARD_JCB":        6,
		"PAYMENT_SCHEME_CARD_UNION_PAY":  7,
		"PAYMENT_SCHEME_CARD_ALIPAY":     8,
		"PAYMENT_SCHEME_CARD_CUP":        9,
		"PAYMENT_SCHEME_SEPA_DEBIT":      10,
		"PAYMENT_SCHEME_SEPA_CREDIT":     11,
		"PAYMENT_SCHEME_SEPA":            12,
		"PAYMENT_SCHEME_GOOGLE_PAY":      13,
		"PAYMENT_SCHEME_APPLE_PAY":       14,
		"PAYMENT_SCHEME_DOKU":            15,
		"PAYMENT_SCHEME_DRAGON_PAY":      16,
		"PAYMENT_SCHEME_MAESTRO":         17,
		"PAYMENT_SCHEME_MOL_PAY":         18,
		"PAYMENT_SCHEME_A2A":             19,
		"PAYMENT_SCHEME_ACH_DEBIT":       20,
		"PAYMENT_SCHEME_ACH":             21,
		"PAYMENT_SCHEME_RTP":             22,
		"PAYMENT_SCHEME_OTHER":           100,
	}
)

func (x PaymentScheme) Enum() *PaymentScheme {
	p := new(PaymentScheme)
	*p = x
	return p
}

func (x PaymentScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_proto_enumTypes[1].Descriptor()
}

func (PaymentScheme) Type() protoreflect.EnumType {
	return &file_payment_proto_enumTypes[1]
}

func (x PaymentScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentScheme.Descriptor instead.
func (PaymentScheme) EnumDescriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{1}
}

type PaymentStatus int32

const (
	PaymentStatus_PAYMENT_STATUS_UNKNOWN          PaymentStatus = 0
	PaymentStatus_PAYMENT_STATUS_PENDING          PaymentStatus = 1
	PaymentStatus_PAYMENT_STATUS_SUCCEEDED        PaymentStatus = 2
	PaymentStatus_PAYMENT_STATUS_CANCELLED        PaymentStatus = 3
	PaymentStatus_PAYMENT_STATUS_FAILED           PaymentStatus = 4
	PaymentStatus_PAYMENT_STATUS_EXPIRED          PaymentStatus = 5
	PaymentStatus_PAYMENT_STATUS_REFUNDED         PaymentStatus = 6
	PaymentStatus_PAYMENT_STATUS_REFUNDED_FAILURE PaymentStatus = 7
	PaymentStatus_PAYMENT_STATUS_DISPUTE          PaymentStatus = 8
	PaymentStatus_PAYMENT_STATUS_DISPUTE_WON      PaymentStatus = 9
	PaymentStatus_PAYMENT_STATUS_DISPUTE_LOST     PaymentStatus = 10
	PaymentStatus_PAYMENT_STATUS_OTHER            PaymentStatus = 100
)

// Enum value maps for PaymentStatus.
var (
	PaymentStatus_name = map[int32]string{
		0:   "PAYMENT_STATUS_UNKNOWN",
		1:   "PAYMENT_STATUS_PENDING",
		2:   "PAYMENT_STATUS_SUCCEEDED",
		3:   "PAYMENT_STATUS_CANCELLED",
		4:   "PAYMENT_STATUS_FAILED",
		5:   "PAYMENT_STATUS_EXPIRED",
		6:   "PAYMENT_STATUS_REFUNDED",
		7:   "PAYMENT_STATUS_REFUNDED_FAILURE",
		8:   "PAYMENT_STATUS_DISPUTE",
		9:   "PAYMENT_STATUS_DISPUTE_WON",
		10:  "PAYMENT_STATUS_DISPUTE_LOST",
		100: "PAYMENT_STATUS_OTHER",
	}
	PaymentStatus_value = map[string]int32{
		"PAYMENT_STATUS_UNKNOWN":          0,
		"PAYMENT_STATUS_PENDING":          1,
		"PAYMENT_STATUS_SUCCEEDED":        2,
		"PAYMENT_STATUS_CANCELLED":        3,
		"PAYMENT_STATUS_FAILED":           4,
		"PAYMENT_STATUS_EXPIRED":          5,
		"PAYMENT_STATUS_REFUNDED":         6,
		"PAYMENT_STATUS_REFUNDED_FAILURE": 7,
		"PAYMENT_STATUS_DISPUTE":          8,
		"PAYMENT_STATUS_DISPUTE_WON":      9,
		"PAYMENT_STATUS_DISPUTE_LOST":     10,
		"PAYMENT_STATUS_OTHER":            100,
	}
)

func (x PaymentStatus) Enum() *PaymentStatus {
	p := new(PaymentStatus)
	*p = x
	return p
}

func (x PaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_proto_enumTypes[2].Descriptor()
}

func (PaymentStatus) Type() protoreflect.EnumType {
	return &file_payment_proto_enumTypes[2]
}

func (x PaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentStatus.Descriptor instead.
func (PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{2}
}

// Represent a payment/transaction in Formance platform
type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PSP reference of the payment
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// Payment's creation date
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	SyncedAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=synced_at,json=syncedAt,proto3" json:"synced_at,omitempty"`
	// Payment Type, can be payin, payout, transfer or other
	PaymentType PaymentType `protobuf:"varint,5,opt,name=payment_type,json=paymentType,proto3,enum=formance.payments.connectors.grpc.proto.PaymentType" json:"payment_type,omitempty"`
	// amount
	Amount *Monetary `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// Payment scheme, for example when you pay via visa card etc...
	Scheme PaymentScheme `protobuf:"varint,7,opt,name=scheme,proto3,enum=formance.payments.connectors.grpc.proto.PaymentScheme" json:"scheme,omitempty"`
	// Payment status, for example pending, succeeded, failed etc...
	Status PaymentStatus `protobuf:"varint,8,opt,name=status,proto3,enum=formance.payments.connectors.grpc.proto.PaymentStatus" json:"status,omitempty"`
	// Nullable string, we can have or not a source account id depending
	// on the payment type
	SourceAccountReference *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=source_account_reference,json=sourceAccountReference,proto3" json:"source_account_reference,omitempty"`
	// Nullable string, we can have or not a destination account id depending
	// on the payment type
	DestinationAccountReference *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=destination_account_reference,json=destinationAccountReference,proto3" json:"destination_account_reference,omitempty"`
	// Additional metadata
	Metadata map[string]string `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The PSP raw message
	Raw []byte `protobuf:"bytes,12,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_payment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{0}
}

func (x *Payment) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Payment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Payment) GetSyncedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncedAt
	}
	return nil
}

func (x *Payment) GetPaymentType() PaymentType {
	if x != nil {
		return x.PaymentType
	}
	return PaymentType_PAYMENT_TYPE_UNKNOWN
}

func (x *Payment) GetAmount() *Monetary {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Payment) GetScheme() PaymentScheme {
	if x != nil {
		return x.Scheme
	}
	return PaymentScheme_PAYMENT_SCHEME_UNKNOWN
}

func (x *Payment) GetStatus() PaymentStatus {
	if x != nil {
		return x.Status
	}
	return PaymentStatus_PAYMENT_STATUS_UNKNOWN
}

func (x *Payment) GetSourceAccountReference() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceAccountReference
	}
	return nil
}

func (x *Payment) GetDestinationAccountReference() *wrapperspb.StringValue {
	if x != nil {
		return x.DestinationAccountReference
	}
	return nil
}

func (x *Payment) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Payment) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

var File_payment_proto protoreflect.FileDescriptor

var file_payment_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x27, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6d, 0x6f, 0x6e, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x06, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37,
	0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x12, 0x57, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x49, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x18, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x1d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x72, 0x61, 0x77, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x2a, 0x8b, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x64, 0x2a, 0xcf,
	0x05, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x56, 0x49, 0x53, 0x41, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x4d, 0x45, 0x58, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x44, 0x49, 0x4e, 0x45, 0x52, 0x53, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4a, 0x43, 0x42, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x07, 0x12, 0x1e,
	0x0a, 0x1a, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x4c, 0x49, 0x50, 0x41, 0x59, 0x10, 0x08, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x55, 0x50, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x53, 0x45,
	0x50, 0x41, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x50,
	0x41, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x50,
	0x41, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59,
	0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x0e,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x44, 0x4f, 0x4b, 0x55, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x45, 0x53, 0x54,
	0x52, 0x4f, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x4c, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x12,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x41, 0x32, 0x41, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x48, 0x5f, 0x44,
	0x45, 0x42, 0x49, 0x54, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x48, 0x10, 0x15, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x52, 0x54, 0x50, 0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x64,
	0x2a, 0xf3, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46,
	0x55, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x07, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x64, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x68, 0x71, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payment_proto_rawDescOnce sync.Once
	file_payment_proto_rawDescData = file_payment_proto_rawDesc
)

func file_payment_proto_rawDescGZIP() []byte {
	file_payment_proto_rawDescOnce.Do(func() {
		file_payment_proto_rawDescData = protoimpl.X.CompressGZIP(file_payment_proto_rawDescData)
	})
	return file_payment_proto_rawDescData
}

var file_payment_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_payment_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_payment_proto_goTypes = []interface{}{
	(PaymentType)(0),               // 0: formance.payments.connectors.grpc.proto.PaymentType
	(PaymentScheme)(0),             // 1: formance.payments.connectors.grpc.proto.PaymentScheme
	(PaymentStatus)(0),             // 2: formance.payments.connectors.grpc.proto.PaymentStatus
	(*Payment)(nil),                // 3: formance.payments.connectors.grpc.proto.Payment
	nil,                            // 4: formance.payments.connectors.grpc.proto.Payment.MetadataEntry
	(*timestamppb.Timestamp)(nil),  // 5: google.protobuf.Timestamp
	(*Monetary)(nil),               // 6: formance.payments.connectors.grpc.proto.Monetary
	(*wrapperspb.StringValue)(nil), // 7: google.protobuf.StringValue
}
var file_payment_proto_depIdxs = []int32{
	5, // 0: formance.payments.connectors.grpc.proto.Payment.created_at:type_name -> google.protobuf.Timestamp
	5, // 1: formance.payments.connectors.grpc.proto.Payment.synced_at:type_name -> google.protobuf.Timestamp
	0, // 2: formance.payments.connectors.grpc.proto.Payment.payment_type:type_name -> formance.payments.connectors.grpc.proto.PaymentType
	6, // 3: formance.payments.connectors.grpc.proto.Payment.amount:type_name -> formance.payments.connectors.grpc.proto.Monetary
	1, // 4: formance.payments.connectors.grpc.proto.Payment.scheme:type_name -> formance.payments.connectors.grpc.proto.PaymentScheme
	2, // 5: formance.payments.connectors.grpc.proto.Payment.status:type_name -> formance.payments.connectors.grpc.proto.PaymentStatus
	7, // 6: formance.payments.connectors.grpc.proto.Payment.source_account_reference:type_name -> google.protobuf.StringValue
	7, // 7: formance.payments.connectors.grpc.proto.Payment.destination_account_reference:type_name -> google.protobuf.StringValue
	4, // 8: formance.payments.connectors.grpc.proto.Payment.metadata:type_name -> formance.payments.connectors.grpc.proto.Payment.MetadataEntry
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_payment_proto_init() }
func file_payment_proto_init() {
	if File_payment_proto != nil {
		return
	}
	file_monetary_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_payment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payment_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payment_proto_goTypes,
		DependencyIndexes: file_payment_proto_depIdxs,
		EnumInfos:         file_payment_proto_enumTypes,
		MessageInfos:      file_payment_proto_msgTypes,
	}.Build()
	File_payment_proto = out.File
	file_payment_proto_rawDesc = nil
	file_payment_proto_goTypes = nil
	file_payment_proto_depIdxs = nil
}
