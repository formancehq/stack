/*
GENERIC connector API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genericclient

import (
	"encoding/json"
	"time"
)

// checks if the Beneficiary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Beneficiary{}

// Beneficiary struct for Beneficiary
type Beneficiary struct {
	Id string `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	OwnerName string `json:"ownerName"`
	Metadata map[string]string `json:"metadata,omitempty"`
}

// NewBeneficiary instantiates a new Beneficiary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeneficiary(id string, createdAt time.Time, ownerName string) *Beneficiary {
	this := Beneficiary{}
	this.Id = id
	this.CreatedAt = createdAt
	this.OwnerName = ownerName
	return &this
}

// NewBeneficiaryWithDefaults instantiates a new Beneficiary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeneficiaryWithDefaults() *Beneficiary {
	this := Beneficiary{}
	return &this
}

// GetId returns the Id field value
func (o *Beneficiary) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Beneficiary) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Beneficiary) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Beneficiary) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Beneficiary) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Beneficiary) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetOwnerName returns the OwnerName field value
func (o *Beneficiary) GetOwnerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value
// and a boolean to check if the value has been set.
func (o *Beneficiary) GetOwnerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerName, true
}

// SetOwnerName sets field value
func (o *Beneficiary) SetOwnerName(v string) {
	o.OwnerName = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Beneficiary) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Beneficiary) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Beneficiary) HasMetadata() bool {
	if o != nil && IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Beneficiary) SetMetadata(v map[string]string) {
	o.Metadata = v
}

func (o Beneficiary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Beneficiary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["ownerName"] = o.OwnerName
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableBeneficiary struct {
	value *Beneficiary
	isSet bool
}

func (v NullableBeneficiary) Get() *Beneficiary {
	return v.value
}

func (v *NullableBeneficiary) Set(val *Beneficiary) {
	v.value = val
	v.isSet = true
}

func (v NullableBeneficiary) IsSet() bool {
	return v.isSet
}

func (v *NullableBeneficiary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeneficiary(val *Beneficiary) *NullableBeneficiary {
	return &NullableBeneficiary{value: val, isSet: true}
}

func (v NullableBeneficiary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeneficiary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


