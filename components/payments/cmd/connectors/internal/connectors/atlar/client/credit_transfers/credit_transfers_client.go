// Code generated by go-swagger; DO NOT EDIT.

package credit_transfers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new credit transfers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for credit transfers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1CreditTransfersIDApprovals(params *DeleteV1CreditTransfersIDApprovalsParams, opts ...ClientOption) (*DeleteV1CreditTransfersIDApprovalsOK, error)

	GetV1CreditTransfers(params *GetV1CreditTransfersParams, opts ...ClientOption) (*GetV1CreditTransfersOK, error)

	GetV1CreditTransfersGetByExternalIDExternalID(params *GetV1CreditTransfersGetByExternalIDExternalIDParams, opts ...ClientOption) (*GetV1CreditTransfersGetByExternalIDExternalIDOK, error)

	GetV1CreditTransfersID(params *GetV1CreditTransfersIDParams, opts ...ClientOption) (*GetV1CreditTransfersIDOK, error)

	GetV1CreditTransfersIDEvents(params *GetV1CreditTransfersIDEventsParams, opts ...ClientOption) (*GetV1CreditTransfersIDEventsOK, error)

	PostV1CreditTransfers(params *PostV1CreditTransfersParams, opts ...ClientOption) (*PostV1CreditTransfersCreated, error)

	PutV1CreditTransfersIDApprovalsApprovalStepID(params *PutV1CreditTransfersIDApprovalsApprovalStepIDParams, opts ...ClientOption) (*PutV1CreditTransfersIDApprovalsApprovalStepIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1CreditTransfersIDApprovals rejects credit transfer

Reject the identified CreditTransfer. One can use this endpoint with or without having a prior created Approval.
*/
func (a *Client) DeleteV1CreditTransfersIDApprovals(params *DeleteV1CreditTransfersIDApprovalsParams, opts ...ClientOption) (*DeleteV1CreditTransfersIDApprovalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1CreditTransfersIDApprovalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1CreditTransfersIDApprovals",
		Method:             "DELETE",
		PathPattern:        "/v1/credit-transfers/{id}/approvals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1CreditTransfersIDApprovalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1CreditTransfersIDApprovalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1CreditTransfersIDApprovals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetV1CreditTransfers queries credit transfers

	Returns a list of CreditTransfers. For further details on Pagination, see general section above.

Sort order is always descending on date
*/
func (a *Client) GetV1CreditTransfers(params *GetV1CreditTransfersParams, opts ...ClientOption) (*GetV1CreditTransfersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CreditTransfersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1CreditTransfers",
		Method:             "GET",
		PathPattern:        "/v1/credit-transfers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CreditTransfersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CreditTransfersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1CreditTransfers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CreditTransfersGetByExternalIDExternalID reads credit transfer by its external Id

Returns the identified credit transfer.
*/
func (a *Client) GetV1CreditTransfersGetByExternalIDExternalID(params *GetV1CreditTransfersGetByExternalIDExternalIDParams, opts ...ClientOption) (*GetV1CreditTransfersGetByExternalIDExternalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CreditTransfersGetByExternalIDExternalIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1CreditTransfersGetByExternalIDExternalID",
		Method:             "GET",
		PathPattern:        "/v1/credit-transfers:getByExternalId/{externalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CreditTransfersGetByExternalIDExternalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CreditTransfersGetByExternalIDExternalIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1CreditTransfersGetByExternalIDExternalID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CreditTransfersID reads credit transfer

Returns the identified CreditTransfer
*/
func (a *Client) GetV1CreditTransfersID(params *GetV1CreditTransfersIDParams, opts ...ClientOption) (*GetV1CreditTransfersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CreditTransfersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1CreditTransfersID",
		Method:             "GET",
		PathPattern:        "/v1/credit-transfers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CreditTransfersIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CreditTransfersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1CreditTransfersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CreditTransfersIDEvents queries credit transfer events

Returns a list of CreditTransfer events. For further details on Pagination, see the section above.
*/
func (a *Client) GetV1CreditTransfersIDEvents(params *GetV1CreditTransfersIDEventsParams, opts ...ClientOption) (*GetV1CreditTransfersIDEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CreditTransfersIDEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1CreditTransfersIDEvents",
		Method:             "GET",
		PathPattern:        "/v1/credit-transfers/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CreditTransfersIDEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CreditTransfersIDEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1CreditTransfersIDEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1CreditTransfers creates credit transfer

Returns the identified CreditTransfer
*/
func (a *Client) PostV1CreditTransfers(params *PostV1CreditTransfersParams, opts ...ClientOption) (*PostV1CreditTransfersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1CreditTransfersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1CreditTransfers",
		Method:             "POST",
		PathPattern:        "/v1/credit-transfers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1CreditTransfersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1CreditTransfersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1CreditTransfers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutV1CreditTransfersIDApprovalsApprovalStepID approves credit transfer

Approve the identified CreditTransfer
*/
func (a *Client) PutV1CreditTransfersIDApprovalsApprovalStepID(params *PutV1CreditTransfersIDApprovalsApprovalStepIDParams, opts ...ClientOption) (*PutV1CreditTransfersIDApprovalsApprovalStepIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1CreditTransfersIDApprovalsApprovalStepIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutV1CreditTransfersIDApprovalsApprovalStepID",
		Method:             "PUT",
		PathPattern:        "/v1/credit-transfers/{id}/approvals/{approvalStepId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1CreditTransfersIDApprovalsApprovalStepIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1CreditTransfersIDApprovalsApprovalStepIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutV1CreditTransfersIDApprovalsApprovalStepID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
