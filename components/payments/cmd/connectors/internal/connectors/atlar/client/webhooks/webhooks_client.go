// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new webhooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1WebhooksID(params *DeleteV1WebhooksIDParams, opts ...ClientOption) (*DeleteV1WebhooksIDNoContent, error)

	DeleteV1WebhooksIDKeysKeyID(params *DeleteV1WebhooksIDKeysKeyIDParams, opts ...ClientOption) (*DeleteV1WebhooksIDKeysKeyIDNoContent, error)

	GetV1Webhooks(params *GetV1WebhooksParams, opts ...ClientOption) (*GetV1WebhooksOK, error)

	GetV1WebhooksID(params *GetV1WebhooksIDParams, opts ...ClientOption) (*GetV1WebhooksIDOK, error)

	PostV1Webhooks(params *PostV1WebhooksParams, opts ...ClientOption) (*PostV1WebhooksCreated, error)

	PostV1WebhooksIDKeys(params *PostV1WebhooksIDKeysParams, opts ...ClientOption) (*PostV1WebhooksIDKeysCreated, error)

	PostYourChosenPath(params *PostYourChosenPathParams, opts ...ClientOption) (*PostYourChosenPathOK, error)

	PutV1WebhooksID(params *PutV1WebhooksIDParams, opts ...ClientOption) (*PutV1WebhooksIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1WebhooksID deletes webhook

Deletes the identified webhook.
*/
func (a *Client) DeleteV1WebhooksID(params *DeleteV1WebhooksIDParams, opts ...ClientOption) (*DeleteV1WebhooksIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1WebhooksIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1WebhooksID",
		Method:             "DELETE",
		PathPattern:        "/v1/webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1WebhooksIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1WebhooksIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1WebhooksID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1WebhooksIDKeysKeyID deletes webhook key

Deletes the identified webhook key.
*/
func (a *Client) DeleteV1WebhooksIDKeysKeyID(params *DeleteV1WebhooksIDKeysKeyIDParams, opts ...ClientOption) (*DeleteV1WebhooksIDKeysKeyIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1WebhooksIDKeysKeyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1WebhooksIDKeysKeyID",
		Method:             "DELETE",
		PathPattern:        "/v1/webhooks/{id}/keys/{keyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1WebhooksIDKeysKeyIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1WebhooksIDKeysKeyIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1WebhooksIDKeysKeyID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Webhooks queries webhooks

Returns a list of webhook configurations. For further details on pagination, see the section above.
*/
func (a *Client) GetV1Webhooks(params *GetV1WebhooksParams, opts ...ClientOption) (*GetV1WebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WebhooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Webhooks",
		Method:             "GET",
		PathPattern:        "/v1/webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WebhooksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WebhooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Webhooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1WebhooksID reads webhook

Returns the identified webhook configuration.
*/
func (a *Client) GetV1WebhooksID(params *GetV1WebhooksIDParams, opts ...ClientOption) (*GetV1WebhooksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WebhooksIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1WebhooksID",
		Method:             "GET",
		PathPattern:        "/v1/webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WebhooksIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WebhooksIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1WebhooksID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Webhooks creates webhook

Creates a new webhook configuration. You will receive your webhook key in the response, which is unique per endpoint. Note that `keys` are only populated after creation and can therefore only be seen once. Make sure to store your key in a safe place. Read more about webhook security in the [Webhooks and events](doc:api#webhooks-and-events) section.
*/
func (a *Client) PostV1Webhooks(params *PostV1WebhooksParams, opts ...ClientOption) (*PostV1WebhooksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1WebhooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Webhooks",
		Method:             "POST",
		PathPattern:        "/v1/webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1WebhooksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1WebhooksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Webhooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1WebhooksIDKeys creates webhook signing key

Generates a new webhook signing key. You can have between one and two keys at a time, to allow for key rotation. Note that keys can only be seen once - in the response from this endpoint. Read more about how to secure your webhooks in the [Webhooks and events](doc:api#webhooks-and-events) section.
*/
func (a *Client) PostV1WebhooksIDKeys(params *PostV1WebhooksIDKeysParams, opts ...ClientOption) (*PostV1WebhooksIDKeysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1WebhooksIDKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1WebhooksIDKeys",
		Method:             "POST",
		PathPattern:        "/v1/webhooks/{id}/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1WebhooksIDKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1WebhooksIDKeysCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1WebhooksIDKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostYourChosenPath webhooks requests towards your server

The actual webhook events sent to your server from the Atlar platform, should you have configured webhooks. The path and domain is configured via the [Create webhook](ref:post_v1-webhooks) endpoint.
*/
func (a *Client) PostYourChosenPath(params *PostYourChosenPathParams, opts ...ClientOption) (*PostYourChosenPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostYourChosenPathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostYourChosenPath",
		Method:             "POST",
		PathPattern:        "/your/chosen/path",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostYourChosenPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostYourChosenPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostYourChosenPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutV1WebhooksID updates webhook

Updates the identified webhook. This is a PUT, which means that you must supply the full Webhook object when updating. If a field that is set on the existing object is omitted in the request, it will be removed. Note that modifying the `url` of a webhook will set `verified` to false. Note that a change to `filter` may take up to 5 minutes until it is in full effect.
*/
func (a *Client) PutV1WebhooksID(params *PutV1WebhooksIDParams, opts ...ClientOption) (*PutV1WebhooksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1WebhooksIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutV1WebhooksID",
		Method:             "PUT",
		PathPattern:        "/v1/webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1WebhooksIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1WebhooksIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutV1WebhooksID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
