// Code generated by go-swagger; DO NOT EDIT.

package mandates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mandates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mandates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1Mandates(params *GetV1MandatesParams, opts ...ClientOption) (*GetV1MandatesOK, error)

	GetV1MandatesGetByExternalIDExternalID(params *GetV1MandatesGetByExternalIDExternalIDParams, opts ...ClientOption) (*GetV1MandatesGetByExternalIDExternalIDOK, error)

	GetV1MandatesID(params *GetV1MandatesIDParams, opts ...ClientOption) (*GetV1MandatesIDOK, error)

	GetV1MandatesIDEvents(params *GetV1MandatesIDEventsParams, opts ...ClientOption) (*GetV1MandatesIDEventsOK, error)

	PostV1Mandates(params *PostV1MandatesParams, opts ...ClientOption) (*PostV1MandatesCreated, error)

	PostV1MandatesIDCancel(params *PostV1MandatesIDCancelParams, opts ...ClientOption) (*PostV1MandatesIDCancelAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetV1Mandates queries mandates

Returns a list of Mandates. For further details on Pagination, see the section above.
*/
func (a *Client) GetV1Mandates(params *GetV1MandatesParams, opts ...ClientOption) (*GetV1MandatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1MandatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Mandates",
		Method:             "GET",
		PathPattern:        "/v1/mandates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1MandatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1MandatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Mandates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1MandatesGetByExternalIDExternalID reads mandate by its external Id

Returns the identified Mandate.
*/
func (a *Client) GetV1MandatesGetByExternalIDExternalID(params *GetV1MandatesGetByExternalIDExternalIDParams, opts ...ClientOption) (*GetV1MandatesGetByExternalIDExternalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1MandatesGetByExternalIDExternalIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1MandatesGetByExternalIDExternalID",
		Method:             "GET",
		PathPattern:        "/v1/mandates:getByExternalId/{externalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1MandatesGetByExternalIDExternalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1MandatesGetByExternalIDExternalIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1MandatesGetByExternalIDExternalID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1MandatesID reads mandate

Returns the identified Mandate.
*/
func (a *Client) GetV1MandatesID(params *GetV1MandatesIDParams, opts ...ClientOption) (*GetV1MandatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1MandatesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1MandatesID",
		Method:             "GET",
		PathPattern:        "/v1/mandates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1MandatesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1MandatesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1MandatesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1MandatesIDEvents queries mandate events

Returns a list of Mandate events. For further details on Pagination, see the section above.
*/
func (a *Client) GetV1MandatesIDEvents(params *GetV1MandatesIDEventsParams, opts ...ClientOption) (*GetV1MandatesIDEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1MandatesIDEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1MandatesIDEvents",
		Method:             "GET",
		PathPattern:        "/v1/mandates/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1MandatesIDEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1MandatesIDEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1MandatesIDEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Mandates creates mandate

Returns the created Mandate.
*/
func (a *Client) PostV1Mandates(params *PostV1MandatesParams, opts ...ClientOption) (*PostV1MandatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1MandatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Mandates",
		Method:             "POST",
		PathPattern:        "/v1/mandates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1MandatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1MandatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Mandates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1MandatesIDCancel cancels mandate

Returns the mandate to be cancelled.
*/
func (a *Client) PostV1MandatesIDCancel(params *PostV1MandatesIDCancelParams, opts ...ClientOption) (*PostV1MandatesIDCancelAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1MandatesIDCancelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1MandatesIDCancel",
		Method:             "POST",
		PathPattern:        "/v1/mandates/{id}:cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1MandatesIDCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1MandatesIDCancelAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1MandatesIDCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
