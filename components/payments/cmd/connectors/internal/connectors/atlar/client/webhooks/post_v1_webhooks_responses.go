// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/formancehq/payments/cmd/connectors/internal/connectors/atlar/models"
)

// PostV1WebhooksReader is a Reader for the PostV1Webhooks structure.
type PostV1WebhooksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1WebhooksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostV1WebhooksCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[POST /v1/webhooks] PostV1Webhooks", response, response.Code())
	}
}

// NewPostV1WebhooksCreated creates a PostV1WebhooksCreated with default headers values
func NewPostV1WebhooksCreated() *PostV1WebhooksCreated {
	return &PostV1WebhooksCreated{}
}

/*
PostV1WebhooksCreated describes a response with status code 201, with default header values.

The created webhook
*/
type PostV1WebhooksCreated struct {
	Payload *PostV1WebhooksCreatedBody
}

// IsSuccess returns true when this post v1 webhooks created response has a 2xx status code
func (o *PostV1WebhooksCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 webhooks created response has a 3xx status code
func (o *PostV1WebhooksCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 webhooks created response has a 4xx status code
func (o *PostV1WebhooksCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 webhooks created response has a 5xx status code
func (o *PostV1WebhooksCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 webhooks created response a status code equal to that given
func (o *PostV1WebhooksCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post v1 webhooks created response
func (o *PostV1WebhooksCreated) Code() int {
	return 201
}

func (o *PostV1WebhooksCreated) Error() string {
	return fmt.Sprintf("[POST /v1/webhooks][%d] postV1WebhooksCreated  %+v", 201, o.Payload)
}

func (o *PostV1WebhooksCreated) String() string {
	return fmt.Sprintf("[POST /v1/webhooks][%d] postV1WebhooksCreated  %+v", 201, o.Payload)
}

func (o *PostV1WebhooksCreated) GetPayload() *PostV1WebhooksCreatedBody {
	return o.Payload
}

func (o *PostV1WebhooksCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV1WebhooksCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostV1WebhooksCreatedBody post v1 webhooks created body
swagger:model PostV1WebhooksCreatedBody
*/
type PostV1WebhooksCreatedBody struct {
	models.Webhook

	// keys
	Keys []*models.WebhookSigningKey `json:"keys"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV1WebhooksCreatedBody) UnmarshalJSON(raw []byte) error {
	// PostV1WebhooksCreatedBodyAO0
	var postV1WebhooksCreatedBodyAO0 models.Webhook
	if err := swag.ReadJSON(raw, &postV1WebhooksCreatedBodyAO0); err != nil {
		return err
	}
	o.Webhook = postV1WebhooksCreatedBodyAO0

	// PostV1WebhooksCreatedBodyAO1
	var dataPostV1WebhooksCreatedBodyAO1 struct {
		Keys []*models.WebhookSigningKey `json:"keys"`
	}
	if err := swag.ReadJSON(raw, &dataPostV1WebhooksCreatedBodyAO1); err != nil {
		return err
	}

	o.Keys = dataPostV1WebhooksCreatedBodyAO1.Keys

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV1WebhooksCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV1WebhooksCreatedBodyAO0, err := swag.WriteJSON(o.Webhook)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV1WebhooksCreatedBodyAO0)
	var dataPostV1WebhooksCreatedBodyAO1 struct {
		Keys []*models.WebhookSigningKey `json:"keys"`
	}

	dataPostV1WebhooksCreatedBodyAO1.Keys = o.Keys

	jsonDataPostV1WebhooksCreatedBodyAO1, errPostV1WebhooksCreatedBodyAO1 := swag.WriteJSON(dataPostV1WebhooksCreatedBodyAO1)
	if errPostV1WebhooksCreatedBodyAO1 != nil {
		return nil, errPostV1WebhooksCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataPostV1WebhooksCreatedBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v1 webhooks created body
func (o *PostV1WebhooksCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Webhook
	if err := o.Webhook.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1WebhooksCreatedBody) validateKeys(formats strfmt.Registry) error {

	if swag.IsZero(o.Keys) { // not required
		return nil
	}

	for i := 0; i < len(o.Keys); i++ {
		if swag.IsZero(o.Keys[i]) { // not required
			continue
		}

		if o.Keys[i] != nil {
			if err := o.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postV1WebhooksCreated" + "." + "keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postV1WebhooksCreated" + "." + "keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post v1 webhooks created body based on the context it is used
func (o *PostV1WebhooksCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Webhook
	if err := o.Webhook.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1WebhooksCreatedBody) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Keys); i++ {

		if o.Keys[i] != nil {

			if swag.IsZero(o.Keys[i]) { // not required
				return nil
			}

			if err := o.Keys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postV1WebhooksCreated" + "." + "keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postV1WebhooksCreated" + "." + "keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV1WebhooksCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1WebhooksCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostV1WebhooksCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
