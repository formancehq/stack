// Code generated by go-swagger; DO NOT EDIT.

package external_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetV1ExternalAccountsParams creates a new GetV1ExternalAccountsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1ExternalAccountsParams() *GetV1ExternalAccountsParams {
	return &GetV1ExternalAccountsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1ExternalAccountsParamsWithTimeout creates a new GetV1ExternalAccountsParams object
// with the ability to set a timeout on a request.
func NewGetV1ExternalAccountsParamsWithTimeout(timeout time.Duration) *GetV1ExternalAccountsParams {
	return &GetV1ExternalAccountsParams{
		timeout: timeout,
	}
}

// NewGetV1ExternalAccountsParamsWithContext creates a new GetV1ExternalAccountsParams object
// with the ability to set a context for a request.
func NewGetV1ExternalAccountsParamsWithContext(ctx context.Context) *GetV1ExternalAccountsParams {
	return &GetV1ExternalAccountsParams{
		Context: ctx,
	}
}

// NewGetV1ExternalAccountsParamsWithHTTPClient creates a new GetV1ExternalAccountsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1ExternalAccountsParamsWithHTTPClient(client *http.Client) *GetV1ExternalAccountsParams {
	return &GetV1ExternalAccountsParams{
		HTTPClient: client,
	}
}

/*
GetV1ExternalAccountsParams contains all the parameters to send to the API endpoint

	for the get v1 external accounts operation.

	Typically these are written to a http.Request.
*/
type GetV1ExternalAccountsParams struct {

	/* CounterpartyID.

	   The ID of a counterparty.
	*/
	CounterpartyID *int64

	/* Limit.

	   Limit resulting response list. Value must be between 1 and 500 (higher values will be coerced down to 500). Defaults to 100.
	*/
	Limit *int64

	/* Query.

	   Free text search of external account identifiers. Must be at least 3 characters.
	*/
	Query *int64

	/* Token.

	   If response comes back and `nextToken` is populated, use that value in this `token` query to continue pagination.
	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 external accounts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1ExternalAccountsParams) WithDefaults() *GetV1ExternalAccountsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 external accounts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1ExternalAccountsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) WithTimeout(timeout time.Duration) *GetV1ExternalAccountsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) WithContext(ctx context.Context) *GetV1ExternalAccountsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) WithHTTPClient(client *http.Client) *GetV1ExternalAccountsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCounterpartyID adds the counterpartyID to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) WithCounterpartyID(counterpartyID *int64) *GetV1ExternalAccountsParams {
	o.SetCounterpartyID(counterpartyID)
	return o
}

// SetCounterpartyID adds the counterpartyId to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) SetCounterpartyID(counterpartyID *int64) {
	o.CounterpartyID = counterpartyID
}

// WithLimit adds the limit to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) WithLimit(limit *int64) *GetV1ExternalAccountsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithQuery adds the query to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) WithQuery(query *int64) *GetV1ExternalAccountsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) SetQuery(query *int64) {
	o.Query = query
}

// WithToken adds the token to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) WithToken(token *string) *GetV1ExternalAccountsParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get v1 external accounts params
func (o *GetV1ExternalAccountsParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1ExternalAccountsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CounterpartyID != nil {

		// query param counterpartyId
		var qrCounterpartyID int64

		if o.CounterpartyID != nil {
			qrCounterpartyID = *o.CounterpartyID
		}
		qCounterpartyID := swag.FormatInt64(qrCounterpartyID)
		if qCounterpartyID != "" {

			if err := r.SetQueryParam("counterpartyId", qCounterpartyID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery int64

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := swag.FormatInt64(qrQuery)
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
