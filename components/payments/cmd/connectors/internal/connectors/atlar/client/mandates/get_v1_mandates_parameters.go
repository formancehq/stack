// Code generated by go-swagger; DO NOT EDIT.

package mandates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetV1MandatesParams creates a new GetV1MandatesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1MandatesParams() *GetV1MandatesParams {
	return &GetV1MandatesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1MandatesParamsWithTimeout creates a new GetV1MandatesParams object
// with the ability to set a timeout on a request.
func NewGetV1MandatesParamsWithTimeout(timeout time.Duration) *GetV1MandatesParams {
	return &GetV1MandatesParams{
		timeout: timeout,
	}
}

// NewGetV1MandatesParamsWithContext creates a new GetV1MandatesParams object
// with the ability to set a context for a request.
func NewGetV1MandatesParamsWithContext(ctx context.Context) *GetV1MandatesParams {
	return &GetV1MandatesParams{
		Context: ctx,
	}
}

// NewGetV1MandatesParamsWithHTTPClient creates a new GetV1MandatesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1MandatesParamsWithHTTPClient(client *http.Client) *GetV1MandatesParams {
	return &GetV1MandatesParams{
		HTTPClient: client,
	}
}

/*
GetV1MandatesParams contains all the parameters to send to the API endpoint

	for the get v1 mandates operation.

	Typically these are written to a http.Request.
*/
type GetV1MandatesParams struct {

	/* CounterpartyID.

	   Filters out mandates for the given counterparty ID.
	*/
	CounterpartyID *string

	/* DirectDebitSchemeType.

	   Filters out mandates of the given scheme type.
	*/
	DirectDebitSchemeType *string

	/* ExternalAccountID.

	   Filters out mandates for the given external account ID.
	*/
	ExternalAccountID *string

	/* Limit.

	   Limit resulting response list.

	   Default: 100
	*/
	Limit *int64

	/* Status.

	   Filters out mandates with the given status.
	*/
	Status *string

	/* Token.

	   If response comes back and `nextToken` is populated, use that value in this `token` query to continue pagination.
	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 mandates params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1MandatesParams) WithDefaults() *GetV1MandatesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 mandates params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1MandatesParams) SetDefaults() {
	var (
		limitDefault = int64(100)
	)

	val := GetV1MandatesParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get v1 mandates params
func (o *GetV1MandatesParams) WithTimeout(timeout time.Duration) *GetV1MandatesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 mandates params
func (o *GetV1MandatesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 mandates params
func (o *GetV1MandatesParams) WithContext(ctx context.Context) *GetV1MandatesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 mandates params
func (o *GetV1MandatesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 mandates params
func (o *GetV1MandatesParams) WithHTTPClient(client *http.Client) *GetV1MandatesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 mandates params
func (o *GetV1MandatesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCounterpartyID adds the counterpartyID to the get v1 mandates params
func (o *GetV1MandatesParams) WithCounterpartyID(counterpartyID *string) *GetV1MandatesParams {
	o.SetCounterpartyID(counterpartyID)
	return o
}

// SetCounterpartyID adds the counterpartyId to the get v1 mandates params
func (o *GetV1MandatesParams) SetCounterpartyID(counterpartyID *string) {
	o.CounterpartyID = counterpartyID
}

// WithDirectDebitSchemeType adds the directDebitSchemeType to the get v1 mandates params
func (o *GetV1MandatesParams) WithDirectDebitSchemeType(directDebitSchemeType *string) *GetV1MandatesParams {
	o.SetDirectDebitSchemeType(directDebitSchemeType)
	return o
}

// SetDirectDebitSchemeType adds the directDebitSchemeType to the get v1 mandates params
func (o *GetV1MandatesParams) SetDirectDebitSchemeType(directDebitSchemeType *string) {
	o.DirectDebitSchemeType = directDebitSchemeType
}

// WithExternalAccountID adds the externalAccountID to the get v1 mandates params
func (o *GetV1MandatesParams) WithExternalAccountID(externalAccountID *string) *GetV1MandatesParams {
	o.SetExternalAccountID(externalAccountID)
	return o
}

// SetExternalAccountID adds the externalAccountId to the get v1 mandates params
func (o *GetV1MandatesParams) SetExternalAccountID(externalAccountID *string) {
	o.ExternalAccountID = externalAccountID
}

// WithLimit adds the limit to the get v1 mandates params
func (o *GetV1MandatesParams) WithLimit(limit *int64) *GetV1MandatesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get v1 mandates params
func (o *GetV1MandatesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithStatus adds the status to the get v1 mandates params
func (o *GetV1MandatesParams) WithStatus(status *string) *GetV1MandatesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get v1 mandates params
func (o *GetV1MandatesParams) SetStatus(status *string) {
	o.Status = status
}

// WithToken adds the token to the get v1 mandates params
func (o *GetV1MandatesParams) WithToken(token *string) *GetV1MandatesParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get v1 mandates params
func (o *GetV1MandatesParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1MandatesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CounterpartyID != nil {

		// query param counterpartyId
		var qrCounterpartyID string

		if o.CounterpartyID != nil {
			qrCounterpartyID = *o.CounterpartyID
		}
		qCounterpartyID := qrCounterpartyID
		if qCounterpartyID != "" {

			if err := r.SetQueryParam("counterpartyId", qCounterpartyID); err != nil {
				return err
			}
		}
	}

	if o.DirectDebitSchemeType != nil {

		// query param directDebitSchemeType
		var qrDirectDebitSchemeType string

		if o.DirectDebitSchemeType != nil {
			qrDirectDebitSchemeType = *o.DirectDebitSchemeType
		}
		qDirectDebitSchemeType := qrDirectDebitSchemeType
		if qDirectDebitSchemeType != "" {

			if err := r.SetQueryParam("directDebitSchemeType", qDirectDebitSchemeType); err != nil {
				return err
			}
		}
	}

	if o.ExternalAccountID != nil {

		// query param externalAccountId
		var qrExternalAccountID string

		if o.ExternalAccountID != nil {
			qrExternalAccountID = *o.ExternalAccountID
		}
		qExternalAccountID := qrExternalAccountID
		if qExternalAccountID != "" {

			if err := r.SetQueryParam("externalAccountId", qExternalAccountID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
