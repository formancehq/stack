// Code generated by go-swagger; DO NOT EDIT.

package external_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new external accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for external accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1ExternalAccountsID(params *DeleteV1ExternalAccountsIDParams, opts ...ClientOption) (*DeleteV1ExternalAccountsIDNoContent, error)

	GetV1ExternalAccounts(params *GetV1ExternalAccountsParams, opts ...ClientOption) (*GetV1ExternalAccountsOK, error)

	GetV1ExternalAccountsGetByExternalIDExternalID(params *GetV1ExternalAccountsGetByExternalIDExternalIDParams, opts ...ClientOption) (*GetV1ExternalAccountsGetByExternalIDExternalIDOK, error)

	GetV1ExternalAccountsID(params *GetV1ExternalAccountsIDParams, opts ...ClientOption) (*GetV1ExternalAccountsIDOK, error)

	PostV1ExternalAccounts(params *PostV1ExternalAccountsParams, opts ...ClientOption) (*PostV1ExternalAccountsCreated, error)

	PutV1ExternalAccountsID(params *PutV1ExternalAccountsIDParams, opts ...ClientOption) (*PutV1ExternalAccountsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1ExternalAccountsID deletes external account

Deletes the identified external account.
*/
func (a *Client) DeleteV1ExternalAccountsID(params *DeleteV1ExternalAccountsIDParams, opts ...ClientOption) (*DeleteV1ExternalAccountsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ExternalAccountsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1ExternalAccountsID",
		Method:             "DELETE",
		PathPattern:        "/v1/external-accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ExternalAccountsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ExternalAccountsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1ExternalAccountsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ExternalAccounts queries external accounts

Returns a list of external accounts. For further details on pagination, see the section above.
*/
func (a *Client) GetV1ExternalAccounts(params *GetV1ExternalAccountsParams, opts ...ClientOption) (*GetV1ExternalAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ExternalAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ExternalAccounts",
		Method:             "GET",
		PathPattern:        "/v1/external-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ExternalAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ExternalAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ExternalAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ExternalAccountsGetByExternalIDExternalID reads external account by its external Id

Returns the identified external account.
*/
func (a *Client) GetV1ExternalAccountsGetByExternalIDExternalID(params *GetV1ExternalAccountsGetByExternalIDExternalIDParams, opts ...ClientOption) (*GetV1ExternalAccountsGetByExternalIDExternalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ExternalAccountsGetByExternalIDExternalIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ExternalAccountsGetByExternalIDExternalID",
		Method:             "GET",
		PathPattern:        "/v1/external-accounts:getByExternalId/{externalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ExternalAccountsGetByExternalIDExternalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ExternalAccountsGetByExternalIDExternalIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ExternalAccountsGetByExternalIDExternalID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ExternalAccountsID reads external account

Returns the identified external account.
*/
func (a *Client) GetV1ExternalAccountsID(params *GetV1ExternalAccountsIDParams, opts ...ClientOption) (*GetV1ExternalAccountsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ExternalAccountsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ExternalAccountsID",
		Method:             "GET",
		PathPattern:        "/v1/external-accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ExternalAccountsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ExternalAccountsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ExternalAccountsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ExternalAccounts creates external account

Create external account. A maximum of 10 accounts can be created per counterparty.
*/
func (a *Client) PostV1ExternalAccounts(params *PostV1ExternalAccountsParams, opts ...ClientOption) (*PostV1ExternalAccountsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ExternalAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ExternalAccounts",
		Method:             "POST",
		PathPattern:        "/v1/external-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ExternalAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ExternalAccountsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ExternalAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutV1ExternalAccountsID updates external account

Updates the identified external account. This is a PUT, which means that you must supply the full ExternalAccount object when updating. If a field that is set on the existing object is omitted in the request, it will be removed.
*/
func (a *Client) PutV1ExternalAccountsID(params *PutV1ExternalAccountsIDParams, opts ...ClientOption) (*PutV1ExternalAccountsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ExternalAccountsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutV1ExternalAccountsID",
		Method:             "PUT",
		PathPattern:        "/v1/external-accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1ExternalAccountsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1ExternalAccountsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutV1ExternalAccountsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
