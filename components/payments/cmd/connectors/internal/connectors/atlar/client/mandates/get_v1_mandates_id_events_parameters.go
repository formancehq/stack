// Code generated by go-swagger; DO NOT EDIT.

package mandates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetV1MandatesIDEventsParams creates a new GetV1MandatesIDEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1MandatesIDEventsParams() *GetV1MandatesIDEventsParams {
	return &GetV1MandatesIDEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1MandatesIDEventsParamsWithTimeout creates a new GetV1MandatesIDEventsParams object
// with the ability to set a timeout on a request.
func NewGetV1MandatesIDEventsParamsWithTimeout(timeout time.Duration) *GetV1MandatesIDEventsParams {
	return &GetV1MandatesIDEventsParams{
		timeout: timeout,
	}
}

// NewGetV1MandatesIDEventsParamsWithContext creates a new GetV1MandatesIDEventsParams object
// with the ability to set a context for a request.
func NewGetV1MandatesIDEventsParamsWithContext(ctx context.Context) *GetV1MandatesIDEventsParams {
	return &GetV1MandatesIDEventsParams{
		Context: ctx,
	}
}

// NewGetV1MandatesIDEventsParamsWithHTTPClient creates a new GetV1MandatesIDEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1MandatesIDEventsParamsWithHTTPClient(client *http.Client) *GetV1MandatesIDEventsParams {
	return &GetV1MandatesIDEventsParams{
		HTTPClient: client,
	}
}

/*
GetV1MandatesIDEventsParams contains all the parameters to send to the API endpoint

	for the get v1 mandates ID events operation.

	Typically these are written to a http.Request.
*/
type GetV1MandatesIDEventsParams struct {

	/* ID.

	   Mandate ID
	*/
	ID string

	/* Limit.

	   Limit resulting response list.Value must be between 1 and 500 (higher values will be coerced down to 500). Defaults to 100.
	*/
	Limit *int64

	/* Token.

	   If response comes back and `nextToken` is populated, use that value in this `token` query to continue pagination.
	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 mandates ID events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1MandatesIDEventsParams) WithDefaults() *GetV1MandatesIDEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 mandates ID events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1MandatesIDEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) WithTimeout(timeout time.Duration) *GetV1MandatesIDEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) WithContext(ctx context.Context) *GetV1MandatesIDEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) WithHTTPClient(client *http.Client) *GetV1MandatesIDEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) WithID(id string) *GetV1MandatesIDEventsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) SetID(id string) {
	o.ID = id
}

// WithLimit adds the limit to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) WithLimit(limit *int64) *GetV1MandatesIDEventsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithToken adds the token to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) WithToken(token *string) *GetV1MandatesIDEventsParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get v1 mandates ID events params
func (o *GetV1MandatesIDEventsParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1MandatesIDEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
