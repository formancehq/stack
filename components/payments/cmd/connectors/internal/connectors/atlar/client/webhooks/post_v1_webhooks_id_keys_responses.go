// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/formancehq/payments/cmd/connectors/internal/connectors/atlar/models"
)

// PostV1WebhooksIDKeysReader is a Reader for the PostV1WebhooksIDKeys structure.
type PostV1WebhooksIDKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1WebhooksIDKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostV1WebhooksIDKeysCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPostV1WebhooksIDKeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPostV1WebhooksIDKeysPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/webhooks/{id}/keys] PostV1WebhooksIDKeys", response, response.Code())
	}
}

// NewPostV1WebhooksIDKeysCreated creates a PostV1WebhooksIDKeysCreated with default headers values
func NewPostV1WebhooksIDKeysCreated() *PostV1WebhooksIDKeysCreated {
	return &PostV1WebhooksIDKeysCreated{}
}

/*
PostV1WebhooksIDKeysCreated describes a response with status code 201, with default header values.

The created webhook key
*/
type PostV1WebhooksIDKeysCreated struct {
	Payload *models.WebhookSigningKey
}

// IsSuccess returns true when this post v1 webhooks Id keys created response has a 2xx status code
func (o *PostV1WebhooksIDKeysCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 webhooks Id keys created response has a 3xx status code
func (o *PostV1WebhooksIDKeysCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 webhooks Id keys created response has a 4xx status code
func (o *PostV1WebhooksIDKeysCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 webhooks Id keys created response has a 5xx status code
func (o *PostV1WebhooksIDKeysCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 webhooks Id keys created response a status code equal to that given
func (o *PostV1WebhooksIDKeysCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post v1 webhooks Id keys created response
func (o *PostV1WebhooksIDKeysCreated) Code() int {
	return 201
}

func (o *PostV1WebhooksIDKeysCreated) Error() string {
	return fmt.Sprintf("[POST /v1/webhooks/{id}/keys][%d] postV1WebhooksIdKeysCreated  %+v", 201, o.Payload)
}

func (o *PostV1WebhooksIDKeysCreated) String() string {
	return fmt.Sprintf("[POST /v1/webhooks/{id}/keys][%d] postV1WebhooksIdKeysCreated  %+v", 201, o.Payload)
}

func (o *PostV1WebhooksIDKeysCreated) GetPayload() *models.WebhookSigningKey {
	return o.Payload
}

func (o *PostV1WebhooksIDKeysCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebhookSigningKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1WebhooksIDKeysNotFound creates a PostV1WebhooksIDKeysNotFound with default headers values
func NewPostV1WebhooksIDKeysNotFound() *PostV1WebhooksIDKeysNotFound {
	return &PostV1WebhooksIDKeysNotFound{}
}

/*
PostV1WebhooksIDKeysNotFound describes a response with status code 404, with default header values.

The identified webhook doesn't exist
*/
type PostV1WebhooksIDKeysNotFound struct {
	Payload string
}

// IsSuccess returns true when this post v1 webhooks Id keys not found response has a 2xx status code
func (o *PostV1WebhooksIDKeysNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 webhooks Id keys not found response has a 3xx status code
func (o *PostV1WebhooksIDKeysNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 webhooks Id keys not found response has a 4xx status code
func (o *PostV1WebhooksIDKeysNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 webhooks Id keys not found response has a 5xx status code
func (o *PostV1WebhooksIDKeysNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 webhooks Id keys not found response a status code equal to that given
func (o *PostV1WebhooksIDKeysNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post v1 webhooks Id keys not found response
func (o *PostV1WebhooksIDKeysNotFound) Code() int {
	return 404
}

func (o *PostV1WebhooksIDKeysNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/webhooks/{id}/keys][%d] postV1WebhooksIdKeysNotFound  %+v", 404, o.Payload)
}

func (o *PostV1WebhooksIDKeysNotFound) String() string {
	return fmt.Sprintf("[POST /v1/webhooks/{id}/keys][%d] postV1WebhooksIdKeysNotFound  %+v", 404, o.Payload)
}

func (o *PostV1WebhooksIDKeysNotFound) GetPayload() string {
	return o.Payload
}

func (o *PostV1WebhooksIDKeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1WebhooksIDKeysPreconditionFailed creates a PostV1WebhooksIDKeysPreconditionFailed with default headers values
func NewPostV1WebhooksIDKeysPreconditionFailed() *PostV1WebhooksIDKeysPreconditionFailed {
	return &PostV1WebhooksIDKeysPreconditionFailed{}
}

/*
PostV1WebhooksIDKeysPreconditionFailed describes a response with status code 412, with default header values.

ErrorResponse with code `too_many_keys`
*/
type PostV1WebhooksIDKeysPreconditionFailed struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this post v1 webhooks Id keys precondition failed response has a 2xx status code
func (o *PostV1WebhooksIDKeysPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 webhooks Id keys precondition failed response has a 3xx status code
func (o *PostV1WebhooksIDKeysPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 webhooks Id keys precondition failed response has a 4xx status code
func (o *PostV1WebhooksIDKeysPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 webhooks Id keys precondition failed response has a 5xx status code
func (o *PostV1WebhooksIDKeysPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 webhooks Id keys precondition failed response a status code equal to that given
func (o *PostV1WebhooksIDKeysPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the post v1 webhooks Id keys precondition failed response
func (o *PostV1WebhooksIDKeysPreconditionFailed) Code() int {
	return 412
}

func (o *PostV1WebhooksIDKeysPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /v1/webhooks/{id}/keys][%d] postV1WebhooksIdKeysPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostV1WebhooksIDKeysPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /v1/webhooks/{id}/keys][%d] postV1WebhooksIdKeysPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostV1WebhooksIDKeysPreconditionFailed) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostV1WebhooksIDKeysPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
