// Code generated by go-swagger; DO NOT EDIT.

package counterparties

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new counterparties API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for counterparties API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1CounterpartiesID(params *DeleteV1CounterpartiesIDParams, opts ...ClientOption) (*DeleteV1CounterpartiesIDNoContent, error)

	GetV1Counterparties(params *GetV1CounterpartiesParams, opts ...ClientOption) (*GetV1CounterpartiesOK, error)

	GetV1CounterpartiesGetByExternalIDExternalID(params *GetV1CounterpartiesGetByExternalIDExternalIDParams, opts ...ClientOption) (*GetV1CounterpartiesGetByExternalIDExternalIDOK, error)

	GetV1CounterpartiesID(params *GetV1CounterpartiesIDParams, opts ...ClientOption) (*GetV1CounterpartiesIDOK, error)

	GetV1CounterpartiesIDEvents(params *GetV1CounterpartiesIDEventsParams, opts ...ClientOption) (*GetV1CounterpartiesIDEventsOK, error)

	PostV1Counterparties(params *PostV1CounterpartiesParams, opts ...ClientOption) (*PostV1CounterpartiesCreated, error)

	PutV1CounterpartiesID(params *PutV1CounterpartiesIDParams, opts ...ClientOption) (*PutV1CounterpartiesIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1CounterpartiesID deletes counterparty

Deletes the identified counterparty.
*/
func (a *Client) DeleteV1CounterpartiesID(params *DeleteV1CounterpartiesIDParams, opts ...ClientOption) (*DeleteV1CounterpartiesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1CounterpartiesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1CounterpartiesID",
		Method:             "DELETE",
		PathPattern:        "/v1/counterparties/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1CounterpartiesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1CounterpartiesIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1CounterpartiesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Counterparties queries counterparties

Returns a list of counterparties. For further details on Pagination, see section above.
*/
func (a *Client) GetV1Counterparties(params *GetV1CounterpartiesParams, opts ...ClientOption) (*GetV1CounterpartiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CounterpartiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Counterparties",
		Method:             "GET",
		PathPattern:        "/v1/counterparties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CounterpartiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CounterpartiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Counterparties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CounterpartiesGetByExternalIDExternalID reads counterparty by its external Id

Returns the identified counterparty.
*/
func (a *Client) GetV1CounterpartiesGetByExternalIDExternalID(params *GetV1CounterpartiesGetByExternalIDExternalIDParams, opts ...ClientOption) (*GetV1CounterpartiesGetByExternalIDExternalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CounterpartiesGetByExternalIDExternalIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1CounterpartiesGetByExternalIDExternalID",
		Method:             "GET",
		PathPattern:        "/v1/counterparties:getByExternalId/{externalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CounterpartiesGetByExternalIDExternalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CounterpartiesGetByExternalIDExternalIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1CounterpartiesGetByExternalIDExternalID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CounterpartiesID reads counterparty

Returns the identified counterparty
*/
func (a *Client) GetV1CounterpartiesID(params *GetV1CounterpartiesIDParams, opts ...ClientOption) (*GetV1CounterpartiesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CounterpartiesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1CounterpartiesID",
		Method:             "GET",
		PathPattern:        "/v1/counterparties/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CounterpartiesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CounterpartiesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1CounterpartiesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CounterpartiesIDEvents queries counterparty events

Returns a list of Counterparty events. For further details on Pagination, see the section above.
*/
func (a *Client) GetV1CounterpartiesIDEvents(params *GetV1CounterpartiesIDEventsParams, opts ...ClientOption) (*GetV1CounterpartiesIDEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CounterpartiesIDEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1CounterpartiesIDEvents",
		Method:             "GET",
		PathPattern:        "/v1/counterparties/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CounterpartiesIDEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CounterpartiesIDEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1CounterpartiesIDEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Counterparties creates counterparty

Creates a new counterparty.
*/
func (a *Client) PostV1Counterparties(params *PostV1CounterpartiesParams, opts ...ClientOption) (*PostV1CounterpartiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1CounterpartiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Counterparties",
		Method:             "POST",
		PathPattern:        "/v1/counterparties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1CounterpartiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1CounterpartiesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Counterparties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutV1CounterpartiesID updates counterparty

Updates the identified counterparty. Note that you must supply the full Counterparty object when updating. If a field is omitted in the update request, that is set on the existing object, it will get removed.
*/
func (a *Client) PutV1CounterpartiesID(params *PutV1CounterpartiesIDParams, opts ...ClientOption) (*PutV1CounterpartiesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1CounterpartiesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutV1CounterpartiesID",
		Method:             "PUT",
		PathPattern:        "/v1/counterparties/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1CounterpartiesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1CounterpartiesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutV1CounterpartiesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
