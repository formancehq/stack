// Code generated by go-swagger; DO NOT EDIT.

package expected_transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new expected transactions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for expected transactions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1ExpectedTransactions(params *GetV1ExpectedTransactionsParams, opts ...ClientOption) (*GetV1ExpectedTransactionsOK, error)

	GetV1ExpectedTransactionsID(params *GetV1ExpectedTransactionsIDParams, opts ...ClientOption) (*GetV1ExpectedTransactionsIDOK, error)

	GetV1ExpectedTransactionsIDEvents(params *GetV1ExpectedTransactionsIDEventsParams, opts ...ClientOption) (*GetV1ExpectedTransactionsIDEventsOK, error)

	PostV1ExpectedTransactions(params *PostV1ExpectedTransactionsParams, opts ...ClientOption) (*PostV1ExpectedTransactionsOK, error)

	PostV1betaExpectedTransactionsIDArchive(params *PostV1betaExpectedTransactionsIDArchiveParams, opts ...ClientOption) (*PostV1betaExpectedTransactionsIDArchiveOK, error)

	PostV1betaExpectedTransactionsIDReconcile(params *PostV1betaExpectedTransactionsIDReconcileParams, opts ...ClientOption) (*PostV1betaExpectedTransactionsIDReconcileOK, error)

	PostV1betaExpectedTransactionsIDUnreconcile(params *PostV1betaExpectedTransactionsIDUnreconcileParams, opts ...ClientOption) (*PostV1betaExpectedTransactionsIDUnreconcileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetV1ExpectedTransactions queries expected transactions

	Returns a list of expected transactions. For further details on Pagination, see section above.

Sort order is always descending on date
*/
func (a *Client) GetV1ExpectedTransactions(params *GetV1ExpectedTransactionsParams, opts ...ClientOption) (*GetV1ExpectedTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ExpectedTransactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ExpectedTransactions",
		Method:             "GET",
		PathPattern:        "/v1/expected-transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ExpectedTransactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ExpectedTransactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ExpectedTransactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ExpectedTransactionsID reads expected transaction

Returns the identified Expected Transaction
*/
func (a *Client) GetV1ExpectedTransactionsID(params *GetV1ExpectedTransactionsIDParams, opts ...ClientOption) (*GetV1ExpectedTransactionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ExpectedTransactionsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ExpectedTransactionsID",
		Method:             "GET",
		PathPattern:        "/v1/expected-transactions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ExpectedTransactionsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ExpectedTransactionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ExpectedTransactionsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ExpectedTransactionsIDEvents queries expected transaction events

Returns a list of Expected Transaction events. For further details on Pagination, see the section above.
*/
func (a *Client) GetV1ExpectedTransactionsIDEvents(params *GetV1ExpectedTransactionsIDEventsParams, opts ...ClientOption) (*GetV1ExpectedTransactionsIDEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ExpectedTransactionsIDEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ExpectedTransactionsIDEvents",
		Method:             "GET",
		PathPattern:        "/v1/expected-transactions/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ExpectedTransactionsIDEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ExpectedTransactionsIDEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ExpectedTransactionsIDEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ExpectedTransactions creates expected transaction

Create Expected Transaction
*/
func (a *Client) PostV1ExpectedTransactions(params *PostV1ExpectedTransactionsParams, opts ...ClientOption) (*PostV1ExpectedTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ExpectedTransactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ExpectedTransactions",
		Method:             "POST",
		PathPattern:        "/v1/expected-transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ExpectedTransactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ExpectedTransactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ExpectedTransactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1betaExpectedTransactionsIDArchive archives expected transaction

Archive Expected Transaction. Required scopes: `expected_transactions:update` and `expected_transactions:read`.
*/
func (a *Client) PostV1betaExpectedTransactionsIDArchive(params *PostV1betaExpectedTransactionsIDArchiveParams, opts ...ClientOption) (*PostV1betaExpectedTransactionsIDArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1betaExpectedTransactionsIDArchiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1betaExpectedTransactionsIDArchive",
		Method:             "POST",
		PathPattern:        "/v1beta/expected-transactions/{id}:archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1betaExpectedTransactionsIDArchiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1betaExpectedTransactionsIDArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1betaExpectedTransactionsIDArchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1betaExpectedTransactionsIDReconcile reconciles expected transaction

Reconcile Expected Transaction. Required scopes: `expected_transactions:read`, `expected_transactions:update`, `transactions:read`, `transactions:update`, `reconciliation:create`.
*/
func (a *Client) PostV1betaExpectedTransactionsIDReconcile(params *PostV1betaExpectedTransactionsIDReconcileParams, opts ...ClientOption) (*PostV1betaExpectedTransactionsIDReconcileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1betaExpectedTransactionsIDReconcileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1betaExpectedTransactionsIDReconcile",
		Method:             "POST",
		PathPattern:        "/v1beta/expected-transactions/{id}:reconcile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1betaExpectedTransactionsIDReconcileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1betaExpectedTransactionsIDReconcileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1betaExpectedTransactionsIDReconcile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1betaExpectedTransactionsIDUnreconcile unreconciles expected transaction

Unreconcile Expected Transaction. Required scopes: `expected_transactions:read`, `expected_transactions:update`, `transactions:read`, `transactions:update`, `reconciliation:create`.
*/
func (a *Client) PostV1betaExpectedTransactionsIDUnreconcile(params *PostV1betaExpectedTransactionsIDUnreconcileParams, opts ...ClientOption) (*PostV1betaExpectedTransactionsIDUnreconcileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1betaExpectedTransactionsIDUnreconcileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1betaExpectedTransactionsIDUnreconcile",
		Method:             "POST",
		PathPattern:        "/v1beta/expected-transactions/{id}:unreconcile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1betaExpectedTransactionsIDUnreconcileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1betaExpectedTransactionsIDUnreconcileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1betaExpectedTransactionsIDUnreconcile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
