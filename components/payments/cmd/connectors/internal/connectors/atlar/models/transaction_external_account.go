// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TransactionExternalAccount transaction external account
//
// swagger:model TransactionExternalAccount
type TransactionExternalAccount struct {

	// bank
	Bank *BankSlim `json:"bank,omitempty"`

	// identifier
	Identifier *AccountIdentifierSlim `json:"identifier,omitempty"`

	// market
	Market string `json:"market,omitempty"`

	// raw identifier
	RawIdentifier string `json:"rawIdentifier,omitempty"`
}

// Validate validates this transaction external account
func (m *TransactionExternalAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionExternalAccount) validateBank(formats strfmt.Registry) error {
	if swag.IsZero(m.Bank) { // not required
		return nil
	}

	if m.Bank != nil {
		if err := m.Bank.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bank")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bank")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionExternalAccount) validateIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.Identifier) { // not required
		return nil
	}

	if m.Identifier != nil {
		if err := m.Identifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identifier")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this transaction external account based on the context it is used
func (m *TransactionExternalAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBank(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionExternalAccount) contextValidateBank(ctx context.Context, formats strfmt.Registry) error {

	if m.Bank != nil {

		if swag.IsZero(m.Bank) { // not required
			return nil
		}

		if err := m.Bank.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bank")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bank")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionExternalAccount) contextValidateIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.Identifier != nil {

		if swag.IsZero(m.Identifier) { // not required
			return nil
		}

		if err := m.Identifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionExternalAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionExternalAccount) UnmarshalBinary(b []byte) error {
	var res TransactionExternalAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
