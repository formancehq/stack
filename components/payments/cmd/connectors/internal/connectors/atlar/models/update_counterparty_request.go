// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCounterpartyRequest update counterparty request
//
// swagger:model UpdateCounterpartyRequest
type UpdateCounterpartyRequest struct {

	// contact details
	ContactDetails *ContactDetails `json:"contactDetails,omitempty"`

	// external metadata
	ExternalMetadata ExternalMetadata `json:"externalMetadata,omitempty"`

	// name
	// Example: Customer #312
	// Required: true
	Name *string `json:"name"`

	// The legal type of the Counterparty
	// Example: INDIVIDUAL
	// Enum: [INDIVIDUAL COMPANY]
	PartyType string `json:"partyType,omitempty"`
}

// Validate validates this update counterparty request
func (m *UpdateCounterpartyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCounterpartyRequest) validateContactDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactDetails) { // not required
		return nil
	}

	if m.ContactDetails != nil {
		if err := m.ContactDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactDetails")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateCounterpartyRequest) validateExternalMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalMetadata) { // not required
		return nil
	}

	if m.ExternalMetadata != nil {
		if err := m.ExternalMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateCounterpartyRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var updateCounterpartyRequestTypePartyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INDIVIDUAL","COMPANY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateCounterpartyRequestTypePartyTypePropEnum = append(updateCounterpartyRequestTypePartyTypePropEnum, v)
	}
}

const (

	// UpdateCounterpartyRequestPartyTypeINDIVIDUAL captures enum value "INDIVIDUAL"
	UpdateCounterpartyRequestPartyTypeINDIVIDUAL string = "INDIVIDUAL"

	// UpdateCounterpartyRequestPartyTypeCOMPANY captures enum value "COMPANY"
	UpdateCounterpartyRequestPartyTypeCOMPANY string = "COMPANY"
)

// prop value enum
func (m *UpdateCounterpartyRequest) validatePartyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateCounterpartyRequestTypePartyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateCounterpartyRequest) validatePartyType(formats strfmt.Registry) error {
	if swag.IsZero(m.PartyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePartyTypeEnum("partyType", "body", m.PartyType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update counterparty request based on the context it is used
func (m *UpdateCounterpartyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCounterpartyRequest) contextValidateContactDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactDetails != nil {

		if swag.IsZero(m.ContactDetails) { // not required
			return nil
		}

		if err := m.ContactDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactDetails")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateCounterpartyRequest) contextValidateExternalMetadata(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalMetadata) { // not required
		return nil
	}

	if err := m.ExternalMetadata.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("externalMetadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("externalMetadata")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCounterpartyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCounterpartyRequest) UnmarshalBinary(b []byte) error {
	var res UpdateCounterpartyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
