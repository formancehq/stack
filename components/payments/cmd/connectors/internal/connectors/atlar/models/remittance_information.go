// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemittanceInformation remittance information
//
// swagger:model RemittanceInformation
type RemittanceInformation struct {

	// The type of remittance information
	// Example: UNSTRUCTURED
	// Required: true
	// Enum: [OCR UNSTRUCTURED STRUCTURED]
	Type *string `json:"type"`

	// The remittance information to be sent to the destination bank and recipient. Maximum length is 140 characters.
	// Example: invoice-2022-05-03-0124
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this remittance information
func (m *RemittanceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var remittanceInformationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OCR","UNSTRUCTURED","STRUCTURED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remittanceInformationTypeTypePropEnum = append(remittanceInformationTypeTypePropEnum, v)
	}
}

const (

	// RemittanceInformationTypeOCR captures enum value "OCR"
	RemittanceInformationTypeOCR string = "OCR"

	// RemittanceInformationTypeUNSTRUCTURED captures enum value "UNSTRUCTURED"
	RemittanceInformationTypeUNSTRUCTURED string = "UNSTRUCTURED"

	// RemittanceInformationTypeSTRUCTURED captures enum value "STRUCTURED"
	RemittanceInformationTypeSTRUCTURED string = "STRUCTURED"
)

// prop value enum
func (m *RemittanceInformation) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remittanceInformationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RemittanceInformation) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *RemittanceInformation) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this remittance information based on context it is used
func (m *RemittanceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RemittanceInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemittanceInformation) UnmarshalBinary(b []byte) error {
	var res RemittanceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
