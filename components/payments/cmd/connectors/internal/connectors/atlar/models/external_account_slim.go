// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExternalAccountSlim external account slim
//
// swagger:model ExternalAccountSlim
type ExternalAccountSlim struct {

	// The bank to which this external account belongs.
	// Required: true
	Bank *BankSlim `json:"bank"`

	// The ID of the counterparty to which this external account belongs.
	// Example: f3efbb73-4e5b-4b22-adeb-918bbf1dfbd8
	// Required: true
	CounterpartyID *string `json:"counterpartyId"`

	// The unique identifier of this external acocunt.
	// Example: be7e04fe-3fa0-48f5-a993-2008409255f2
	// Required: true
	ID *string `json:"id"`

	// A list of account identifiers with account numbers that identify this account. A single account identifier can be enough, but some countries use multiple. For example, an account can be described both with an IBAN and one or more local formats.
	// Required: true
	Identifiers []*AccountIdentifierSlim `json:"identifiers"`

	// Your organization ID.
	// Example: 605e26fc-4fce-495a-a92f-2c3592d7287e
	// Required: true
	OrganizationID *string `json:"organizationId"`
}

// Validate validates this external account slim
func (m *ExternalAccountSlim) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounterpartyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalAccountSlim) validateBank(formats strfmt.Registry) error {

	if err := validate.Required("bank", "body", m.Bank); err != nil {
		return err
	}

	if m.Bank != nil {
		if err := m.Bank.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bank")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bank")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalAccountSlim) validateCounterpartyID(formats strfmt.Registry) error {

	if err := validate.Required("counterpartyId", "body", m.CounterpartyID); err != nil {
		return err
	}

	return nil
}

func (m *ExternalAccountSlim) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ExternalAccountSlim) validateIdentifiers(formats strfmt.Registry) error {

	if err := validate.Required("identifiers", "body", m.Identifiers); err != nil {
		return err
	}

	for i := 0; i < len(m.Identifiers); i++ {
		if swag.IsZero(m.Identifiers[i]) { // not required
			continue
		}

		if m.Identifiers[i] != nil {
			if err := m.Identifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("identifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("identifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExternalAccountSlim) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this external account slim based on the context it is used
func (m *ExternalAccountSlim) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBank(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalAccountSlim) contextValidateBank(ctx context.Context, formats strfmt.Registry) error {

	if m.Bank != nil {

		if err := m.Bank.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bank")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bank")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalAccountSlim) contextValidateIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Identifiers); i++ {

		if m.Identifiers[i] != nil {

			if swag.IsZero(m.Identifiers[i]) { // not required
				return nil
			}

			if err := m.Identifiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("identifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("identifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExternalAccountSlim) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalAccountSlim) UnmarshalBinary(b []byte) error {
	var res ExternalAccountSlim
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
