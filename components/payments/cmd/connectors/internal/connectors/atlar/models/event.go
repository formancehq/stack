// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Event event
//
// swagger:model Event
type Event struct {

	// Additional details which help describe this event.
	Details map[string]string `json:"details,omitempty"`

	// The ID of the API resource that this event belongs to.
	// Example: bc14f69b-a191-4dce-9f70-48376bbed8d2
	// Required: true
	EntityID *string `json:"entityId"`

	// The ID of the event.
	// Example: 0
	// Required: true
	ID *int64 `json:"id"`

	// A message which could either be a message from the bank or an explanation of the event.
	Message string `json:"message,omitempty"`

	// The event name. Different resources have different sets of event names.
	// Example: CREATED
	// Required: true
	Name *string `json:"name"`

	// Your organization ID.
	// Example: 605e26fc-4fce-495a-a92f-2c3592d7287e
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// The originator of the event which could be either a user ID, BANK or AVANTIR.
	// Required: true
	Originator *string `json:"originator"`

	// When the event happened.
	// Example: 2022-08-20T12:20:40.866061374Z
	// Required: true
	Timestamp *string `json:"timestamp"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entityId", "body", m.EntityID); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateOriginator(formats strfmt.Registry) error {

	if err := validate.Required("originator", "body", m.Originator); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this event based on context it is used
func (m *Event) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
