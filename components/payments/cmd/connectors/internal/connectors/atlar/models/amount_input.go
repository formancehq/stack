// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AmountInput amount input
//
// swagger:model AmountInput
type AmountInput struct {

	// 3-letter ISO 4217 currency code.
	// Example: EUR
	// Required: true
	Currency *string `json:"currency"`

	// A string representation of the amount value, which should be a decimal number if the currency has decimals. The number must contain the exact number of decimals for the currency (e.g. 1.0 SEK won't be accepted, but 1.00 SEK will). The number must also contain a dot `.` as decimal separator. NOTE: either this field or `value` must be provided.
	// Example: 15.02
	StringValue string `json:"stringValue,omitempty"`

	// The amount value as an integer (int64) represented in minor currency units (e.g. 15.02 EUR should be represented as the value 1502). NOTE: either this field or `stringValue` must be provided.
	// Example: 1502
	Value int64 `json:"value,omitempty"`
}

// Validate validates this amount input
func (m *AmountInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AmountInput) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this amount input based on context it is used
func (m *AmountInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AmountInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AmountInput) UnmarshalBinary(b []byte) error {
	var res AmountInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
