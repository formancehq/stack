// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// auth types
	AuthTypes map[string]AuthTypeInfo `json:"authTypes,omitempty"`

	// created
	// Example: 2022-05-04T18:31:12.889104898Z
	Created string `json:"created,omitempty"`

	// emails
	Emails []*Email `json:"emails"`

	// first name
	// Example: John
	FirstName string `json:"firstName,omitempty"`

	// id
	// Example: 54528335-739e-4de9-bdb3-28f96c98785d
	ID string `json:"id,omitempty"`

	// last name
	// Example: Smith
	LastName string `json:"lastName,omitempty"`

	// programmatic access
	// Example: false
	ProgrammaticAccess bool `json:"programmaticAccess,omitempty"`

	// updated
	// Example: 2022-05-04T18:31:12.889104898Z
	Updated string `json:"updated,omitempty"`

	// username
	// Example: john.smith@johnnysmithson.com
	Username string `json:"username,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAuthTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthTypes) { // not required
		return nil
	}

	for k := range m.AuthTypes {

		if err := validate.Required("authTypes"+"."+k, "body", m.AuthTypes[k]); err != nil {
			return err
		}
		if val, ok := m.AuthTypes[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authTypes" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authTypes" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateEmails(formats strfmt.Registry) error {
	if swag.IsZero(m.Emails) { // not required
		return nil
	}

	for i := 0; i < len(m.Emails); i++ {
		if swag.IsZero(m.Emails[i]) { // not required
			continue
		}

		if m.Emails[i] != nil {
			if err := m.Emails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user based on the context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) contextValidateAuthTypes(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.AuthTypes {

		if val, ok := m.AuthTypes[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *User) contextValidateEmails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Emails); i++ {

		if m.Emails[i] != nil {

			if swag.IsZero(m.Emails[i]) { // not required
				return nil
			}

			if err := m.Emails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
