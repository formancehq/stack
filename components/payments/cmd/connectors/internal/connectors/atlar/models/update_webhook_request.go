// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateWebhookRequest update webhook request
//
// swagger:model UpdateWebhookRequest
type UpdateWebhookRequest struct {

	// An inclusive filter to specify which resources and events that you are interested in.
	// Required: true
	Filter []*WebhookFilter `json:"filter"`

	// The unique identifier of the webhook to update.
	// Example: be7e04fe-3fa0-48f5-a993-2008409255f2
	ID string `json:"id,omitempty"`

	// An optional name for your webhook where you could describe its purpose.
	// Example: Payment updates
	Name string `json:"name,omitempty"`

	// The URL to which webhooks will be sent via HTTP POST requests in JSON format. Must use https.
	// Example: https://example.com
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this update webhook request
func (m *UpdateWebhookRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateWebhookRequest) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	for i := 0; i < len(m.Filter); i++ {
		if swag.IsZero(m.Filter[i]) { // not required
			continue
		}

		if m.Filter[i] != nil {
			if err := m.Filter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateWebhookRequest) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update webhook request based on the context it is used
func (m *UpdateWebhookRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateWebhookRequest) contextValidateFilter(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Filter); i++ {

		if m.Filter[i] != nil {

			if swag.IsZero(m.Filter[i]) { // not required
				return nil
			}

			if err := m.Filter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateWebhookRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateWebhookRequest) UnmarshalBinary(b []byte) error {
	var res UpdateWebhookRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
