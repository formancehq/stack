// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BankTransactionCode bank transaction code
//
// swagger:model BankTransactionCode
type BankTransactionCode struct {

	// Free-form textual description of the Bank Transaction Code.
	// Example: SEPA Credit Transfer
	Description string `json:"description,omitempty"`

	// ISO 20022 BTC Domain - Defines the business area of the underlying transaction, e.g. payments or cash management.
	// Example: PMNT
	Domain string `json:"domain,omitempty"`

	// ISO 20022 BTC Family - May for example define the type of transaction, e.g. credit transfer or direct debit.
	// Example: IDDT
	Family string `json:"family,omitempty"`

	// Proprietary bank transaction codes are provided when the bank provides a proprietary transaction code. This field will be set as the code provided by the bank.
	Proprietary *ProprietaryBankTransactionCode `json:"proprietary,omitempty"`

	// ISO 20022 BTC Subfamily - May for example specify a scheme specific transaction type, e.g. SEPA credit transfer, or a Cross-Border credit transfer.
	// Example: ESCT
	Subfamily string `json:"subfamily,omitempty"`
}

// Validate validates this bank transaction code
func (m *BankTransactionCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProprietary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankTransactionCode) validateProprietary(formats strfmt.Registry) error {
	if swag.IsZero(m.Proprietary) { // not required
		return nil
	}

	if m.Proprietary != nil {
		if err := m.Proprietary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proprietary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proprietary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bank transaction code based on the context it is used
func (m *BankTransactionCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProprietary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankTransactionCode) contextValidateProprietary(ctx context.Context, formats strfmt.Registry) error {

	if m.Proprietary != nil {

		if swag.IsZero(m.Proprietary) { // not required
			return nil
		}

		if err := m.Proprietary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proprietary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proprietary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankTransactionCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankTransactionCode) UnmarshalBinary(b []byte) error {
	var res BankTransactionCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
