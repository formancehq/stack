// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCounterpartyRequest create counterparty request
//
// swagger:model CreateCounterpartyRequest
type CreateCounterpartyRequest struct {

	// Contact details of your counterparty.
	ContactDetails *ContactDetails `json:"contactDetails,omitempty"`

	// An optional list of external accounts to create for this counterparty. This is a separate resource on the API. One counterparty can have multiple external accounts.
	ExternalAccounts []*CreateEmbeddedExternalAccountRequest `json:"externalAccounts"`

	// ExternalId is optional to use, but if used, the Atlar platform will persist it, index it, as well as require it to be unique. It is also possible to retrieve the identified resource using the ExternalId.
	// Example: walVNuin6X5Mvte4xhg1ibTAVSACfN4Q9hl
	ExternalID string `json:"externalId,omitempty"`

	// Any metadata that you might want to store close to the counterparty. This could for example be your own customer ID.
	ExternalMetadata ExternalMetadata `json:"externalMetadata,omitempty"`

	// Name of your Counterparty
	// Example: Customer #312
	// Required: true
	Name *string `json:"name"`

	// The legal type of the Counterparty
	// Example: INDIVIDUAL
	// Enum: [INDIVIDUAL COMPANY]
	PartyType string `json:"partyType,omitempty"`
}

// Validate validates this create counterparty request
func (m *CreateCounterpartyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCounterpartyRequest) validateContactDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactDetails) { // not required
		return nil
	}

	if m.ContactDetails != nil {
		if err := m.ContactDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactDetails")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCounterpartyRequest) validateExternalAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalAccounts) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalAccounts); i++ {
		if swag.IsZero(m.ExternalAccounts[i]) { // not required
			continue
		}

		if m.ExternalAccounts[i] != nil {
			if err := m.ExternalAccounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalAccounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalAccounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateCounterpartyRequest) validateExternalMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalMetadata) { // not required
		return nil
	}

	if m.ExternalMetadata != nil {
		if err := m.ExternalMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCounterpartyRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var createCounterpartyRequestTypePartyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INDIVIDUAL","COMPANY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCounterpartyRequestTypePartyTypePropEnum = append(createCounterpartyRequestTypePartyTypePropEnum, v)
	}
}

const (

	// CreateCounterpartyRequestPartyTypeINDIVIDUAL captures enum value "INDIVIDUAL"
	CreateCounterpartyRequestPartyTypeINDIVIDUAL string = "INDIVIDUAL"

	// CreateCounterpartyRequestPartyTypeCOMPANY captures enum value "COMPANY"
	CreateCounterpartyRequestPartyTypeCOMPANY string = "COMPANY"
)

// prop value enum
func (m *CreateCounterpartyRequest) validatePartyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCounterpartyRequestTypePartyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateCounterpartyRequest) validatePartyType(formats strfmt.Registry) error {
	if swag.IsZero(m.PartyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePartyTypeEnum("partyType", "body", m.PartyType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create counterparty request based on the context it is used
func (m *CreateCounterpartyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCounterpartyRequest) contextValidateContactDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactDetails != nil {

		if swag.IsZero(m.ContactDetails) { // not required
			return nil
		}

		if err := m.ContactDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactDetails")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCounterpartyRequest) contextValidateExternalAccounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalAccounts); i++ {

		if m.ExternalAccounts[i] != nil {

			if swag.IsZero(m.ExternalAccounts[i]) { // not required
				return nil
			}

			if err := m.ExternalAccounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalAccounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalAccounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateCounterpartyRequest) contextValidateExternalMetadata(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalMetadata) { // not required
		return nil
	}

	if err := m.ExternalMetadata.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("externalMetadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("externalMetadata")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCounterpartyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCounterpartyRequest) UnmarshalBinary(b []byte) error {
	var res CreateCounterpartyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
