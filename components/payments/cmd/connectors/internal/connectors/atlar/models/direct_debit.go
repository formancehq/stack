// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectDebit direct debit
//
// swagger:model DirectDebit
type DirectDebit struct {

	// The amount and currency of this direct debit.
	Amount *Amount `json:"amount,omitempty"`

	// The approval chain that this direct debit triggered. The direct debit will stay in `CREATED` until the full chain is approved. You can configure approval chains in the Dashboard.
	ApprovalChain *PaymentApprovalChain `json:"approvalChain,omitempty"`

	// attached transactions
	AttachedTransactions []*AttachedTransaction `json:"attachedTransactions"`

	// ISO 20022 Category Purpose Code.
	// Example: SUPP
	CategoryPurpose string `json:"categoryPurpose,omitempty"`

	// The ID of the instruction that was sent to the bank where this direct debit was included when it was created.
	// Example: c1d6502c-07c7-4c77-bee5-963f9464c7d8
	ConnectionInstructionID string `json:"connectionInstructionId,omitempty"`

	// The time that this resource was created.
	// Example: 2023-01-20T18:31:12.889104898Z
	Created string `json:"created,omitempty"`

	// The requested execution date. Format: `yyyy-mm-dd`.
	// Example: 2022-05-07
	Date string `json:"date,omitempty"`

	// @description Your bank account where money will be collected. The account is frozen in time at creation of the direct debit which means that if it's modified later on the API it won't change here.
	DestinationAccount *AccountSlim `json:"destinationAccount,omitempty"`

	// The scheme for this direct debit.
	// Example: SDD_CORE
	DirectDebitSchemeType string `json:"directDebitSchemeType,omitempty"`

	// The ETag based on version. To be passed along in `If-Match` header when updating a DirectDebit
	// Example: version:1
	Etag string `json:"etag,omitempty"`

	// ExternalId is optional to use, but if used, the Atlar platform will persist it, index it, as well as require it to be unique across all DirectDebits. It is also possible to retrieve the identified DirectDebit using the ExternalId.
	// Example: walVNuin6X5Mvte4xhg1ibTAVSACfN4Q9hl
	ExternalID string `json:"externalId,omitempty"`

	// Any external metadata you want to attach, such as your own IDs.
	ExternalMetadata ExternalMetadata `json:"externalMetadata,omitempty"`

	// The unique ID of this direct debit.
	// Example: 76992987-48fc-4b03-b609-ea6fdc3045b4
	ID string `json:"id,omitempty"`

	// The mandate which represents the end user's consent to executing this direct debit.
	Mandate *Mandate `json:"mandate,omitempty"`

	// Your organization ID.
	// Example: 605e26fc-4fce-495a-a92f-2c3592d7287e
	OrganizationID string `json:"organizationId,omitempty"`

	// Will become populated if/when this direct debit is reconciled.
	Reconciliation *ReconciliationDetails `json:"reconciliation,omitempty"`

	// Remittance information that might show up on the debtor's account statement. Whether or not it will show up depends on the direct debit scheme.
	RemittanceInformation *RemittanceInformation `json:"remittanceInformation,omitempty"`

	// The external account from where the money has or will be collected. The external account is frozen in time at creation of the direct debit which means that if it's modified later on the API it won't change here.
	SourceExternalAccount *ExternalAccount `json:"sourceExternalAccount,omitempty"`

	// The current status of the direct debit.
	// Example: SENT
	// Enum: [CREATED APPROVED REJECTED PENDING_SUBMISSION SENT ACCEPTED EXECUTED FAILED RECONCILED RETURNED]
	Status string `json:"status,omitempty"`

	// starts at 1 when the direct debit is created and increases by one in each successive update
	// Example: 1
	Version int64 `json:"version,omitempty"`
}

// Validate validates this direct debit
func (m *DirectDebit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovalChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttachedTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMandate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReconciliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemittanceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceExternalAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebit) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) validateApprovalChain(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovalChain) { // not required
		return nil
	}

	if m.ApprovalChain != nil {
		if err := m.ApprovalChain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approvalChain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("approvalChain")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) validateAttachedTransactions(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachedTransactions) { // not required
		return nil
	}

	for i := 0; i < len(m.AttachedTransactions); i++ {
		if swag.IsZero(m.AttachedTransactions[i]) { // not required
			continue
		}

		if m.AttachedTransactions[i] != nil {
			if err := m.AttachedTransactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachedTransactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachedTransactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DirectDebit) validateDestinationAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAccount) { // not required
		return nil
	}

	if m.DestinationAccount != nil {
		if err := m.DestinationAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAccount")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) validateExternalMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalMetadata) { // not required
		return nil
	}

	if m.ExternalMetadata != nil {
		if err := m.ExternalMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) validateMandate(formats strfmt.Registry) error {
	if swag.IsZero(m.Mandate) { // not required
		return nil
	}

	if m.Mandate != nil {
		if err := m.Mandate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mandate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mandate")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) validateReconciliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Reconciliation) { // not required
		return nil
	}

	if m.Reconciliation != nil {
		if err := m.Reconciliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reconciliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reconciliation")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) validateRemittanceInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.RemittanceInformation) { // not required
		return nil
	}

	if m.RemittanceInformation != nil {
		if err := m.RemittanceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remittanceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remittanceInformation")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) validateSourceExternalAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceExternalAccount) { // not required
		return nil
	}

	if m.SourceExternalAccount != nil {
		if err := m.SourceExternalAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceExternalAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceExternalAccount")
			}
			return err
		}
	}

	return nil
}

var directDebitTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATED","APPROVED","REJECTED","PENDING_SUBMISSION","SENT","ACCEPTED","EXECUTED","FAILED","RECONCILED","RETURNED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		directDebitTypeStatusPropEnum = append(directDebitTypeStatusPropEnum, v)
	}
}

const (

	// DirectDebitStatusCREATED captures enum value "CREATED"
	DirectDebitStatusCREATED string = "CREATED"

	// DirectDebitStatusAPPROVED captures enum value "APPROVED"
	DirectDebitStatusAPPROVED string = "APPROVED"

	// DirectDebitStatusREJECTED captures enum value "REJECTED"
	DirectDebitStatusREJECTED string = "REJECTED"

	// DirectDebitStatusPENDINGSUBMISSION captures enum value "PENDING_SUBMISSION"
	DirectDebitStatusPENDINGSUBMISSION string = "PENDING_SUBMISSION"

	// DirectDebitStatusSENT captures enum value "SENT"
	DirectDebitStatusSENT string = "SENT"

	// DirectDebitStatusACCEPTED captures enum value "ACCEPTED"
	DirectDebitStatusACCEPTED string = "ACCEPTED"

	// DirectDebitStatusEXECUTED captures enum value "EXECUTED"
	DirectDebitStatusEXECUTED string = "EXECUTED"

	// DirectDebitStatusFAILED captures enum value "FAILED"
	DirectDebitStatusFAILED string = "FAILED"

	// DirectDebitStatusRECONCILED captures enum value "RECONCILED"
	DirectDebitStatusRECONCILED string = "RECONCILED"

	// DirectDebitStatusRETURNED captures enum value "RETURNED"
	DirectDebitStatusRETURNED string = "RETURNED"
)

// prop value enum
func (m *DirectDebit) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, directDebitTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DirectDebit) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this direct debit based on the context it is used
func (m *DirectDebit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApprovalChain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAttachedTransactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMandate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReconciliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemittanceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceExternalAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebit) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {

		if swag.IsZero(m.Amount) { // not required
			return nil
		}

		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) contextValidateApprovalChain(ctx context.Context, formats strfmt.Registry) error {

	if m.ApprovalChain != nil {

		if swag.IsZero(m.ApprovalChain) { // not required
			return nil
		}

		if err := m.ApprovalChain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approvalChain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("approvalChain")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) contextValidateAttachedTransactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttachedTransactions); i++ {

		if m.AttachedTransactions[i] != nil {

			if swag.IsZero(m.AttachedTransactions[i]) { // not required
				return nil
			}

			if err := m.AttachedTransactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachedTransactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachedTransactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DirectDebit) contextValidateDestinationAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationAccount != nil {

		if swag.IsZero(m.DestinationAccount) { // not required
			return nil
		}

		if err := m.DestinationAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAccount")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) contextValidateExternalMetadata(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalMetadata) { // not required
		return nil
	}

	if err := m.ExternalMetadata.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("externalMetadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("externalMetadata")
		}
		return err
	}

	return nil
}

func (m *DirectDebit) contextValidateMandate(ctx context.Context, formats strfmt.Registry) error {

	if m.Mandate != nil {

		if swag.IsZero(m.Mandate) { // not required
			return nil
		}

		if err := m.Mandate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mandate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mandate")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) contextValidateReconciliation(ctx context.Context, formats strfmt.Registry) error {

	if m.Reconciliation != nil {

		if swag.IsZero(m.Reconciliation) { // not required
			return nil
		}

		if err := m.Reconciliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reconciliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reconciliation")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) contextValidateRemittanceInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.RemittanceInformation != nil {

		if swag.IsZero(m.RemittanceInformation) { // not required
			return nil
		}

		if err := m.RemittanceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remittanceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remittanceInformation")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebit) contextValidateSourceExternalAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceExternalAccount != nil {

		if swag.IsZero(m.SourceExternalAccount) { // not required
			return nil
		}

		if err := m.SourceExternalAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceExternalAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceExternalAccount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebit) UnmarshalBinary(b []byte) error {
	var res DirectDebit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
