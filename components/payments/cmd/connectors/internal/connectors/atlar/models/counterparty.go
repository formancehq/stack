// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Counterparty A Counterparty represents a person or business.
//
// swagger:model Counterparty
type Counterparty struct {

	// Contact details of your counterparty.
	// Required: true
	ContactDetails *ContactDetails `json:"contactDetails"`

	// created
	// Example: 2022-05-04T18:31:12.889104898Z
	// Required: true
	Created *string `json:"created"`

	// external accounts
	ExternalAccounts []*ExternalAccount `json:"externalAccounts"`

	// ExternalId is optional to use, but if used, the Atlar platform will persist it, index it, as well as require it to be unique across all Counterparties. It is also possible to retrieve the identified Counterparty using the ExternalId.
	// Example: walVNuin6X5Mvte4xhg1ibTAVSACfN4Q9hl
	ExternalID string `json:"externalId,omitempty"`

	// external metadata
	ExternalMetadata ExternalMetadata `json:"externalMetadata,omitempty"`

	// id
	// Example: f3efbb73-4e5b-4b22-adeb-918bbf1dfbd8
	// Required: true
	ID *string `json:"id"`

	// A list of account identifiers with account numbers that identify this account. A single account identifier can be enough, but some countries use multiple. For example, an account can be described both with an IBAN and one or more local formats.
	Identifiers []*AccountIdentifier `json:"identifiers"`

	// Name of your Counterparty
	// Example: Customer #312
	Name string `json:"name,omitempty"`

	// organization Id
	// Example: 605e26fc-4fce-495a-a92f-2c3592d7287e
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// The legal type of the Counterparty
	// Example: INDIVIDUAL
	// Enum: [INDIVIDUAL COMPANY]
	PartyType string `json:"partyType,omitempty"`

	// updated
	// Example: 2022-05-04T18:31:12.889104898Z
	Updated string `json:"updated,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this counterparty
func (m *Counterparty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Counterparty) validateContactDetails(formats strfmt.Registry) error {

	if err := validate.Required("contactDetails", "body", m.ContactDetails); err != nil {
		return err
	}

	if m.ContactDetails != nil {
		if err := m.ContactDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Counterparty) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *Counterparty) validateExternalAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalAccounts) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalAccounts); i++ {
		if swag.IsZero(m.ExternalAccounts[i]) { // not required
			continue
		}

		if m.ExternalAccounts[i] != nil {
			if err := m.ExternalAccounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalAccounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalAccounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Counterparty) validateExternalMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalMetadata) { // not required
		return nil
	}

	if m.ExternalMetadata != nil {
		if err := m.ExternalMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Counterparty) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Counterparty) validateIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.Identifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.Identifiers); i++ {
		if swag.IsZero(m.Identifiers[i]) { // not required
			continue
		}

		if m.Identifiers[i] != nil {
			if err := m.Identifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("identifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("identifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Counterparty) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

var counterpartyTypePartyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INDIVIDUAL","COMPANY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		counterpartyTypePartyTypePropEnum = append(counterpartyTypePartyTypePropEnum, v)
	}
}

const (

	// CounterpartyPartyTypeINDIVIDUAL captures enum value "INDIVIDUAL"
	CounterpartyPartyTypeINDIVIDUAL string = "INDIVIDUAL"

	// CounterpartyPartyTypeCOMPANY captures enum value "COMPANY"
	CounterpartyPartyTypeCOMPANY string = "COMPANY"
)

// prop value enum
func (m *Counterparty) validatePartyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, counterpartyTypePartyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Counterparty) validatePartyType(formats strfmt.Registry) error {
	if swag.IsZero(m.PartyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePartyTypeEnum("partyType", "body", m.PartyType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this counterparty based on the context it is used
func (m *Counterparty) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Counterparty) contextValidateContactDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactDetails != nil {

		if err := m.ContactDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Counterparty) contextValidateExternalAccounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalAccounts); i++ {

		if m.ExternalAccounts[i] != nil {

			if swag.IsZero(m.ExternalAccounts[i]) { // not required
				return nil
			}

			if err := m.ExternalAccounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalAccounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalAccounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Counterparty) contextValidateExternalMetadata(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalMetadata) { // not required
		return nil
	}

	if err := m.ExternalMetadata.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("externalMetadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("externalMetadata")
		}
		return err
	}

	return nil
}

func (m *Counterparty) contextValidateIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Identifiers); i++ {

		if m.Identifiers[i] != nil {

			if swag.IsZero(m.Identifiers[i]) { // not required
				return nil
			}

			if err := m.Identifiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("identifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("identifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Counterparty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Counterparty) UnmarshalBinary(b []byte) error {
	var res Counterparty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
