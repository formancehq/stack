// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Membership membership
//
// swagger:model Membership
type Membership struct {

	// created
	Created string `json:"created,omitempty"`

	// mfa settings
	MfaSettings []*MfaSetting `json:"mfaSettings"`

	// organization Id
	OrganizationID string `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// role Id
	RoleID string `json:"roleId,omitempty"`

	// role type
	// Example: REGULAR_ROLE
	// Enum: [SERVICE_ROLE OPERATOR_ROLE REGULAR_ROLE]
	RoleType string `json:"roleType,omitempty"`

	// updated
	Updated string `json:"updated,omitempty"`

	// user
	User *UserSlim `json:"user,omitempty"`
}

// Validate validates this membership
func (m *Membership) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMfaSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Membership) validateMfaSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.MfaSettings) { // not required
		return nil
	}

	for i := 0; i < len(m.MfaSettings); i++ {
		if swag.IsZero(m.MfaSettings[i]) { // not required
			continue
		}

		if m.MfaSettings[i] != nil {
			if err := m.MfaSettings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mfaSettings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mfaSettings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var membershipTypeRoleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SERVICE_ROLE","OPERATOR_ROLE","REGULAR_ROLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		membershipTypeRoleTypePropEnum = append(membershipTypeRoleTypePropEnum, v)
	}
}

const (

	// MembershipRoleTypeSERVICEROLE captures enum value "SERVICE_ROLE"
	MembershipRoleTypeSERVICEROLE string = "SERVICE_ROLE"

	// MembershipRoleTypeOPERATORROLE captures enum value "OPERATOR_ROLE"
	MembershipRoleTypeOPERATORROLE string = "OPERATOR_ROLE"

	// MembershipRoleTypeREGULARROLE captures enum value "REGULAR_ROLE"
	MembershipRoleTypeREGULARROLE string = "REGULAR_ROLE"
)

// prop value enum
func (m *Membership) validateRoleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, membershipTypeRoleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Membership) validateRoleType(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleTypeEnum("roleType", "body", m.RoleType); err != nil {
		return err
	}

	return nil
}

func (m *Membership) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this membership based on the context it is used
func (m *Membership) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMfaSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Membership) contextValidateMfaSettings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MfaSettings); i++ {

		if m.MfaSettings[i] != nil {

			if swag.IsZero(m.MfaSettings[i]) { // not required
				return nil
			}

			if err := m.MfaSettings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mfaSettings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mfaSettings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Membership) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Membership) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Membership) UnmarshalBinary(b []byte) error {
	var res Membership
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
