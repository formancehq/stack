// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Amount amount
//
// swagger:model Amount
type Amount struct {

	// 3-letter ISO 4217 currency code.
	// Example: EUR
	// Required: true
	Currency *string `json:"currency"`

	// A string representation of the amount value, which will be a decimal number if the currency has decimals. The number is not formatted for display purposes (e.g. with thousand separator) and always contains the dot `.` character as decimal separator.
	// Example: 15.02
	// Required: true
	StringValue *string `json:"stringValue"`

	// The amount value as an integer (int64) represented in currency minor units (e.g. 15.02 EUR is represented as the value 1502).
	// Example: 1502
	// Required: true
	Value *int64 `json:"value"`
}

// Validate validates this amount
func (m *Amount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStringValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Amount) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Amount) validateStringValue(formats strfmt.Registry) error {

	if err := validate.Required("stringValue", "body", m.StringValue); err != nil {
		return err
	}

	return nil
}

func (m *Amount) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this amount based on context it is used
func (m *Amount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Amount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Amount) UnmarshalBinary(b []byte) error {
	var res Amount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
