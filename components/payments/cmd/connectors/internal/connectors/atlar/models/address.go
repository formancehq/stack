// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Address address
//
// swagger:model Address
type Address struct {

	// city
	// Example: Stockholm
	City string `json:"city,omitempty"`

	// ISO 3166-1 alpha-2 country code. Examples: DE, DK, SE
	// Example: SE
	// Max Length: 2
	// Min Length: 2
	Country string `json:"country,omitempty"`

	// postal code
	// Example: 11111
	PostalCode string `json:"postalCode,omitempty"`

	// International unstructured address lines, as they might appear on a mailing label, are presented in their raw, unformatted form. This array is populated with raw address lines only when Atlar receives such information from the bank. While the bank might not always provide these lines, when available, they will appear here in their unaltered state.
	RawAddressLines []string `json:"rawAddressLines"`

	// street name
	// Example: Example street
	StreetName string `json:"streetName,omitempty"`

	// street number
	// Example: 47
	StreetNumber string `json:"streetNumber,omitempty"`
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Address) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MinLength("country", "body", m.Country, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("country", "body", m.Country, 2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address based on context it is used
func (m *Address) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
