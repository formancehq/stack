// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PaymentApprovalStep payment approval step
//
// swagger:model PaymentApprovalStep
type PaymentApprovalStep struct {

	// user id of user who approved/rejected, empty if not yet approved/rejected.
	Approver *User `json:"approver,omitempty"`

	// the id of this step, used when approving/rejecting
	// Example: 735c7b8c-ef29-456a-8caf-113be117d131
	ID string `json:"id,omitempty"`

	// the Role that is required in order to approve/reject
	RequiredRole *RoleSlim `json:"requiredRole,omitempty"`

	// the status of the approval step (PENDING, APPROVED or REJECTED). PENDING if step is not yet interacted with.
	Status string `json:"status,omitempty"`

	// timestamp when approved/rejected, zero if not yet approved/rejected.
	Updated string `json:"updated,omitempty"`
}

// Validate validates this payment approval step
func (m *PaymentApprovalStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentApprovalStep) validateApprover(formats strfmt.Registry) error {
	if swag.IsZero(m.Approver) { // not required
		return nil
	}

	if m.Approver != nil {
		if err := m.Approver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("approver")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentApprovalStep) validateRequiredRole(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredRole) { // not required
		return nil
	}

	if m.RequiredRole != nil {
		if err := m.RequiredRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requiredRole")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requiredRole")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this payment approval step based on the context it is used
func (m *PaymentApprovalStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApprover(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequiredRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentApprovalStep) contextValidateApprover(ctx context.Context, formats strfmt.Registry) error {

	if m.Approver != nil {

		if swag.IsZero(m.Approver) { // not required
			return nil
		}

		if err := m.Approver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("approver")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentApprovalStep) contextValidateRequiredRole(ctx context.Context, formats strfmt.Registry) error {

	if m.RequiredRole != nil {

		if swag.IsZero(m.RequiredRole) { // not required
			return nil
		}

		if err := m.RequiredRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requiredRole")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requiredRole")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentApprovalStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentApprovalStep) UnmarshalBinary(b []byte) error {
	var res PaymentApprovalStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
