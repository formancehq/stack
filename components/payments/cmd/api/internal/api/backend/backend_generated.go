// Code generated by MockGen. DO NOT EDIT.
// Source: backend.go

// Package backend is a generated GoMock package.
package backend

import (
	context "context"
	reflect "reflect"

	service "github.com/formancehq/payments/cmd/api/internal/api/service"
	storage "github.com/formancehq/payments/cmd/api/internal/storage"
	models "github.com/formancehq/payments/internal/models"
	api "github.com/formancehq/stack/libs/go-libs/api"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddAccountToPool mocks base method.
func (m *MockService) AddAccountToPool(ctx context.Context, poolID string, req *service.AddAccountToPoolRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountToPool", ctx, poolID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountToPool indicates an expected call of AddAccountToPool.
func (mr *MockServiceMockRecorder) AddAccountToPool(ctx, poolID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountToPool", reflect.TypeOf((*MockService)(nil).AddAccountToPool), ctx, poolID, req)
}

// CreatePayment mocks base method.
func (m *MockService) CreatePayment(ctx context.Context, req *service.CreatePaymentRequest) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, req)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockServiceMockRecorder) CreatePayment(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockService)(nil).CreatePayment), ctx, req)
}

// CreatePool mocks base method.
func (m *MockService) CreatePool(ctx context.Context, req *service.CreatePoolRequest) (*models.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", ctx, req)
	ret0, _ := ret[0].(*models.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockServiceMockRecorder) CreatePool(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockService)(nil).CreatePool), ctx, req)
}

// DeletePool mocks base method.
func (m *MockService) DeletePool(ctx context.Context, poolID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePool", ctx, poolID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePool indicates an expected call of DeletePool.
func (mr *MockServiceMockRecorder) DeletePool(ctx, poolID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePool", reflect.TypeOf((*MockService)(nil).DeletePool), ctx, poolID)
}

// GetAccount mocks base method.
func (m *MockService) GetAccount(ctx context.Context, id string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockServiceMockRecorder) GetAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockService)(nil).GetAccount), ctx, id)
}

// GetBankAccount mocks base method.
func (m *MockService) GetBankAccount(ctx context.Context, id uuid.UUID, expand bool) (*models.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccount", ctx, id, expand)
	ret0, _ := ret[0].(*models.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccount indicates an expected call of GetBankAccount.
func (mr *MockServiceMockRecorder) GetBankAccount(ctx, id, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccount", reflect.TypeOf((*MockService)(nil).GetBankAccount), ctx, id, expand)
}

// GetPayment mocks base method.
func (m *MockService) GetPayment(ctx context.Context, id string) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", ctx, id)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockServiceMockRecorder) GetPayment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockService)(nil).GetPayment), ctx, id)
}

// GetPool mocks base method.
func (m *MockService) GetPool(ctx context.Context, poolID string) (*models.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", ctx, poolID)
	ret0, _ := ret[0].(*models.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPool indicates an expected call of GetPool.
func (mr *MockServiceMockRecorder) GetPool(ctx, poolID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockService)(nil).GetPool), ctx, poolID)
}

// GetPoolBalance mocks base method.
func (m *MockService) GetPoolBalance(ctx context.Context, poolID, atTime string) (*service.GetPoolBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolBalance", ctx, poolID, atTime)
	ret0, _ := ret[0].(*service.GetPoolBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolBalance indicates an expected call of GetPoolBalance.
func (mr *MockServiceMockRecorder) GetPoolBalance(ctx, poolID, atTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolBalance", reflect.TypeOf((*MockService)(nil).GetPoolBalance), ctx, poolID, atTime)
}

// ListAccounts mocks base method.
func (m *MockService) ListAccounts(ctx context.Context, q storage.ListAccountsQuery) (*api.Cursor[models.Account], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, q)
	ret0, _ := ret[0].(*api.Cursor[models.Account])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockServiceMockRecorder) ListAccounts(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockService)(nil).ListAccounts), ctx, q)
}

// ListBalances mocks base method.
func (m *MockService) ListBalances(ctx context.Context, q storage.ListBalancesQuery) (*api.Cursor[models.Balance], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBalances", ctx, q)
	ret0, _ := ret[0].(*api.Cursor[models.Balance])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBalances indicates an expected call of ListBalances.
func (mr *MockServiceMockRecorder) ListBalances(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBalances", reflect.TypeOf((*MockService)(nil).ListBalances), ctx, q)
}

// ListBankAccounts mocks base method.
func (m *MockService) ListBankAccounts(ctx context.Context, a storage.ListBankAccountQuery) (*api.Cursor[models.BankAccount], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBankAccounts", ctx, a)
	ret0, _ := ret[0].(*api.Cursor[models.BankAccount])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBankAccounts indicates an expected call of ListBankAccounts.
func (mr *MockServiceMockRecorder) ListBankAccounts(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBankAccounts", reflect.TypeOf((*MockService)(nil).ListBankAccounts), ctx, a)
}

// ListPayments mocks base method.
func (m *MockService) ListPayments(ctx context.Context, q storage.ListPaymentsQuery) (*api.Cursor[models.Payment], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayments", ctx, q)
	ret0, _ := ret[0].(*api.Cursor[models.Payment])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayments indicates an expected call of ListPayments.
func (mr *MockServiceMockRecorder) ListPayments(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayments", reflect.TypeOf((*MockService)(nil).ListPayments), ctx, q)
}

// ListPools mocks base method.
func (m *MockService) ListPools(ctx context.Context, q storage.ListPoolsQuery) (*api.Cursor[models.Pool], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPools", ctx, q)
	ret0, _ := ret[0].(*api.Cursor[models.Pool])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPools indicates an expected call of ListPools.
func (mr *MockServiceMockRecorder) ListPools(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPools", reflect.TypeOf((*MockService)(nil).ListPools), ctx, q)
}

// ListTransferInitiations mocks base method.
func (m *MockService) ListTransferInitiations(ctx context.Context, q storage.ListTransferInitiationsQuery) (*api.Cursor[models.TransferInitiation], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransferInitiations", ctx, q)
	ret0, _ := ret[0].(*api.Cursor[models.TransferInitiation])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransferInitiations indicates an expected call of ListTransferInitiations.
func (mr *MockServiceMockRecorder) ListTransferInitiations(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransferInitiations", reflect.TypeOf((*MockService)(nil).ListTransferInitiations), ctx, q)
}

// Ping mocks base method.
func (m *MockService) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockServiceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockService)(nil).Ping))
}

// ReadTransferInitiation mocks base method.
func (m *MockService) ReadTransferInitiation(ctx context.Context, id models.TransferInitiationID) (*models.TransferInitiation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTransferInitiation", ctx, id)
	ret0, _ := ret[0].(*models.TransferInitiation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTransferInitiation indicates an expected call of ReadTransferInitiation.
func (mr *MockServiceMockRecorder) ReadTransferInitiation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTransferInitiation", reflect.TypeOf((*MockService)(nil).ReadTransferInitiation), ctx, id)
}

// RemoveAccountFromPool mocks base method.
func (m *MockService) RemoveAccountFromPool(ctx context.Context, poolID, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountFromPool", ctx, poolID, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccountFromPool indicates an expected call of RemoveAccountFromPool.
func (mr *MockServiceMockRecorder) RemoveAccountFromPool(ctx, poolID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountFromPool", reflect.TypeOf((*MockService)(nil).RemoveAccountFromPool), ctx, poolID, accountID)
}

// UpdatePaymentMetadata mocks base method.
func (m *MockService) UpdatePaymentMetadata(ctx context.Context, paymentID models.PaymentID, metadata map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentMetadata", ctx, paymentID, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentMetadata indicates an expected call of UpdatePaymentMetadata.
func (mr *MockServiceMockRecorder) UpdatePaymentMetadata(ctx, paymentID, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentMetadata", reflect.TypeOf((*MockService)(nil).UpdatePaymentMetadata), ctx, paymentID, metadata)
}

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// GetService mocks base method.
func (m *MockBackend) GetService() Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService")
	ret0, _ := ret[0].(Service)
	return ret0
}

// GetService indicates an expected call of GetService.
func (mr *MockBackendMockRecorder) GetService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockBackend)(nil).GetService))
}
