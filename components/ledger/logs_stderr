 Init 🚀
————————————————————————————————————————————————————————————————————————————————

           buildkitd | Connecting to tcp://kube.formance.dev:30123...
           buildkitd | ...Done
           buildkitd | Version github.com/earthly/buildkit v0.7.21 0b107b045b571b4f3184d6d975e567bd46d213bd
           buildkitd | Platforms: linux/amd64 (native) linux/amd64/v2 linux/amd64/v3 linux/386
           buildkitd | Utilization: 0 other builds, 0/20 op load
           buildkitd | GC stats: 14 GB cache, avg GC duration 0s, all-time GC duration 1.023s, last GC duration 0s, last cleared 0 B

 Build 🔧
————————————————————————————————————————————————————————————————————————————————

         alpine:3.18 | --> Load metadata alpine:3.18 linux/amd64
g/goreleaser-pro:v1.21.2-pro | --> Load metadata goreleaser/goreleaser-pro:v1.21.2-pro linux/amd64
     core+base-image | --> FROM alpine:3.18
     core+base-image | [----------] 100% FROM alpine:3.18[K
g/f/earthly:v0.5.2+goreleaser | --> FROM goreleaser/goreleaser-pro:v1.21.2-pro
g/f/earthly:v0.5.2+goreleaser | [----------] 100% FROM goreleaser/goreleaser-pro:v1.21.2-pro[K
  core+builder-image | *cached* --> RUN apk update && apk add go git curl make pkgconfig bash docker jq
  core+builder-image | *cached* --> RUN curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.53.3
  core+builder-image | *cached* --> COPY +goreleaser/* /usr/bin/goreleaser
  core+builder-image | *cached* --> RUN curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v0.94.0
       stack+sources | LOCATION=libs/go-libs
       stack+sources | *cached* --> COPY libs/go-libs out
            +sources | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
            +sources | *cached* --> WORKDIR src
            +sources | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
            +sources | *cached* --> COPY (LOCATION=libs/go-libs) stack+sources/out /src/components/ledger/libs
            +sources | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
            +sources | *cached* --> WORKDIR /src/components/ledger
            +sources | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
            +sources | *cached* --> COPY go.mod go.sum .
            +sources | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
            +sources | --> COPY --dir internal pkg cmd .
            +sources | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
            +sources | --> COPY main.go .
              +bench | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
              +bench | --> COPY +sources/* /src
              +bench | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
              +bench | --> WORKDIR /src/components/ledger/internal/storage/ledgerstore
              +bench | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
              +bench | --> mkdir /run
              +bench | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
              +bench | --> IF [ "$verbose" = "1" ]
  postgres:15-alpine | --> Load metadata postgres:15-alpine linux/amd64
  postgres:15-alpine | --> DOCKER PULL postgres:15-alpine
  postgres:15-alpine | [          ]   0% resolve docker.io/library/postgres:15-alpine@sha256:793bbc22cf8dfc7962c006e8e326d19e60ad756d1185ed875e25d4494b16dd66[K
  postgres:15-alpine | [A[----------] 100% resolve docker.io/library/postgres:15-alpine@sha256:793bbc22cf8dfc7962c006e8e326d19e60ad756d1185ed875e25d4494b16dd66[K
              output | --> exporting outputs
              output | [          ]   0% transferring docker.io/library/postgres:15-alpine[K
              +bench | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
              +bench | --> WITH DOCKER (install deps)
              +bench | GOPROXY=http://kube.formance.dev:30222 REPOSITORY=kube.formance.dev:30112 bench=List/aggregating_balance_filtering_on_account_address_ benchTime=5s count=10 numberOfTransactions=100000 testTimeout=68m tld=formance.dev user=gfyrag verbose=1
              +bench | --> WITH DOCKER RUN --privileged go test -timeout $testTimeout -bench=$bench -run ^$ $additionalArgs -benchtime=$benchTime -count=$count -transactions=$numberOfTransactions | tee -a /results.txt
              +bench | Starting dockerd with data root /var/earthly/dind/d275dfbfb94ee3df39398ba696d1ad257ca99352106a45699a73d1b7902647db/tmp.mjCNOC
              +bench | Loading images from BuildKit via embedded registry...
              +bench | Pulling 172.30.0.1:8371/sess-f380ztr0w4z77c8r4qfvqjgp3:img-0 and retagging as postgres:15-alpine
              +bench | 172.30.0.1:8371/sess-f380ztr0w4z77c8r4qfvqjgp3:img-0
              +bench | Untagged: 172.30.0.1:8371/sess-f380ztr0w4z77c8r4qfvqjgp3:img-0
              +bench | Untagged: 172.30.0.1:xxxxx@sha256:10fce4e1fa0849106df54150908ae776cb53716be32075acad1dab71f96438b5
              +bench | Loading images done in 4 ms
              +bench | goos: linux
              +bench | goarch: amd64
              +bench | pkg: github.com/formancehq/ledger/internal/storage/ledgerstore
              +bench | cpu: AMD Ryzen 5 3600 6-Core Processor              
              +bench | BenchmarkList
              +bench | time="10-11-23118 10:44:20.182015" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:20.182229" level=debug msg="set search_path = \"d241d90f-36eb-42d0-a171-907d1447debc\"" component=bun duration="129µs" operation=set
              +bench | time="10-11-23118 10:44:20.182406" level=debug msg="create schema if not exists \"d241d90f-36eb-42d0-a171-907d1447debc\"" component=bun duration="155µs" operation=create
              +bench | time="10-11-23118 10:44:20.197997" level=debug msg="create table if not exists goose_db_version (\n\t\tid serial primary key,\n\t\tversion_id bigint not null,\n\t\tis_applied boolean not null,\n\t\ttstamp timestamp default now()\n\t);" component=bun duration=15.563ms operation=create
              +bench | time="10-11-23118 10:44:20.203436" level=debug msg="select max(version_id) from \"goose_db_version\";" component=bun duration=5.397ms operation=select
              +bench | time="10-11-23118 10:44:20.203746" level=debug msg="INSERT INTO \"goose_db_version\" (version_id, is_applied, tstamp) VALUES (0, TRUE, '2023-11-23 10:44:20.203449+00:00')" component=bun duration="280µs" operation=INSERT
              +bench | time="10-11-23118 10:44:20.204168" level=debug msg="select max(version_id) from \"goose_db_version\";" component=bun duration="399µs" operation=select
              +bench | Result  (cost=9.36..9.37 rows=1 width=1) (actual time=0.007..0.008 rows=1 loops=1)
              +bench |   Output: $0
              +bench |   InitPlan 1 (returns $0)
              +bench |     ->  Nested Loop  (cost=0.27..9.36 rows=1 width=0) (actual time=0.006..0.007 rows=0 loops=1)
              +bench |           Inner Unique: true
              +bench |           Join Filter: (c.relnamespace = n.oid)
              +bench |           ->  Index Scan using pg_class_relname_nsp_index on pg_catalog.pg_class c  (cost=0.27..8.29 rows=1 width=8) (actual time=0.006..0.006 rows=0 loops=1)
              +bench |                 Output: c.oid, c.relname, c.relnamespace, c.reltype, c.reloftype, c.relowner, c.relam, c.relfilenode, c.reltablespace, c.relpages, c.reltuples, c.relallvisible, c.reltoastrelid, c.relhasindex, c.relisshared, c.relpersistence, c.relkind, c.relnatts, c.relchecks, c.relhasrules, c.relhastriggers, c.relhassubclass, c.relrowsecurity, c.relforcerowsecurity, c.relispopulated, c.relreplident, c.relispartition, c.relrewrite, c.relfrozenxid, c.relminmxid, c.relacl, c.reloptions, c.relpartbound
              +bench |                 Index Cond: (c.relname = 'log'::name)
              +bench |                 Filter: (c.relkind = ANY ('{r,p}'::"char"[]))
              +bench |           ->  Seq Scan on pg_catalog.pg_namespace n  (cost=0.00..1.05 rows=1 width=4) (never executed)
              +bench |                 Output: n.oid, n.nspname, n.nspowner, n.nspacl
              +bench |                 Filter: (n.nspname = 'd241d90f-36eb-42d0-a171-907d1447debc'::name)
              +bench | Planning Time: 1.303 ms
              +bench | Execution Time: 0.124 ms
              +bench | time="10-11-23118 10:44:20.211202" level=debug msg="select exists (\n\t\t\t\t\tselect from pg_tables\n\t\t\t\t\twhere schemaname = 'd241d90f-36eb-42d0-a171-907d1447debc' and tablename  = 'log'\n\t\t\t\t)" component=bun duration=7.007ms operation=select
              +bench | time="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index trans
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns se
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns setof transactions\n    language sql\n    stable\nas $$\n    select *\n    from transactions t\n    where (_before is null or t.timestamp <= _before) and t.id = _id\n    order by id desc\n    limit 1;\n$$;\n\n-- a simple 'select distinct asset from moves' would be more simple\n-- but Postgres is extremely inefficient with distinct\n-- so the query implementation use a \"hack\" to emulate skip scan feature which Postgres lack natively\n-- see https://wiki.postgresql.org/wiki/Loose_indexscan for more information\ncreate function get_all_assets()\n    returns setof varchar\n    language sql\nas $$\n    with recursive t as (\n        select min(asset) as asset\n        from moves\n        union all\n        select (\n            select min(asset)\n            from moves\n            where asset > t.asset\n        )\n        from t\n        where t.asset is not null\n    )\n    select asset from t where asset is not null\n    union all\n    select null where exists(select 1 from moves where asset is null)\n$$;\n\ncr
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns setof transactions\n    language sql\n    stable\nas $$\n    select *\n    from transactions t\n    where (_before is null or t.timestamp <= _before) and t.id = _id\n    order by id desc\n    limit 1;\n$$;\n\n-- a simple 'select distinct asset from moves' would be more simple\n-- but Postgres is extremely inefficient with distinct\n-- so the query implementation use a \"hack\" to emulate skip scan feature which Postgres lack natively\n-- see https://wiki.postgresql.org/wiki/Loose_indexscan for more information\ncreate function get_all_assets()\n    returns setof varchar\n    language sql\nas $$\n    with recursive t as (\n        select min(asset) as asset\n        from moves\n        union all\n        select (\n            select min(asset)\n            from moves\n            where asset > t.asset\n        )\n        from t\n        where t.asset is not null\n    )\n    select asset from t where asset is not null\n    union all\n    select null where exists(select 1 from moves where asset is null)\n$$;\n\ncreate function get_latest_move_for_account_and_asset(_account_address varchar, _asset varchar, _before timestamp default null)\n    returns setof moves\n    language sql\n    stable\nas $$\n    select *\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account_address and s.asset = _asset\n    order by effective_date desc, seq desc\n    limit 1;\n$$;\n\ncreate function update_account_metadata(_address varchar, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    select insert_new_account(_address, _date);\n\n    insert into accounts_metadata (address, metadata, date, revision)\n    (\n        select _address, accounts_metadata.metadata || _metadata, _date, accounts_metadata.revision + 1\n        from accounts_metadata\n        where address = _address\n        order by revision desc\n        limit 1\n    )\n    union all -- if no metdata\n    select _address, _metadata, _date, 0\n    limit 1;\n$$;\n\ncreate function delete_account_metadata(_address varchar, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into accounts_metadata (address, metadata, date, revision)\n    select _address, accounts_metadata.metadata - _key, _date, accounts_metadata.revision + 1\n    from accounts_metadata\n    where address = _address\n    order by revision desc\n    limit 1\n$$;\n\ncreate function update_transaction_metadata(_id numeric, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    (\n        select originalTX.transaction_id,\n               originalTX.metadata || _metadata,\n               _date,\n                originalTX.revision + 1\n        from transactions_metadata originalTX\n        where transaction_id = _id\n        order by revision desc\n        limit 1\n    )\n    union all (\n        select _id, '{}'::jsonb, null, -1\n    )\n    limit 1\n$$;\n\ncreate function delete_transaction_metada
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns setof transactions\n    language sql\n    stable\nas $$\n    select *\n    from transactions t\n    where (_before is null or t.timestamp <= _before) and t.id = _id\n    order by id desc\n    limit 1;\n$$;\n\n-- a simple 'select distinct asset from moves' would be more simple\n-- but Postgres is extremely inefficient with distinct\n-- so the query implementation use a \"hack\" to emulate skip scan feature which Postgres lack natively\n-- see https://wiki.postgresql.org/wiki/Loose_indexscan for more information\ncreate function get_all_assets()\n    returns setof varchar\n    language sql\nas $$\n    with recursive t as (\n        select min(asset) as asset\n        from moves\n        union all\n        select (\n            select min(asset)\n            from moves\n            where asset > t.asset\n        )\n        from t\n        where t.asset is not null\n    )\n    select asset from t where asset is not null\n    union all\n    select null where exists(select 1 from moves where asset is null)\n$$;\n\ncreate function get_latest_move_for_account_and_asset(_account_address varchar, _asset varchar, _before timestamp default null)\n    returns setof moves\n    language sql\n    stable\nas $$\n    select *\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account_address and s.asset = _asset\n    order by effective_date desc, seq desc\n    limit 1;\n$$;\n\ncreate function update_account_metadata(_address varchar, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    select insert_new_account(_address, _date);\n\n    insert into accounts_metadata (address, metadata, date, revision)\n    (\n        select _address, accounts_metadata.metadata || _metadata, _date, accounts_metadata.revision + 1\n        from accounts_metadata\n        where address = _address\n        order by revision desc\n        limit 1\n    )\n    union all -- if no metdata\n    select _address, _metadata, _date, 0\n    limit 1;\n$$;\n\ncreate function delete_account_metadata(_address varchar, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into accounts_metadata (address, metadata, date, revision)\n    select _address, accounts_metadata.metadata - _key, _date, accounts_metadata.revision + 1\n    from accounts_metadata\n    where address = _address\n    order by revision desc\n    limit 1\n$$;\n\ncreate function update_transaction_metadata(_id numeric, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    (\n        select originalTX.transaction_id,\n               originalTX.metadata || _metadata,\n               _date,\n                originalTX.revision + 1\n        from transactions_metadata originalTX\n        where transaction_id = _id\n        order by revision desc\n        limit 1\n    )\n    union all (\n        select _id, '{}'::jsonb, null, -1\n    )\n    limit 1\n$$;\n\ncreate function delete_transaction_metadata(_id numeric, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    select originalTX.transaction_id,\n           originalTX.metadata - _key,\n           _date,\n           originalTX.revision + 1\n    from transactions_metadata originalTX\n    where transaction_id = _id\n    order by revision desc\n    limit 1;\n$$;\n\ncreate function revert_transaction(_id numeric, _date timestamp)\n    returns void\n    language sql\nas $$\n    update transactions\n    set reverted_at = _date\n    where id = _id;\n$$;\n\ncreate or replace function insert_move(_transaction_id numeric, _insertion_date timestamp without time zone,\n    _effective_date timestamp without time zone, _account_address varchar, _asset varchar, _amount numeric, _is_source bool, _new_account bool)\n    returns void\n    language plpgsql\nas $$\n    declare\n        _post_commit_volumes volumes = (0, 0)::volumes;\n        _effective_post_commit_volumes volumes = (0, 0)::volumes;\n        _seq numeric;\n    begin\n\n        -- todo: lock if we enable parallelism\n        -- perform *\n        -- from accounts\n        -- where address = _account_address\n        -- for update;\n\n        if not _new_account then\n            select (post_commit_volumes).inputs, (post_commit_volumes).outputs into _post_commit_volumes\n            from moves\n            where account_address = _account_address\n                and asset = _asset\n            order by seq desc\n            limit 1;\n\n            if not found then\n                _post_commit_volumes = (0, 0)::volumes;\n                _effective_post_commit_volumes = (0, 0)::volumes;\n            else\n                select (post_commit_effective_volumes).inputs, (post_commit_effective_volumes).outputs into _effective_post_commit_volumes\n                from moves\n                where account_address = _account_address\n                    and asset = _asset and effective_date <= _effective_date
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns setof transactions\n    language sql\n    stable\nas $$\n    select *\n    from transactions t\n    where (_before is null or t.timestamp <= _before) and t.id = _id\n    order by id desc\n    limit 1;\n$$;\n\n-- a simple 'select distinct asset from moves' would be more simple\n-- but Postgres is extremely inefficient with distinct\n-- so the query implementation use a \"hack\" to emulate skip scan feature which Postgres lack natively\n-- see https://wiki.postgresql.org/wiki/Loose_indexscan for more information\ncreate function get_all_assets()\n    returns setof varchar\n    language sql\nas $$\n    with recursive t as (\n        select min(asset) as asset\n        from moves\n        union all\n        select (\n            select min(asset)\n            from moves\n            where asset > t.asset\n        )\n        from t\n        where t.asset is not null\n    )\n    select asset from t where asset is not null\n    union all\n    select null where exists(select 1 from moves where asset is null)\n$$;\n\ncreate function get_latest_move_for_account_and_asset(_account_address varchar, _asset varchar, _before timestamp default null)\n    returns setof moves\n    language sql\n    stable\nas $$\n    select *\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account_address and s.asset = _asset\n    order by effective_date desc, seq desc\n    limit 1;\n$$;\n\ncreate function update_account_metadata(_address varchar, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    select insert_new_account(_address, _date);\n\n    insert into accounts_metadata (address, metadata, date, revision)\n    (\n        select _address, accounts_metadata.metadata || _metadata, _date, accounts_metadata.revision + 1\n        from accounts_metadata\n        where address = _address\n        order by revision desc\n        limit 1\n    )\n    union all -- if no metdata\n    select _address, _metadata, _date, 0\n    limit 1;\n$$;\n\ncreate function delete_account_metadata(_address varchar, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into accounts_metadata (address, metadata, date, revision)\n    select _address, accounts_metadata.metadata - _key, _date, accounts_metadata.revision + 1\n    from accounts_metadata\n    where address = _address\n    order by revision desc\n    limit 1\n$$;\n\ncreate function update_transaction_metadata(_id numeric, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    (\n        select originalTX.transaction_id,\n               originalTX.metadata || _metadata,\n               _date,\n                originalTX.revision + 1\n        from transactions_metadata originalTX\n        where transaction_id = _id\n        order by revision desc\n        limit 1\n    )\n    union all (\n        select _id, '{}'::jsonb, null, -1\n    )\n    limit 1\n$$;\n\ncreate function delete_transaction_metadata(_id numeric, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    select originalTX.transaction_id,\n           originalTX.metadata - _key,\n           _date,\n           originalTX.revision + 1\n    from transactions_metadata originalTX\n    where transaction_id = _id\n    order by revision desc\n    limit 1;\n$$;\n\ncreate function revert_transaction(_id numeric, _date timestamp)\n    returns void\n    language sql\nas $$\n    update transactions\n    set reverted_at = _date\n    where id = _id;\n$$;\n\ncreate or replace function insert_move(_transaction_id numeric, _insertion_date timestamp without time zone,\n    _effective_date timestamp without time zone, _account_address varchar, _asset varchar, _amount numeric, _is_source bool, _new_account bool)\n    returns void\n    language plpgsql\nas $$\n    declare\n        _post_commit_volumes volumes = (0, 0)::volumes;\n        _effective_post_commit_volumes volumes = (0, 0)::volumes;\n        _seq numeric;\n    begin\n\n        -- todo: lock if we enable parallelism\n        -- perform *\n        -- from accounts\n        -- where address = _account_address\n        -- for update;\n\n        if not _new_account then\n            select (post_commit_volumes).inputs, (post_commit_volumes).outputs into _post_commit_volumes\n            from moves\n            where account_address = _account_address\n                and asset = _asset\n            order by seq desc\n            limit 1;\n\n            if not found then\n                _post_commit_volumes = (0, 0)::volumes;\n                _effective_post_commit_volumes = (0, 0)::volumes;\n            else\n                select (post_commit_effective_volumes).inputs, (post_commit_effective_volumes).outputs into _effective_post_commit_volumes\n                from moves\n                where account_address = _account_address\n                    and asset = _asset and effective_date <= _effective_date\n                order by effective_date desc, seq desc\n                limit 1;\n            end if;\n        end if;\n\n        if _is_source then\n            _post_commit_volumes.outputs = _post_commit_volumes.outputs + _amount;\n            _effective_post_commit_volumes.outputs = _effective_post_commit_volumes.outputs + _amount;\n        else\n            _post_commit_volumes.inputs = _post_commit_volumes.inputs + _amount;\n            _effective_post_commit_volumes.inputs = _effective_post_commit_volumes.inputs + _amount;\n        end if;\n\n        insert into moves (\n            insertion_date,\n            effective_date,\n            account_address,\n            asset,\n            transaction_id,\n            amount,\n            is_source,\n            account_address_array,\n            post_commit_volumes,\n            post_commit_effective_volumes\n        ) values (_insertion_date, _effective_date, _account_address, _asset, _transaction_id,\n                  _amount, _is_source, (select 
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns setof transactions\n    language sql\n    stable\nas $$\n    select *\n    from transactions t\n    where (_before is null or t.timestamp <= _before) and t.id = _id\n    order by id desc\n    limit 1;\n$$;\n\n-- a simple 'select distinct asset from moves' would be more simple\n-- but Postgres is extremely inefficient with distinct\n-- so the query implementation use a \"hack\" to emulate skip scan feature which Postgres lack natively\n-- see https://wiki.postgresql.org/wiki/Loose_indexscan for more information\ncreate function get_all_assets()\n    returns setof varchar\n    language sql\nas $$\n    with recursive t as (\n        select min(asset) as asset\n        from moves\n        union all\n        select (\n            select min(asset)\n            from moves\n            where asset > t.asset\n        )\n        from t\n        where t.asset is not null\n    )\n    select asset from t where asset is not null\n    union all\n    select null where exists(select 1 from moves where asset is null)\n$$;\n\ncreate function get_latest_move_for_account_and_asset(_account_address varchar, _asset varchar, _before timestamp default null)\n    returns setof moves\n    language sql\n    stable\nas $$\n    select *\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account_address and s.asset = _asset\n    order by effective_date desc, seq desc\n    limit 1;\n$$;\n\ncreate function update_account_metadata(_address varchar, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    select insert_new_account(_address, _date);\n\n    insert into accounts_metadata (address, metadata, date, revision)\n    (\n        select _address, accounts_metadata.metadata || _metadata, _date, accounts_metadata.revision + 1\n        from accounts_metadata\n        where address = _address\n        order by revision desc\n        limit 1\n    )\n    union all -- if no metdata\n    select _address, _metadata, _date, 0\n    limit 1;\n$$;\n\ncreate function delete_account_metadata(_address varchar, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into accounts_metadata (address, metadata, date, revision)\n    select _address, accounts_metadata.metadata - _key, _date, accounts_metadata.revision + 1\n    from accounts_metadata\n    where address = _address\n    order by revision desc\n    limit 1\n$$;\n\ncreate function update_transaction_metadata(_id numeric, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    (\n        select originalTX.transaction_id,\n               originalTX.metadata || _metadata,\n               _date,\n                originalTX.revision + 1\n        from transactions_metadata originalTX\n        where transaction_id = _id\n        order by revision desc\n        limit 1\n    )\n    union all (\n        select _id, '{}'::jsonb, null, -1\n    )\n    limit 1\n$$;\n\ncreate function delete_transaction_metadata(_id numeric, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    select originalTX.transaction_id,\n           originalTX.metadata - _key,\n           _date,\n           originalTX.revision + 1\n    from transactions_metadata originalTX\n    where transaction_id = _id\n    order by revision desc\n    limit 1;\n$$;\n\ncreate function revert_transaction(_id numeric, _date timestamp)\n    returns void\n    language sql\nas $$\n    update transactions\n    set reverted_at = _date\n    where id = _id;\n$$;\n\ncreate or replace function insert_move(_transaction_id numeric, _insertion_date timestamp without time zone,\n    _effective_date timestamp without time zone, _account_address varchar, _asset varchar, _amount numeric, _is_source bool, _new_account bool)\n    returns void\n    language plpgsql\nas $$\n    declare\n        _post_commit_volumes volumes = (0, 0)::volumes;\n        _effective_post_commit_volumes volumes = (0, 0)::volumes;\n        _seq numeric;\n    begin\n\n        -- todo: lock if we enable parallelism\n        -- perform *\n        -- from accounts\n        -- where address = _account_address\n        -- for update;\n\n        if not _new_account then\n            select (post_commit_volumes).inputs, (post_commit_volumes).outputs into _post_commit_volumes\n            from moves\n            where account_address = _account_address\n                and asset = _asset\n            order by seq desc\n            limit 1;\n\n            if not found then\n                _post_commit_volumes = (0, 0)::volumes;\n                _effective_post_commit_volumes = (0, 0)::volumes;\n            else\n                select (post_commit_effective_volumes).inputs, (post_commit_effective_volumes).outputs into _effective_post_commit_volumes\n                from moves\n                where account_address = _account_address\n                    and asset = _asset and effective_date <= _effective_date\n                order by effective_date desc, seq desc\n                limit 1;\n            end if;\n        end if;\n\n        if _is_source then\n            _post_commit_volumes.outputs = _post_commit_volumes.outputs + _amount;\n            _effective_post_commit_volumes.outputs = _effective_post_commit_volumes.outputs + _amount;\n        else\n            _post_commit_volumes.inputs = _post_commit_volumes.inputs + _amount;\n            _effective_post_commit_volumes.inputs = _effective_post_commit_volumes.inputs + _amount;\n        end if;\n\n        insert into moves (\n            insertion_date,\n            effective_date,\n            account_address,\n            asset,\n            transaction_id,\n            amount,\n            is_source,\n            account_address_array,\n            post_commit_volumes,\n            post_commit_effective_volumes\n        ) values (_insertion_date, _effective_date, _account_address, _asset, _transaction_id,\n                  _amount, _is_source, (select to_json(string_to_array(_account_address, ':'))),\n                  _post_commit_volumes, _effective_post_commit_volumes)\n        returning seq into _seq;\n\n        if not _new_account then\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date > _effective_date;\n\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date = _effective_date and seq 
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns setof transactions\n    language sql\n    stable\nas $$\n    select *\n    from transactions t\n    where (_before is null or t.timestamp <= _before) and t.id = _id\n    order by id desc\n    limit 1;\n$$;\n\n-- a simple 'select distinct asset from moves' would be more simple\n-- but Postgres is extremely inefficient with distinct\n-- so the query implementation use a \"hack\" to emulate skip scan feature which Postgres lack natively\n-- see https://wiki.postgresql.org/wiki/Loose_indexscan for more information\ncreate function get_all_assets()\n    returns setof varchar\n    language sql\nas $$\n    with recursive t as (\n        select min(asset) as asset\n        from moves\n        union all\n        select (\n            select min(asset)\n            from moves\n            where asset > t.asset\n        )\n        from t\n        where t.asset is not null\n    )\n    select asset from t where asset is not null\n    union all\n    select null where exists(select 1 from moves where asset is null)\n$$;\n\ncreate function get_latest_move_for_account_and_asset(_account_address varchar, _asset varchar, _before timestamp default null)\n    returns setof moves\n    language sql\n    stable\nas $$\n    select *\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account_address and s.asset = _asset\n    order by effective_date desc, seq desc\n    limit 1;\n$$;\n\ncreate function update_account_metadata(_address varchar, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    select insert_new_account(_address, _date);\n\n    insert into accounts_metadata (address, metadata, date, revision)\n    (\n        select _address, accounts_metadata.metadata || _metadata, _date, accounts_metadata.revision + 1\n        from accounts_metadata\n        where address = _address\n        order by revision desc\n        limit 1\n    )\n    union all -- if no metdata\n    select _address, _metadata, _date, 0\n    limit 1;\n$$;\n\ncreate function delete_account_metadata(_address varchar, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into accounts_metadata (address, metadata, date, revision)\n    select _address, accounts_metadata.metadata - _key, _date, accounts_metadata.revision + 1\n    from accounts_metadata\n    where address = _address\n    order by revision desc\n    limit 1\n$$;\n\ncreate function update_transaction_metadata(_id numeric, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    (\n        select originalTX.transaction_id,\n               originalTX.metadata || _metadata,\n               _date,\n                originalTX.revision + 1\n        from transactions_metadata originalTX\n        where transaction_id = _id\n        order by revision desc\n        limit 1\n    )\n    union all (\n        select _id, '{}'::jsonb, null, -1\n    )\n    limit 1\n$$;\n\ncreate function delete_transaction_metadata(_id numeric, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    select originalTX.transaction_id,\n           originalTX.metadata - _key,\n           _date,\n           originalTX.revision + 1\n    from transactions_metadata originalTX\n    where transaction_id = _id\n    order by revision desc\n    limit 1;\n$$;\n\ncreate function revert_transaction(_id numeric, _date timestamp)\n    returns void\n    language sql\nas $$\n    update transactions\n    set reverted_at = _date\n    where id = _id;\n$$;\n\ncreate or replace function insert_move(_transaction_id numeric, _insertion_date timestamp without time zone,\n    _effective_date timestamp without time zone, _account_address varchar, _asset varchar, _amount numeric, _is_source bool, _new_account bool)\n    returns void\n    language plpgsql\nas $$\n    declare\n        _post_commit_volumes volumes = (0, 0)::volumes;\n        _effective_post_commit_volumes volumes = (0, 0)::volumes;\n        _seq numeric;\n    begin\n\n        -- todo: lock if we enable parallelism\n        -- perform *\n        -- from accounts\n        -- where address = _account_address\n        -- for update;\n\n        if not _new_account then\n            select (post_commit_volumes).inputs, (post_commit_volumes).outputs into _post_commit_volumes\n            from moves\n            where account_address = _account_address\n                and asset = _asset\n            order by seq desc\n            limit 1;\n\n            if not found then\n                _post_commit_volumes = (0, 0)::volumes;\n                _effective_post_commit_volumes = (0, 0)::volumes;\n            else\n                select (post_commit_effective_volumes).inputs, (post_commit_effective_volumes).outputs into _effective_post_commit_volumes\n                from moves\n                where account_address = _account_address\n                    and asset = _asset and effective_date <= _effective_date\n                order by effective_date desc, seq desc\n                limit 1;\n            end if;\n        end if;\n\n        if _is_source then\n            _post_commit_volumes.outputs = _post_commit_volumes.outputs + _amount;\n            _effective_post_commit_volumes.outputs = _effective_post_commit_volumes.outputs + _amount;\n        else\n            _post_commit_volumes.inputs = _post_commit_volumes.inputs + _amount;\n            _effective_post_commit_volumes.inputs = _effective_post_commit_volumes.inputs + _amount;\n        end if;\n\n        insert into moves (\n            insertion_date,\n            effective_date,\n            account_address,\n            asset,\n            transaction_id,\n            amount,\n            is_source,\n            account_address_array,\n            post_commit_volumes,\n            post_commit_effective_volumes\n        ) values (_insertion_date, _effective_date, _account_address, _asset, _transaction_id,\n                  _amount, _is_source, (select to_json(string_to_array(_account_address, ':'))),\n                  _post_commit_volumes, _effective_post_commit_volumes)\n        returning seq into _seq;\n\n        if not _new_account then\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date > _effective_date;\n\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date = _effective_date and seq > _seq;\n        end if;\n    end;\n$$;\n\ncreate function insert_posting(_transaction_id numeric, _insertion_date timestamp without time zone, _effective_date timestamp without time zone, posting jsonb)\n    returns void\n    language plpgsql\nas $$\n    declare\n        source_created bool;\n        destination_created bool;\n    begin\n        select insert_new_account(posting->>'source', _insertion_date) into source_created;\n        select insert_new_account(posting->>'destination', _insertion_date) into destination_created;\n\n        -- todo: sometimes the balance is known at commit time (for sources != world), we need to forward the value to populate the pre_commit_aggregated_input and output\n        perform insert_move(_transaction_id, _insertion_date, _effective_date,\n            posting->>'source', posting->>'asset', (posting->>'amount')::numeric, true, source_created);\n        perform insert_move(_transaction_id, _insertion_date, _effective_date,\n            posting->>'destination', posting->>
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns setof transactions\n    language sql\n    stable\nas $$\n    select *\n    from transactions t\n    where (_before is null or t.timestamp <= _before) and t.id = _id\n    order by id desc\n    limit 1;\n$$;\n\n-- a simple 'select distinct asset from moves' would be more simple\n-- but Postgres is extremely inefficient with distinct\n-- so the query implementation use a \"hack\" to emulate skip scan feature which Postgres lack natively\n-- see https://wiki.postgresql.org/wiki/Loose_indexscan for more information\ncreate function get_all_assets()\n    returns setof varchar\n    language sql\nas $$\n    with recursive t as (\n        select min(asset) as asset\n        from moves\n        union all\n        select (\n            select min(asset)\n            from moves\n            where asset > t.asset\n        )\n        from t\n        where t.asset is not null\n    )\n    select asset from t where asset is not null\n    union all\n    select null where exists(select 1 from moves where asset is null)\n$$;\n\ncreate function get_latest_move_for_account_and_asset(_account_address varchar, _asset varchar, _before timestamp default null)\n    returns setof moves\n    language sql\n    stable\nas $$\n    select *\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account_address and s.asset = _asset\n    order by effective_date desc, seq desc\n    limit 1;\n$$;\n\ncreate function update_account_metadata(_address varchar, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    select insert_new_account(_address, _date);\n\n    insert into accounts_metadata (address, metadata, date, revision)\n    (\n        select _address, accounts_metadata.metadata || _metadata, _date, accounts_metadata.revision + 1\n        from accounts_metadata\n        where address = _address\n        order by revision desc\n        limit 1\n    )\n    union all -- if no metdata\n    select _address, _metadata, _date, 0\n    limit 1;\n$$;\n\ncreate function delete_account_metadata(_address varchar, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into accounts_metadata (address, metadata, date, revision)\n    select _address, accounts_metadata.metadata - _key, _date, accounts_metadata.revision + 1\n    from accounts_metadata\n    where address = _address\n    order by revision desc\n    limit 1\n$$;\n\ncreate function update_transaction_metadata(_id numeric, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    (\n        select originalTX.transaction_id,\n               originalTX.metadata || _metadata,\n               _date,\n                originalTX.revision + 1\n        from transactions_metadata originalTX\n        where transaction_id = _id\n        order by revision desc\n        limit 1\n    )\n    union all (\n        select _id, '{}'::jsonb, null, -1\n    )\n    limit 1\n$$;\n\ncreate function delete_transaction_metadata(_id numeric, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    select originalTX.transaction_id,\n           originalTX.metadata - _key,\n           _date,\n           originalTX.revision + 1\n    from transactions_metadata originalTX\n    where transaction_id = _id\n    order by revision desc\n    limit 1;\n$$;\n\ncreate function revert_transaction(_id numeric, _date timestamp)\n    returns void\n    language sql\nas $$\n    update transactions\n    set reverted_at = _date\n    where id = _id;\n$$;\n\ncreate or replace function insert_move(_transaction_id numeric, _insertion_date timestamp without time zone,\n    _effective_date timestamp without time zone, _account_address varchar, _asset varchar, _amount numeric, _is_source bool, _new_account bool)\n    returns void\n    language plpgsql\nas $$\n    declare\n        _post_commit_volumes volumes = (0, 0)::volumes;\n        _effective_post_commit_volumes volumes = (0, 0)::volumes;\n        _seq numeric;\n    begin\n\n        -- todo: lock if we enable parallelism\n        -- perform *\n        -- from accounts\n        -- where address = _account_address\n        -- for update;\n\n        if not _new_account then\n            select (post_commit_volumes).inputs, (post_commit_volumes).outputs into _post_commit_volumes\n            from moves\n            where account_address = _account_address\n                and asset = _asset\n            order by seq desc\n            limit 1;\n\n            if not found then\n                _post_commit_volumes = (0, 0)::volumes;\n                _effective_post_commit_volumes = (0, 0)::volumes;\n            else\n                select (post_commit_effective_volumes).inputs, (post_commit_effective_volumes).outputs into _effective_post_commit_volumes\n                from moves\n                where account_address = _account_address\n                    and asset = _asset and effective_date <= _effective_date\n                order by effective_date desc, seq desc\n                limit 1;\n            end if;\n        end if;\n\n        if _is_source then\n            _post_commit_volumes.outputs = _post_commit_volumes.outputs + _amount;\n            _effective_post_commit_volumes.outputs = _effective_post_commit_volumes.outputs + _amount;\n        else\n            _post_commit_volumes.inputs = _post_commit_volumes.inputs + _amount;\n            _effective_post_commit_volumes.inputs = _effective_post_commit_volumes.inputs + _amount;\n        end if;\n\n        insert into moves (\n            insertion_date,\n            effective_date,\n            account_address,\n            asset,\n            transaction_id,\n            amount,\n            is_source,\n            account_address_array,\n            post_commit_volumes,\n            post_commit_effective_volumes\n        ) values (_insertion_date, _effective_date, _account_address, _asset, _transaction_id,\n                  _amount, _is_source, (select to_json(string_to_array(_account_address, ':'))),\n                  _post_commit_volumes, _effective_post_commit_volumes)\n        returning seq into _seq;\n\n        if not _new_account then\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date > _effective_date;\n\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date = _effective_date and seq > _seq;\n        end if;\n    end;\n$$;\n\ncreate function insert_posting(_transaction_id numeric, _insertion_date timestamp without time zone, _effective_date timestamp without time zone, posting jsonb)\n    returns void\n    language plpgsql\nas $$\n    declare\n        source_created bool;\n        destination_created bool;\n    begin\n        select insert_new_account(posting->>'source', _insertion_date) into source_created;\n        select insert_new_account(posting->>'destination', _insertion_date) into destination_created;\n\n        -- todo: sometimes the balance is known at commit time (for sources != world), we need to forward the value to populate the pre_commit_aggregated_input and output\n        perform insert_move(_transaction_id, _insertion_date, _effective_date,\n            posting->>'source', posting->>'asset', (posting->>'amount')::numeric, true, source_created);\n        perform insert_move(_transaction_id, _insertion_date, _effective_date,\n            posting->>'destination', posting->>'asset', (posting->>'amount')::numeric, false, destination_created);\n    end;\n$$;\n\n-- todo: maybe we could avoid plpgsql functions\ncreate function insert_transaction(data jsonb, _date timestamp without time zone)\n    returns void\n    language plpgsql\nas $$\n    declare\n        posting jsonb;\n    begin\n        insert into transactions (id, timestamp, reference, postings, sources, destinations, sources_arrays, destinations_arrays)\n        values ((data->>'id')::numeric,\n                (data->>'timestamp')::timestamp without time zone,\n                data->>'reference',\n                jsonb_pretty(data->'postings'),\n                (\n\t                select to_jsonb(array_agg(v->>'source')) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(v->>'destination')) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(explode_address(v->>'source'))) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(explode_address(v->>'destination'))) as value\n\t                from jsonb_array_elements(data->'postings') v\n                )\n        );\n\n        for posting in (select jsonb_array_elements(data->'postings')) loop\n            -- todo: sometimes the balance is known at commit time (for sources != world), we need to forward the value to populate the pre_commit_aggregated_input and output\n            perform insert_posting((data->>'id')::numeric, _date, (data->>'timestamp')::timestamp without time zone, posting);\n        end loop;\n\n        if data->'metadata' is not null and data->>'metadata' <> '()' then\n            insert into transactions_metadata (transaction_id, revision, date, metadata) values (\n                (data->>'id')::numeric,\n                0,\n                (data->>'timestamp')::timestamp without time zone,\n                coalesce(data->'metadata', '{}'::jsonb)\n            );\n        end if;\n    end\n$$;\n\ncreate function handle_log() returns trigger\n  security definer\n  language plpgsql\nas $$\n  declare\n    _key varchar;\n    _value jsonb;\n  begin\n    if new.type = 'NEW_TRANSACTION' then\n      perform insert_transaction(new.data->'transaction', new.date);\n      for _key, _value in (select * from jsonb_each_text(new.data->'accountMetadata')) loop\n          perform update_account_metadata(_key, _value, (new.data->'transaction'->>'timestamp')::timestamp);\n      end loop;\n    end if;\n    if new.type = 'REVERTED_TRANSACTION' then\n        perform insert_transaction(new.data->'transaction', new.date);\n        perform revert_transaction((new.data->>'revertedTransactionID')::numeric, (new.data->'transaction'->>'timestamp')::timestamp);\n    end if;\n    if new.type = 'SET_METADATA' then\n        if new.data->>'targetType' = 'TRANSACTION' then\n           
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns setof transactions\n    language sql\n    stable\nas $$\n    select *\n    from transactions t\n    where (_before is null or t.timestamp <= _before) and t.id = _id\n    order by id desc\n    limit 1;\n$$;\n\n-- a simple 'select distinct asset from moves' would be more simple\n-- but Postgres is extremely inefficient with distinct\n-- so the query implementation use a \"hack\" to emulate skip scan feature which Postgres lack natively\n-- see https://wiki.postgresql.org/wiki/Loose_indexscan for more information\ncreate function get_all_assets()\n    returns setof varchar\n    language sql\nas $$\n    with recursive t as (\n        select min(asset) as asset\n        from moves\n        union all\n        select (\n            select min(asset)\n            from moves\n            where asset > t.asset\n        )\n        from t\n        where t.asset is not null\n    )\n    select asset from t where asset is not null\n    union all\n    select null where exists(select 1 from moves where asset is null)\n$$;\n\ncreate function get_latest_move_for_account_and_asset(_account_address varchar, _asset varchar, _before timestamp default null)\n    returns setof moves\n    language sql\n    stable\nas $$\n    select *\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account_address and s.asset = _asset\n    order by effective_date desc, seq desc\n    limit 1;\n$$;\n\ncreate function update_account_metadata(_address varchar, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    select insert_new_account(_address, _date);\n\n    insert into accounts_metadata (address, metadata, date, revision)\n    (\n        select _address, accounts_metadata.metadata || _metadata, _date, accounts_metadata.revision + 1\n        from accounts_metadata\n        where address = _address\n        order by revision desc\n        limit 1\n    )\n    union all -- if no metdata\n    select _address, _metadata, _date, 0\n    limit 1;\n$$;\n\ncreate function delete_account_metadata(_address varchar, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into accounts_metadata (address, metadata, date, revision)\n    select _address, accounts_metadata.metadata - _key, _date, accounts_metadata.revision + 1\n    from accounts_metadata\n    where address = _address\n    order by revision desc\n    limit 1\n$$;\n\ncreate function update_transaction_metadata(_id numeric, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    (\n        select originalTX.transaction_id,\n               originalTX.metadata || _metadata,\n               _date,\n                originalTX.revision + 1\n        from transactions_metadata originalTX\n        where transaction_id = _id\n        order by revision desc\n        limit 1\n    )\n    union all (\n        select _id, '{}'::jsonb, null, -1\n    )\n    limit 1\n$$;\n\ncreate function delete_transaction_metadata(_id numeric, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    select originalTX.transaction_id,\n           originalTX.metadata - _key,\n           _date,\n           originalTX.revision + 1\n    from transactions_metadata originalTX\n    where transaction_id = _id\n    order by revision desc\n    limit 1;\n$$;\n\ncreate function revert_transaction(_id numeric, _date timestamp)\n    returns void\n    language sql\nas $$\n    update transactions\n    set reverted_at = _date\n    where id = _id;\n$$;\n\ncreate or replace function insert_move(_transaction_id numeric, _insertion_date timestamp without time zone,\n    _effective_date timestamp without time zone, _account_address varchar, _asset varchar, _amount numeric, _is_source bool, _new_account bool)\n    returns void\n    language plpgsql\nas $$\n    declare\n        _post_commit_volumes volumes = (0, 0)::volumes;\n        _effective_post_commit_volumes volumes = (0, 0)::volumes;\n        _seq numeric;\n    begin\n\n        -- todo: lock if we enable parallelism\n        -- perform *\n        -- from accounts\n        -- where address = _account_address\n        -- for update;\n\n        if not _new_account then\n            select (post_commit_volumes).inputs, (post_commit_volumes).outputs into _post_commit_volumes\n            from moves\n            where account_address = _account_address\n                and asset = _asset\n            order by seq desc\n            limit 1;\n\n            if not found then\n                _post_commit_volumes = (0, 0)::volumes;\n                _effective_post_commit_volumes = (0, 0)::volumes;\n            else\n                select (post_commit_effective_volumes).inputs, (post_commit_effective_volumes).outputs into _effective_post_commit_volumes\n                from moves\n                where account_address = _account_address\n                    and asset = _asset and effective_date <= _effective_date\n                order by effective_date desc, seq desc\n                limit 1;\n            end if;\n        end if;\n\n        if _is_source then\n            _post_commit_volumes.outputs = _post_commit_volumes.outputs + _amount;\n            _effective_post_commit_volumes.outputs = _effective_post_commit_volumes.outputs + _amount;\n        else\n            _post_commit_volumes.inputs = _post_commit_volumes.inputs + _amount;\n            _effective_post_commit_volumes.inputs = _effective_post_commit_volumes.inputs + _amount;\n        end if;\n\n        insert into moves (\n            insertion_date,\n            effective_date,\n            account_address,\n            asset,\n            transaction_id,\n            amount,\n            is_source,\n            account_address_array,\n            post_commit_volumes,\n            post_commit_effective_volumes\n        ) values (_insertion_date, _effective_date, _account_address, _asset, _transaction_id,\n                  _amount, _is_source, (select to_json(string_to_array(_account_address, ':'))),\n                  _post_commit_volumes, _effective_post_commit_volumes)\n        returning seq into _seq;\n\n        if not _new_account then\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date > _effective_date;\n\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date = _effective_date and seq > _seq;\n        end if;\n    end;\n$$;\n\ncreate function insert_posting(_transaction_id numeric, _insertion_date timestamp without time zone, _effective_date timestamp without time zone, posting jsonb)\n    returns void\n    language plpgsql\nas $$\n    declare\n        source_created bool;\n        destination_created bool;\n    begin\n        select insert_new_account(posting->>'source', _insertion_date) into source_created;\n        select insert_new_account(posting->>'destination', _insertion_date) into destination_created;\n\n        -- todo: sometimes the balance is known at commit time (for sources != world), we need to forward the value to populate the pre_commit_aggregated_input and output\n        perform insert_move(_transaction_id, _insertion_date, _effective_date,\n            posting->>'source', posting->>'asset', (posting->>'amount')::numeric, true, source_created);\n        perform insert_move(_transaction_id, _insertion_date, _effective_date,\n            posting->>'destination', posting->>'asset', (posting->>'amount')::numeric, false, destination_created);\n    end;\n$$;\n\n-- todo: maybe we could avoid plpgsql functions\ncreate function insert_transaction(data jsonb, _date timestamp without time zone)\n    returns void\n    language plpgsql\nas $$\n    declare\n        posting jsonb;\n    begin\n        insert into transactions (id, timestamp, reference, postings, sources, destinations, sources_arrays, destinations_arrays)\n        values ((data->>'id')::numeric,\n                (data->>'timestamp')::timestamp without time zone,\n                data->>'reference',\n                jsonb_pretty(data->'postings'),\n                (\n\t                select to_jsonb(array_agg(v->>'source')) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(v->>'destination')) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(explode_address(v->>'source'))) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(explode_address(v->>'destination'))) as value\n\t                from jsonb_array_elements(data->'postings') v\n                )\n        );\n\n        for posting in (select jsonb_array_elements(data->'postings')) loop\n            -- todo: sometimes the balance is known at commit time (for sources != world), we need to forward the value to populate the pre_commit_aggregated_input and output\n            perform insert_posting((data->>'id')::numeric, _date, (data->>'timestamp')::timestamp without time zone, posting);\n        end loop;\n\n        if data->'metadata' is not null and data->>'metadata' <> '()' then\n            insert into transactions_metadata (transaction_id, revision, date, metadata) values (\n                (data->>'id')::numeric,\n                0,\n                (data->>'timestamp')::timestamp without time zone,\n                coalesce(data->'metadata', '{}'::jsonb)\n            );\n        end if;\n    end\n$$;\n\ncreate function handle_log() returns trigger\n  security definer\n  language plpgsql\nas $$\n  declare\n    _key varchar;\n    _value jsonb;\n  begin\n    if new.type = 'NEW_TRANSACTION' then\n      perform insert_transaction(new.data->'transaction', new.date);\n      for _key, _value in (select * from jsonb_each_text(new.data->'accountMetadata')) loop\n          perform update_account_metadata(_key, _value, (new.data->'transaction'->>'timestamp')::timestamp);\n      end loop;\n    end if;\n    if new.type = 'REVERTED_TRANSACTION' then\n        perform insert_transaction(new.data->'transaction', new.date);\n        perform revert_transaction((new.data->>'revertedTransactionID')::numeric, (new.data->'transaction'->>'timestamp')::timestamp);\n    end if;\n    if new.type = 'SET_METADATA' then\n        if new.data->>'targetType' = 'TRANSACTION' then\n            perform update_transaction_metadata((new.data->>'targetId')::numeric, new.data->'metadata', new.date);\n        else\n            perform update_account_metadata((new.data->>'targetId')::varchar, new.data ->'metadata', new.date);\n        end if;\n    end if;\n    if new.type = 'DELETE_METADATA' then\n        if new.data->>'targetType' = 'TRANSACTION' then\n            perform delete_transaction_metadata((new.data->>'targetId')::numeric, new.data->>'key', new.date);\n        else\n            perform delete_account_metadata((new.data->>'targetId')::varchar, new.data ->>'key', new.date);\n        end if;\n    end if;\n\n    return new;\n  end;\n$$;\n\n/** Define the trigger which populate table in response to new logs **/\ncreate trigger insert_log after insert on logs\n    for each row execute procedure handle_log();\n\ncreate or replace function get_all_account_effective_volumes(_account varchar, _before timestamp default null)\n    returns setof volumes_with_asset\n    language sql\n    stable\nas $$\n    
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns setof transactions\n    language sql\n    stable\nas $$\n    select *\n    from transactions t\n    where (_before is null or t.timestamp <= _before) and t.id = _id\n    order by id desc\n    limit 1;\n$$;\n\n-- a simple 'select distinct asset from moves' would be more simple\n-- but Postgres is extremely inefficient with distinct\n-- so the query implementation use a \"hack\" to emulate skip scan feature which Postgres lack natively\n-- see https://wiki.postgresql.org/wiki/Loose_indexscan for more information\ncreate function get_all_assets()\n    returns setof varchar\n    language sql\nas $$\n    with recursive t as (\n        select min(asset) as asset\n        from moves\n        union all\n        select (\n            select min(asset)\n            from moves\n            where asset > t.asset\n        )\n        from t\n        where t.asset is not null\n    )\n    select asset from t where asset is not null\n    union all\n    select null where exists(select 1 from moves where asset is null)\n$$;\n\ncreate function get_latest_move_for_account_and_asset(_account_address varchar, _asset varchar, _before timestamp default null)\n    returns setof moves\n    language sql\n    stable\nas $$\n    select *\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account_address and s.asset = _asset\n    order by effective_date desc, seq desc\n    limit 1;\n$$;\n\ncreate function update_account_metadata(_address varchar, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    select insert_new_account(_address, _date);\n\n    insert into accounts_metadata (address, metadata, date, revision)\n    (\n        select _address, accounts_metadata.metadata || _metadata, _date, accounts_metadata.revision + 1\n        from accounts_metadata\n        where address = _address\n        order by revision desc\n        limit 1\n    )\n    union all -- if no metdata\n    select _address, _metadata, _date, 0\n    limit 1;\n$$;\n\ncreate function delete_account_metadata(_address varchar, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into accounts_metadata (address, metadata, date, revision)\n    select _address, accounts_metadata.metadata - _key, _date, accounts_metadata.revision + 1\n    from accounts_metadata\n    where address = _address\n    order by revision desc\n    limit 1\n$$;\n\ncreate function update_transaction_metadata(_id numeric, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    (\n        select originalTX.transaction_id,\n               originalTX.metadata || _metadata,\n               _date,\n                originalTX.revision + 1\n        from transactions_metadata originalTX\n        where transaction_id = _id\n        order by revision desc\n        limit 1\n    )\n    union all (\n        select _id, '{}'::jsonb, null, -1\n    )\n    limit 1\n$$;\n\ncreate function delete_transaction_metadata(_id numeric, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    select originalTX.transaction_id,\n           originalTX.metadata - _key,\n           _date,\n           originalTX.revision + 1\n    from transactions_metadata originalTX\n    where transaction_id = _id\n    order by revision desc\n    limit 1;\n$$;\n\ncreate function revert_transaction(_id numeric, _date timestamp)\n    returns void\n    language sql\nas $$\n    update transactions\n    set reverted_at = _date\n    where id = _id;\n$$;\n\ncreate or replace function insert_move(_transaction_id numeric, _insertion_date timestamp without time zone,\n    _effective_date timestamp without time zone, _account_address varchar, _asset varchar, _amount numeric, _is_source bool, _new_account bool)\n    returns void\n    language plpgsql\nas $$\n    declare\n        _post_commit_volumes volumes = (0, 0)::volumes;\n        _effective_post_commit_volumes volumes = (0, 0)::volumes;\n        _seq numeric;\n    begin\n\n        -- todo: lock if we enable parallelism\n        -- perform *\n        -- from accounts\n        -- where address = _account_address\n        -- for update;\n\n        if not _new_account then\n            select (post_commit_volumes).inputs, (post_commit_volumes).outputs into _post_commit_volumes\n            from moves\n            where account_address = _account_address\n                and asset = _asset\n            order by seq desc\n            limit 1;\n\n            if not found then\n                _post_commit_volumes = (0, 0)::volumes;\n                _effective_post_commit_volumes = (0, 0)::volumes;\n            else\n                select (post_commit_effective_volumes).inputs, (post_commit_effective_volumes).outputs into _effective_post_commit_volumes\n                from moves\n                where account_address = _account_address\n                    and asset = _asset and effective_date <= _effective_date\n                order by effective_date desc, seq desc\n                limit 1;\n            end if;\n        end if;\n\n        if _is_source then\n            _post_commit_volumes.outputs = _post_commit_volumes.outputs + _amount;\n            _effective_post_commit_volumes.outputs = _effective_post_commit_volumes.outputs + _amount;\n        else\n            _post_commit_volumes.inputs = _post_commit_volumes.inputs + _amount;\n            _effective_post_commit_volumes.inputs = _effective_post_commit_volumes.inputs + _amount;\n        end if;\n\n        insert into moves (\n            insertion_date,\n            effective_date,\n            account_address,\n            asset,\n            transaction_id,\n            amount,\n            is_source,\n            account_address_array,\n            post_commit_volumes,\n            post_commit_effective_volumes\n        ) values (_insertion_date, _effective_date, _account_address, _asset, _transaction_id,\n                  _amount, _is_source, (select to_json(string_to_array(_account_address, ':'))),\n                  _post_commit_volumes, _effective_post_commit_volumes)\n        returning seq into _seq;\n\n        if not _new_account then\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date > _effective_date;\n\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date = _effective_date and seq > _seq;\n        end if;\n    end;\n$$;\n\ncreate function insert_posting(_transaction_id numeric, _insertion_date timestamp without time zone, _effective_date timestamp without time zone, posting jsonb)\n    returns void\n    language plpgsql\nas $$\n    declare\n        source_created bool;\n        destination_created bool;\n    begin\n        select insert_new_account(posting->>'source', _insertion_date) into source_created;\n        select insert_new_account(posting->>'destination', _insertion_date) into destination_created;\n\n        -- todo: sometimes the balance is known at commit time (for sources != world), we need to forward the value to populate the pre_commit_aggregated_input and output\n        perform insert_move(_transaction_id, _insertion_date, _effective_date,\n            posting->>'source', posting->>'asset', (posting->>'amount')::numeric, true, source_created);\n        perform insert_move(_transaction_id, _insertion_date, _effective_date,\n            posting->>'destination', posting->>'asset', (posting->>'amount')::numeric, false, destination_created);\n    end;\n$$;\n\n-- todo: maybe we could avoid plpgsql functions\ncreate function insert_transaction(data jsonb, _date timestamp without time zone)\n    returns void\n    language plpgsql\nas $$\n    declare\n        posting jsonb;\n    begin\n        insert into transactions (id, timestamp, reference, postings, sources, destinations, sources_arrays, destinations_arrays)\n        values ((data->>'id')::numeric,\n                (data->>'timestamp')::timestamp without time zone,\n                data->>'reference',\n                jsonb_pretty(data->'postings'),\n                (\n\t                select to_jsonb(array_agg(v->>'source')) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(v->>'destination')) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(explode_address(v->>'source'))) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(explode_address(v->>'destination'))) as value\n\t                from jsonb_array_elements(data->'postings') v\n                )\n        );\n\n        for posting in (select jsonb_array_elements(data->'postings')) loop\n            -- todo: sometimes the balance is known at commit time (for sources != world), we need to forward the value to populate the pre_commit_aggregated_input and output\n            perform insert_posting((data->>'id')::numeric, _date, (data->>'timestamp')::timestamp without time zone, posting);\n        end loop;\n\n        if data->'metadata' is not null and data->>'metadata' <> '()' then\n            insert into transactions_metadata (transaction_id, revision, date, metadata) values (\n                (data->>'id')::numeric,\n                0,\n                (data->>'timestamp')::timestamp without time zone,\n                coalesce(data->'metadata', '{}'::jsonb)\n            );\n        end if;\n    end\n$$;\n\ncreate function handle_log() returns trigger\n  security definer\n  language plpgsql\nas $$\n  declare\n    _key varchar;\n    _value jsonb;\n  begin\n    if new.type = 'NEW_TRANSACTION' then\n      perform insert_transaction(new.data->'transaction', new.date);\n      for _key, _value in (select * from jsonb_each_text(new.data->'accountMetadata')) loop\n          perform update_account_metadata(_key, _value, (new.data->'transaction'->>'timestamp')::timestamp);\n      end loop;\n    end if;\n    if new.type = 'REVERTED_TRANSACTION' then\n        perform insert_transaction(new.data->'transaction', new.date);\n        perform revert_transaction((new.data->>'revertedTransactionID')::numeric, (new.data->'transaction'->>'timestamp')::timestamp);\n    end if;\n    if new.type = 'SET_METADATA' then\n        if new.data->>'targetType' = 'TRANSACTION' then\n            perform update_transaction_metadata((new.data->>'targetId')::numeric, new.data->'metadata', new.date);\n        else\n            perform update_account_metadata((new.data->>'targetId')::varchar, new.data ->'metadata', new.date);\n        end if;\n    end if;\n    if new.type = 'DELETE_METADATA' then\n        if new.data->>'targetType' = 'TRANSACTION' then\n            perform delete_transaction_metadata((new.data->>'targetId')::numeric, new.data->>'key', new.date);\n        else\n            perform delete_account_metadata((new.data->>'targetId')::varchar, new.data ->>'key', new.date);\n        end if;\n    end if;\n\n    return new;\n  end;\n$$;\n\n/** Define the trigger which populate table in response to new logs **/\ncreate trigger insert_log after insert on logs\n    for each row execute procedure handle_log();\n\ncreate or replace function get_all_account_effective_volumes(_account varchar, _before timestamp default null)\n    returns setof volumes_with_asset\n    language sql\n    stable\nas $$\n    with\n        all_assets as (\n            select v.v as asset\n            from get_all_assets() v\n        ),\n        moves as (\n            select m.*\n            from all_assets assets\n            join lateral (\n                select *\n                from moves s\n                where (_before is null or s.effective_date <= _before) and s.account_address = _account and s.asset = assets.asset\n                order by effective_date desc, seq desc\n                limit 1\n            ) m on true\n        )\n    select moves.asset, moves.post_commit_effective_volumes\n    from moves\n$$;\n\ncreate or replace function get_all_account_volumes(_account varchar, _before timestamp default null)\n    returns setof volumes_with_asset\n    language sql\n    stable\nas $$\n    with\n        all_assets as (\n            select v.v as asset\n            from get_all_assets() v\n        ),\n        moves as (\n            select m.*\n            from all_assets assets\n            join lateral (\n                select *\n                from moves s\n                where (_before is null or s.insertion_date <= _before) and s.account_address = _account and s.asset = assets.asset\n                order by seq desc\n                limit 1\n            ) m on true\n        )\n    select moves.asset, moves.post_commit_volumes\n    from moves\n$$;\n\ncreate function volumes_to_jsonb(v volumes_with_asset)\n    returns jsonb\n    language sql\n    immutable\nas $$\n    select ('{\"' || v.asset || '\": {\"input\": ' || (v.volumes).inputs || ', \"output\": ' || (v.volumes).outputs || '}}')::jsonb\n$$;\n\ncreate function get_account_aggregated_effective_volumes(_account_address varchar, _before timestamp default null)\n    returns jsonb\n    language sql\n    stable\nas $$\n    select aggregate_objects(volumes_to_jsonb(volumes_with_asset))\n    from get_all_account_effective_volumes(_account_address, _before := _before) volumes_with_asset\n$$;\n\ncreate function get_account_aggregated_volumes(_account_address varchar, _before timestamp default null)\n    returns jsonb\n    language sql\n    stable\n    parallel safe\nas $$\n    select aggregate_objects(volumes_to_jsonb(volumes_with_asset))\n    from get_all_account_volumes(_account_address, _before := _before) volumes_with_asset\n$$;\n\ncreate function get_account_balance(_account varchar, _asset varchar, _before timestamp default null)\n    returns numeric\n    language sql\n    stable\nas $$\n    select (post_commit_volumes).inputs - (post_commit_volumes).outputs\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account and s.asset = _asset\n    order by seq desc\n    limit 1\n$$;\n\ncreate function aggregate_ledger_volumes(\n    _before timestamp default null,\n    _accounts varchar[] default null,\n    _assets varchar[] default null\n)\n    returns setof volumes_with_asset\n    language sql\n    stable\nas $$\n    with\n        moves as (\n            select distinct on (m.account_address, m.asset) m.*\n            from moves m\n            where (_before is null or m.effective_date <= _before) and\n                (_accounts is null or account_address = any(_accounts)) and\n                (_assets is null or asset = any(_assets))\n            order by account_address, asset, m.seq desc\n        )\n    select v.asset, (sum((v.post_commit_effective_volumes).inputs), sum((v.post_commit_effective_volumes).outputs))\n    from moves v\n    group by v.asset\n$$;\n\ncreate function get_aggregated_effective_volumes_for_transaction(tx transactions) returns jsonb\n    stable\n    language sql\nas\n$$\nselect aggregate_objects(jsonb_build_object(data.account_address, data.aggregated))\nfrom (\n    select distinct on (move.account_address, move.asset) move.account_address,\n        volumes_to_jsonb((move.asset, first(move.post_commit_effective_volumes))) as aggregated\n    from moves move\n    where move.transaction_id = tx.id\n    group by move.account_address, move.asset\n) data\n$$;\n\ncreate function get_aggregated_volumes_for_tr
              +bench | [Atime="10-11-23118 10:44:20.432776" level=debug msg="/**\n  Some utils\n */\ncreate aggregate aggregate_objects(jsonb) (\n  sfunc = jsonb_concat,\n  stype = jsonb,\n  initcond = '{}'\n);\n\ncreate function first_agg (anyelement, anyelement)\n    returns anyelement\n    language sql\n    immutable\n    strict\n    parallel safe\nas $$\n    select $1\n$$;\n\ncreate aggregate first (anyelement) (\n    sfunc    = first_agg,\n    stype    = anyelement,\n    parallel = safe\n);\n\ncreate function array_distinct(anyarray)\n    returns anyarray\n    language sql\n    immutable\nas $$\n    select array_agg(distinct x)\n    from unnest($1) t(x);\n$$;\n\n/** Define types **/\ncreate type account_with_volumes as (\n    address varchar,\n    metadata jsonb,\n    volumes jsonb\n);\n\ncreate type volumes as (\n    inputs numeric,\n    outputs numeric\n);\n\ncreate type volumes_with_asset as (\n    asset varchar,\n    volumes volumes\n);\n\n/** Define tables **/\ncreate table transactions (\n    id numeric not null primary key,\n    timestamp timestamp without time zone not null,\n    reference varchar,\n    reverted_at timestamp without time zone,\n    postings varchar not null,\n    sources jsonb,\n    destinations jsonb,\n    sources_arrays jsonb,\n    destinations_arrays jsonb\n);\n\ncreate table transactions_metadata (\n    transaction_id numeric not null references transactions(id),\n    revision numeric default 0 not null,\n    date timestamp not null,\n    metadata jsonb not null default '{}'::jsonb,\n\n    primary key (transaction_id, revision)\n);\n\ncreate table accounts (\n    address varchar primary key,\n    address_array jsonb not null,\n    insertion_date timestamp not null\n);\n\ncreate table accounts_metadata (\n    address varchar references accounts(address),\n    metadata jsonb default '{}'::jsonb,\n    revision numeric default 0,\n    date timestamp\n);\n\ncreate table moves (\n    seq serial not null primary key ,\n    transaction_id numeric not null references transactions(id),\n    account_address varchar not null,\n    account_address_array jsonb not null,\n    asset varchar not null,\n    amount numeric not null,\n    insertion_date timestamp not null,\n    effective_date timestamp not null,\n    post_commit_volumes volumes not null,\n    post_commit_effective_volumes volumes default null,\n    is_source boolean not null\n);\n\ncreate type log_type as enum (\n    'NEW_TRANSACTION',\n    'REVERTED_TRANSACTION',\n    'SET_METADATA',\n    'DELETE_METADATA'\n);\n\ncreate table logs (\n    id numeric not null primary key,\n    type log_type not null,\n    hash bytea not null,\n    date timestamp not null,\n    data jsonb not null,\n    idempotency_key varchar(255)\n);\n\n/** Define index **/\n\ncreate function balance_from_volumes(v volumes)\n    returns numeric\n    language sql\n    immutable\nas $$\n    select v.inputs - v.outputs\n$$;\n\n/** Index required for write part */\ncreate index moves_range_dates on moves (account_address, asset, effective_date);\n\n/** Index requires for read */\ncreate index transactions_date on transactions (timestamp);\ncreate index transactions_metadata_metadata on transactions_metadata using gin (metadata);\n--create unique index transactions_revisions on transactions_metadata(id desc, revision desc);\ncreate index transactions_sources on transactions using gin (sources jsonb_path_ops);\ncreate index transactions_destinations on transactions using gin (destinations jsonb_path_ops);\ncreate index transactions_sources_arrays on transactions using gin (sources_arrays jsonb_path_ops);\ncreate index transactions_destinations_arrays on transactions using gin (destinations_arrays jsonb_path_ops);\n\ncreate index moves_account_address on moves (account_address);\ncreate index moves_account_address_array on moves using gin (account_address_array jsonb_ops);\ncreate index moves_account_address_array_length on moves (jsonb_array_length(account_address_array));\ncreate index moves_date on moves (effective_date);\ncreate index moves_asset on moves (asset);\ncreate index moves_balance on moves (balance_from_volumes(post_commit_volumes));\ncreate index moves_post_commit_volumes on moves(account_address, asset, seq);\ncreate index moves_effective_post_commit_volumes on moves(account_address, asset, effective_date desc, seq desc);\ncreate index moves_transactions_id on moves (transaction_id);\n\ncreate index accounts_address_array on accounts using gin (address_array jsonb_ops);\ncreate index accounts_address_array_length on accounts (jsonb_array_length(address_array));\n\ncreate unique index accounts_metadata_revisions on accounts_metadata(address asc, revision desc);\n\n/** Define write functions **/\ncreate function insert_new_account(_address varchar, _date timestamp)\n    returns bool\n    language plpgsql\nas $$\n    declare\n        _account accounts;\n    begin\n        insert into accounts(address, address_array, insertion_date)\n        values (_address, to_json(string_to_array(_address, ':')), _date)\n        on conflict do nothing\n        returning * into _account;\n\n        return _account is not null;\n    end;\n$$;\n\n-- given the input : \"a:b:c\", the function will produce : '{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": null}'\ncreate function explode_address(_address varchar)\n\treturns jsonb\n\tlanguage sql\n\timmutable\nas $$\n    select aggregate_objects(jsonb_build_object(data.number - 1, data.value))\n\tfrom (\n\t    select row_number() over () as number, v.value\n\t    from (\n\t        select unnest(string_to_array(_address, ':')) as value\n\t        union all\n\t        select null\n\t    ) v\n    ) data\n$$;\n\ncreate function get_account(_account_address varchar, _before timestamp default null)\n    returns setof accounts_metadata\n    language sql\n    stable\nas $$\n    select distinct on (address) *\n    from accounts_metadata t\n    where (_before is null or t.date <= _before)\n        and t.address = _account_address\n    order by address, revision desc\n    limit 1;\n$$;\n\ncreate function get_transaction(_id numeric, _before timestamp default null)\n    returns setof transactions\n    language sql\n    stable\nas $$\n    select *\n    from transactions t\n    where (_before is null or t.timestamp <= _before) and t.id = _id\n    order by id desc\n    limit 1;\n$$;\n\n-- a simple 'select distinct asset from moves' would be more simple\n-- but Postgres is extremely inefficient with distinct\n-- so the query implementation use a \"hack\" to emulate skip scan feature which Postgres lack natively\n-- see https://wiki.postgresql.org/wiki/Loose_indexscan for more information\ncreate function get_all_assets()\n    returns setof varchar\n    language sql\nas $$\n    with recursive t as (\n        select min(asset) as asset\n        from moves\n        union all\n        select (\n            select min(asset)\n            from moves\n            where asset > t.asset\n        )\n        from t\n        where t.asset is not null\n    )\n    select asset from t where asset is not null\n    union all\n    select null where exists(select 1 from moves where asset is null)\n$$;\n\ncreate function get_latest_move_for_account_and_asset(_account_address varchar, _asset varchar, _before timestamp default null)\n    returns setof moves\n    language sql\n    stable\nas $$\n    select *\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account_address and s.asset = _asset\n    order by effective_date desc, seq desc\n    limit 1;\n$$;\n\ncreate function update_account_metadata(_address varchar, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    select insert_new_account(_address, _date);\n\n    insert into accounts_metadata (address, metadata, date, revision)\n    (\n        select _address, accounts_metadata.metadata || _metadata, _date, accounts_metadata.revision + 1\n        from accounts_metadata\n        where address = _address\n        order by revision desc\n        limit 1\n    )\n    union all -- if no metdata\n    select _address, _metadata, _date, 0\n    limit 1;\n$$;\n\ncreate function delete_account_metadata(_address varchar, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into accounts_metadata (address, metadata, date, revision)\n    select _address, accounts_metadata.metadata - _key, _date, accounts_metadata.revision + 1\n    from accounts_metadata\n    where address = _address\n    order by revision desc\n    limit 1\n$$;\n\ncreate function update_transaction_metadata(_id numeric, _metadata jsonb, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    (\n        select originalTX.transaction_id,\n               originalTX.metadata || _metadata,\n               _date,\n                originalTX.revision + 1\n        from transactions_metadata originalTX\n        where transaction_id = _id\n        order by revision desc\n        limit 1\n    )\n    union all (\n        select _id, '{}'::jsonb, null, -1\n    )\n    limit 1\n$$;\n\ncreate function delete_transaction_metadata(_id numeric, _key varchar, _date timestamp)\n    returns void\n    language sql\nas $$\n    insert into transactions_metadata (transaction_id, metadata, date, revision)\n    select originalTX.transaction_id,\n           originalTX.metadata - _key,\n           _date,\n           originalTX.revision + 1\n    from transactions_metadata originalTX\n    where transaction_id = _id\n    order by revision desc\n    limit 1;\n$$;\n\ncreate function revert_transaction(_id numeric, _date timestamp)\n    returns void\n    language sql\nas $$\n    update transactions\n    set reverted_at = _date\n    where id = _id;\n$$;\n\ncreate or replace function insert_move(_transaction_id numeric, _insertion_date timestamp without time zone,\n    _effective_date timestamp without time zone, _account_address varchar, _asset varchar, _amount numeric, _is_source bool, _new_account bool)\n    returns void\n    language plpgsql\nas $$\n    declare\n        _post_commit_volumes volumes = (0, 0)::volumes;\n        _effective_post_commit_volumes volumes = (0, 0)::volumes;\n        _seq numeric;\n    begin\n\n        -- todo: lock if we enable parallelism\n        -- perform *\n        -- from accounts\n        -- where address = _account_address\n        -- for update;\n\n        if not _new_account then\n            select (post_commit_volumes).inputs, (post_commit_volumes).outputs into _post_commit_volumes\n            from moves\n            where account_address = _account_address\n                and asset = _asset\n            order by seq desc\n            limit 1;\n\n            if not found then\n                _post_commit_volumes = (0, 0)::volumes;\n                _effective_post_commit_volumes = (0, 0)::volumes;\n            else\n                select (post_commit_effective_volumes).inputs, (post_commit_effective_volumes).outputs into _effective_post_commit_volumes\n                from moves\n                where account_address = _account_address\n                    and asset = _asset and effective_date <= _effective_date\n                order by effective_date desc, seq desc\n                limit 1;\n            end if;\n        end if;\n\n        if _is_source then\n            _post_commit_volumes.outputs = _post_commit_volumes.outputs + _amount;\n            _effective_post_commit_volumes.outputs = _effective_post_commit_volumes.outputs + _amount;\n        else\n            _post_commit_volumes.inputs = _post_commit_volumes.inputs + _amount;\n            _effective_post_commit_volumes.inputs = _effective_post_commit_volumes.inputs + _amount;\n        end if;\n\n        insert into moves (\n            insertion_date,\n            effective_date,\n            account_address,\n            asset,\n            transaction_id,\n            amount,\n            is_source,\n            account_address_array,\n            post_commit_volumes,\n            post_commit_effective_volumes\n        ) values (_insertion_date, _effective_date, _account_address, _asset, _transaction_id,\n                  _amount, _is_source, (select to_json(string_to_array(_account_address, ':'))),\n                  _post_commit_volumes, _effective_post_commit_volumes)\n        returning seq into _seq;\n\n        if not _new_account then\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date > _effective_date;\n\n            update moves\n            set post_commit_effective_volumes = (\n                (post_commit_effective_volumes).inputs + case when _is_source then 0 else _amount end,\n                (post_commit_effective_volumes).outputs + case when _is_source then _amount else 0 end\n            )\n            where account_address = _account_address and asset = _asset and effective_date = _effective_date and seq > _seq;\n        end if;\n    end;\n$$;\n\ncreate function insert_posting(_transaction_id numeric, _insertion_date timestamp without time zone, _effective_date timestamp without time zone, posting jsonb)\n    returns void\n    language plpgsql\nas $$\n    declare\n        source_created bool;\n        destination_created bool;\n    begin\n        select insert_new_account(posting->>'source', _insertion_date) into source_created;\n        select insert_new_account(posting->>'destination', _insertion_date) into destination_created;\n\n        -- todo: sometimes the balance is known at commit time (for sources != world), we need to forward the value to populate the pre_commit_aggregated_input and output\n        perform insert_move(_transaction_id, _insertion_date, _effective_date,\n            posting->>'source', posting->>'asset', (posting->>'amount')::numeric, true, source_created);\n        perform insert_move(_transaction_id, _insertion_date, _effective_date,\n            posting->>'destination', posting->>'asset', (posting->>'amount')::numeric, false, destination_created);\n    end;\n$$;\n\n-- todo: maybe we could avoid plpgsql functions\ncreate function insert_transaction(data jsonb, _date timestamp without time zone)\n    returns void\n    language plpgsql\nas $$\n    declare\n        posting jsonb;\n    begin\n        insert into transactions (id, timestamp, reference, postings, sources, destinations, sources_arrays, destinations_arrays)\n        values ((data->>'id')::numeric,\n                (data->>'timestamp')::timestamp without time zone,\n                data->>'reference',\n                jsonb_pretty(data->'postings'),\n                (\n\t                select to_jsonb(array_agg(v->>'source')) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(v->>'destination')) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(explode_address(v->>'source'))) as value\n\t                from jsonb_array_elements(data->'postings') v\n                ),\n                (\n\t                select to_jsonb(array_agg(explode_address(v->>'destination'))) as value\n\t                from jsonb_array_elements(data->'postings') v\n                )\n        );\n\n        for posting in (select jsonb_array_elements(data->'postings')) loop\n            -- todo: sometimes the balance is known at commit time (for sources != world), we need to forward the value to populate the pre_commit_aggregated_input and output\n            perform insert_posting((data->>'id')::numeric, _date, (data->>'timestamp')::timestamp without time zone, posting);\n        end loop;\n\n        if data->'metadata' is not null and data->>'metadata' <> '()' then\n            insert into transactions_metadata (transaction_id, revision, date, metadata) values (\n                (data->>'id')::numeric,\n                0,\n                (data->>'timestamp')::timestamp without time zone,\n                coalesce(data->'metadata', '{}'::jsonb)\n            );\n        end if;\n    end\n$$;\n\ncreate function handle_log() returns trigger\n  security definer\n  language plpgsql\nas $$\n  declare\n    _key varchar;\n    _value jsonb;\n  begin\n    if new.type = 'NEW_TRANSACTION' then\n      perform insert_transaction(new.data->'transaction', new.date);\n      for _key, _value in (select * from jsonb_each_text(new.data->'accountMetadata')) loop\n          perform update_account_metadata(_key, _value, (new.data->'transaction'->>'timestamp')::timestamp);\n      end loop;\n    end if;\n    if new.type = 'REVERTED_TRANSACTION' then\n        perform insert_transaction(new.data->'transaction', new.date);\n        perform revert_transaction((new.data->>'revertedTransactionID')::numeric, (new.data->'transaction'->>'timestamp')::timestamp);\n    end if;\n    if new.type = 'SET_METADATA' then\n        if new.data->>'targetType' = 'TRANSACTION' then\n            perform update_transaction_metadata((new.data->>'targetId')::numeric, new.data->'metadata', new.date);\n        else\n            perform update_account_metadata((new.data->>'targetId')::varchar, new.data ->'metadata', new.date);\n        end if;\n    end if;\n    if new.type = 'DELETE_METADATA' then\n        if new.data->>'targetType' = 'TRANSACTION' then\n            perform delete_transaction_metadata((new.data->>'targetId')::numeric, new.data->>'key', new.date);\n        else\n            perform delete_account_metadata((new.data->>'targetId')::varchar, new.data ->>'key', new.date);\n        end if;\n    end if;\n\n    return new;\n  end;\n$$;\n\n/** Define the trigger which populate table in response to new logs **/\ncreate trigger insert_log after insert on logs\n    for each row execute procedure handle_log();\n\ncreate or replace function get_all_account_effective_volumes(_account varchar, _before timestamp default null)\n    returns setof volumes_with_asset\n    language sql\n    stable\nas $$\n    with\n        all_assets as (\n            select v.v as asset\n            from get_all_assets() v\n        ),\n        moves as (\n            select m.*\n            from all_assets assets\n            join lateral (\n                select *\n                from moves s\n                where (_before is null or s.effective_date <= _before) and s.account_address = _account and s.asset = assets.asset\n                order by effective_date desc, seq desc\n                limit 1\n            ) m on true\n        )\n    select moves.asset, moves.post_commit_effective_volumes\n    from moves\n$$;\n\ncreate or replace function get_all_account_volumes(_account varchar, _before timestamp default null)\n    returns setof volumes_with_asset\n    language sql\n    stable\nas $$\n    with\n        all_assets as (\n            select v.v as asset\n            from get_all_assets() v\n        ),\n        moves as (\n            select m.*\n            from all_assets assets\n            join lateral (\n                select *\n                from moves s\n                where (_before is null or s.insertion_date <= _before) and s.account_address = _account and s.asset = assets.asset\n                order by seq desc\n                limit 1\n            ) m on true\n        )\n    select moves.asset, moves.post_commit_volumes\n    from moves\n$$;\n\ncreate function volumes_to_jsonb(v volumes_with_asset)\n    returns jsonb\n    language sql\n    immutable\nas $$\n    select ('{\"' || v.asset || '\": {\"input\": ' || (v.volumes).inputs || ', \"output\": ' || (v.volumes).outputs || '}}')::jsonb\n$$;\n\ncreate function get_account_aggregated_effective_volumes(_account_address varchar, _before timestamp default null)\n    returns jsonb\n    language sql\n    stable\nas $$\n    select aggregate_objects(volumes_to_jsonb(volumes_with_asset))\n    from get_all_account_effective_volumes(_account_address, _before := _before) volumes_with_asset\n$$;\n\ncreate function get_account_aggregated_volumes(_account_address varchar, _before timestamp default null)\n    returns jsonb\n    language sql\n    stable\n    parallel safe\nas $$\n    select aggregate_objects(volumes_to_jsonb(volumes_with_asset))\n    from get_all_account_volumes(_account_address, _before := _before) volumes_with_asset\n$$;\n\ncreate function get_account_balance(_account varchar, _asset varchar, _before timestamp default null)\n    returns numeric\n    language sql\n    stable\nas $$\n    select (post_commit_volumes).inputs - (post_commit_volumes).outputs\n    from moves s\n    where (_before is null or s.effective_date <= _before) and s.account_address = _account and s.asset = _asset\n    order by seq desc\n    limit 1\n$$;\n\ncreate function aggregate_ledger_volumes(\n    _before timestamp default null,\n    _accounts varchar[] default null,\n    _assets varchar[] default null\n)\n    returns setof volumes_with_asset\n    language sql\n    stable\nas $$\n    with\n        moves as (\n            select distinct on (m.account_address, m.asset) m.*\n            from moves m\n            where (_before is null or m.effective_date <= _before) and\n                (_accounts is null or account_address = any(_accounts)) and\n                (_assets is null or asset = any(_assets))\n            order by account_address, asset, m.seq desc\n        )\n    select v.asset, (sum((v.post_commit_effective_volumes).inputs), sum((v.post_commit_effective_volumes).outputs))\n    from moves v\n    group by v.asset\n$$;\n\ncreate function get_aggregated_effective_volumes_for_transaction(tx transactions) returns jsonb\n    stable\n    language sql\nas\n$$\nselect aggregate_objects(jsonb_build_object(data.account_address, data.aggregated))\nfrom (\n    select distinct on (move.account_address, move.asset) move.account_address,\n        volumes_to_jsonb((move.asset, first(move.post_commit_effective_volumes))) as aggregated\n    from moves move\n    where move.transaction_id = tx.id\n    group by move.account_address, move.asset\n) data\n$$;\n\ncreate function get_aggregated_volumes_for_transaction(tx transactions) returns jsonb\n    stable\n    language sql\nas\n$$\nselect aggregate_objects(jsonb_build_object(data.account_address, data.aggregated))\nfrom (\n    select distinct on (move.account_address, move.asset) move.account_address,\n        volumes_to_jsonb((move.asset, first(move.post_commit_volumes))) as aggregated\n    from moves move\n    where move.transaction_id = tx.id\n    group by move.account_address, move.asset\n) data\n$$;\n" component=bun duration=221.504ms operation="/**\n"
              +bench | time="10-11-23118 10:44:20.433589" level=debug msg="INSERT INTO \"goose_db_version\" (version_id, is_applied, tstamp) VALUES (1, TRUE, '2023-11-23 10:44:20.433267+00:00')" component=bun duration="305µs" operation=INSERT
              +bench | time="10-11-23118 10:44:20.436687" level=debug msg=COMMIT component=bun duration=3.063ms operation=COMMIT
              +bench | time="10-11-23118 10:44:20.436708" level=debug msg=ROLLBACK component=bun duration="3µs" err="sql: transaction has already been committed or rolled back" operation=ROLLBACK
              +bench | time="10-11-23118 10:44:20.450496" level=debug msg=BEGIN component=bun duration="293µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:21.599063" level=debug msg=COMMIT component=bun duration=2.802ms operation=COMMIT
              +bench | time="10-11-23118 10:44:21.614310" level=debug msg=BEGIN component=bun duration="168µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:22.770968" level=debug msg=COMMIT component=bun duration=3.244ms operation=COMMIT
              +bench | time="10-11-23118 10:44:22.779726" level=debug msg=BEGIN component=bun duration="130µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:23.931104" level=debug msg=COMMIT component=bun duration=11.17ms operation=COMMIT
              +bench | time="10-11-23118 10:44:23.939525" level=debug msg=BEGIN component=bun duration="135µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:25.153773" level=debug msg=COMMIT component=bun duration=67.161ms operation=COMMIT
              +bench | time="10-11-23118 10:44:25.168819" level=debug msg=BEGIN component=bun duration="161µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:26.305716" level=debug msg=COMMIT component=bun duration=2.929ms operation=COMMIT
              +bench | time="10-11-23118 10:44:26.313472" level=debug msg=BEGIN component=bun duration="88µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:27.451909" level=debug msg=COMMIT component=bun duration=11.116ms operation=COMMIT
              +bench | time="10-11-23118 10:44:27.460364" level=debug msg=BEGIN component=bun duration="158µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:28.628068" level=debug msg=COMMIT component=bun duration=20.084ms operation=COMMIT
              +bench | time="10-11-23118 10:44:28.639567" level=debug msg=BEGIN component=bun duration="157µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:29.811501" level=debug msg=COMMIT component=bun duration=3.225ms operation=COMMIT
              +bench | time="10-11-23118 10:44:29.827847" level=debug msg=BEGIN component=bun duration="154µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:31.018815" level=debug msg=COMMIT component=bun duration=3.576ms operation=COMMIT
              +bench | time="10-11-23118 10:44:31.026708" level=debug msg=BEGIN component=bun duration="98µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:32.205106" level=debug msg=COMMIT component=bun duration=11.158ms operation=COMMIT
              +bench | time="10-11-23118 10:44:32.219857" level=debug msg=BEGIN component=bun duration="152µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:33.394012" level=debug msg=COMMIT component=bun duration=3.118ms operation=COMMIT
              +bench | time="10-11-23118 10:44:33.417865" level=debug msg=BEGIN component=bun duration="510µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:34.591424" level=debug msg=COMMIT component=bun duration=3.198ms operation=COMMIT
              +bench | time="10-11-23118 10:44:34.605747" level=debug msg=BEGIN component=bun duration="122µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:35.756911" level=debug msg=COMMIT component=bun duration=11.072ms operation=COMMIT
              +bench | time="10-11-23118 10:44:35.772927" level=debug msg=BEGIN component=bun duration="169µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:36.930116" level=debug msg=COMMIT component=bun duration=3.284ms operation=COMMIT
              +bench | time="10-11-23118 10:44:36.945379" level=debug msg=BEGIN component=bun duration="132µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:38.103195" level=debug msg=COMMIT component=bun duration=2.875ms operation=COMMIT
              +bench | time="10-11-23118 10:44:38.119064" level=debug msg=BEGIN component=bun duration="144µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:39.291177" level=debug msg=COMMIT component=bun duration=4.682ms operation=COMMIT
              +bench | time="10-11-23118 10:44:39.306622" level=debug msg=BEGIN component=bun duration="125µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:40.485930" level=debug msg=COMMIT component=bun duration=2.871ms operation=COMMIT
              +bench | time="10-11-23118 10:44:40.501703" level=debug msg=BEGIN component=bun duration="134µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:41.768046" level=debug msg=COMMIT component=bun duration=66.029ms operation=COMMIT
              +bench | time="10-11-23118 10:44:41.784239" level=debug msg=BEGIN component=bun duration="176µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:42.958976" level=debug msg=COMMIT component=bun duration=10.772ms operation=COMMIT
              +bench | time="10-11-23118 10:44:42.971393" level=debug msg=BEGIN component=bun duration="139µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:44.165080" level=debug msg=COMMIT component=bun duration=3.071ms operation=COMMIT
              +bench | time="10-11-23118 10:44:44.181555" level=debug msg=BEGIN component=bun duration="152µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:45.401500" level=debug msg=COMMIT component=bun duration=32.046ms operation=COMMIT
              +bench | time="10-11-23118 10:44:45.409891" level=debug msg=BEGIN component=bun duration="162µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:46.579748" level=debug msg=COMMIT component=bun duration=11.274ms operation=COMMIT
              +bench | time="10-11-23118 10:44:46.587649" level=debug msg=BEGIN component=bun duration="109µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:47.759808" level=debug msg=COMMIT component=bun duration=3.775ms operation=COMMIT
              +bench | time="10-11-23118 10:44:47.775426" level=debug msg=BEGIN component=bun duration="147µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:48.957397" level=debug msg=COMMIT component=bun duration=7.44ms operation=COMMIT
              +bench | time="10-11-23118 10:44:48.973351" level=debug msg=BEGIN component=bun duration="187µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:50.154782" level=debug msg=COMMIT component=bun duration=9.908ms operation=COMMIT
              +bench | time="10-11-23118 10:44:50.170303" level=debug msg=BEGIN component=bun duration="132µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:51.353058" level=debug msg=COMMIT component=bun duration=3.046ms operation=COMMIT
              +bench | time="10-11-23118 10:44:51.360761" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:52.761682" level=debug msg=COMMIT component=bun duration=11.319ms operation=COMMIT
              +bench | time="10-11-23118 10:44:52.773393" level=debug msg=BEGIN component=bun duration="136µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:54.231911" level=debug msg=COMMIT component=bun duration=4.637ms operation=COMMIT
              +bench | time="10-11-23118 10:44:54.249359" level=debug msg=BEGIN component=bun duration="175µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:55.746803" level=debug msg=COMMIT component=bun duration=50.808ms operation=COMMIT
              +bench | time="10-11-23118 10:44:55.762414" level=debug msg=BEGIN component=bun duration="369µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:57.224491" level=debug msg=COMMIT component=bun duration=2.84ms operation=COMMIT
              +bench | time="10-11-23118 10:44:57.239731" level=debug msg=BEGIN component=bun duration="143µs" operation=BEGIN
              +bench | time="10-11-23118 10:44:58.696279" level=debug msg=COMMIT component=bun duration=3.366ms operation=COMMIT
              +bench | time="10-11-23118 10:44:58.712153" level=debug msg=BEGIN component=bun duration="144µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:00.152817" level=debug msg=COMMIT component=bun duration=11.176ms operation=COMMIT
              +bench | time="10-11-23118 10:45:00.166340" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:01.589665" level=debug msg=COMMIT component=bun duration=11.068ms operation=COMMIT
              +bench | time="10-11-23118 10:45:01.597474" level=debug msg=BEGIN component=bun duration="104µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:03.005823" level=debug msg=COMMIT component=bun duration=3.559ms operation=COMMIT
              +bench | time="10-11-23118 10:45:03.020103" level=debug msg=BEGIN component=bun duration="128µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:04.453313" level=debug msg=COMMIT component=bun duration=3.064ms operation=COMMIT
              +bench | time="10-11-23118 10:45:04.468697" level=debug msg=BEGIN component=bun duration="165µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:05.863886" level=debug msg=COMMIT component=bun duration=3.206ms operation=COMMIT
              +bench | time="10-11-23118 10:45:05.879715" level=debug msg=BEGIN component=bun duration="159µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:07.272034" level=debug msg=COMMIT component=bun duration=2.932ms operation=COMMIT
              +bench | time="10-11-23118 10:45:07.288404" level=debug msg=BEGIN component=bun duration="159µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:08.764061" level=debug msg=COMMIT component=bun duration=31.326ms operation=COMMIT
              +bench | time="10-11-23118 10:45:08.772691" level=debug msg=BEGIN component=bun duration="122µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:10.237599" level=debug msg=COMMIT component=bun duration=4.12ms operation=COMMIT
              +bench | time="10-11-23118 10:45:10.252923" level=debug msg=BEGIN component=bun duration="158µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:11.749088" level=debug msg=COMMIT component=bun duration=46.546ms operation=COMMIT
              +bench | time="10-11-23118 10:45:11.758238" level=debug msg=BEGIN component=bun duration="135µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:13.182754" level=debug msg=COMMIT component=bun duration=2.977ms operation=COMMIT
              +bench | time="10-11-23118 10:45:13.202163" level=debug msg=BEGIN component=bun duration="164µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:14.633349" level=debug msg=COMMIT component=bun duration=3.381ms operation=COMMIT
              +bench | time="10-11-23118 10:45:14.642919" level=debug msg=BEGIN component=bun duration="162µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:16.060135" level=debug msg=COMMIT component=bun duration=3.394ms operation=COMMIT
              +bench | time="10-11-23118 10:45:16.076385" level=debug msg=BEGIN component=bun duration="134µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:17.485440" level=debug msg=COMMIT component=bun duration=3.091ms operation=COMMIT
              +bench | time="10-11-23118 10:45:17.493383" level=debug msg=BEGIN component=bun duration="126µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:18.894354" level=debug msg=COMMIT component=bun duration=3.571ms operation=COMMIT
              +bench | time="10-11-23118 10:45:18.903323" level=debug msg=BEGIN component=bun duration="122µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:20.312824" level=debug msg=COMMIT component=bun duration=11.137ms operation=COMMIT
              +bench | time="10-11-23118 10:45:20.325283" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:21.748197" level=debug msg=COMMIT component=bun duration=3.218ms operation=COMMIT
              +bench | time="10-11-23118 10:45:21.763623" level=debug msg=BEGIN component=bun duration="161µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:23.188141" level=debug msg=COMMIT component=bun duration=3.218ms operation=COMMIT
              +bench | time="10-11-23118 10:45:23.203585" level=debug msg=BEGIN component=bun duration="148µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:24.642229" level=debug msg=COMMIT component=bun duration=2.921ms operation=COMMIT
              +bench | time="10-11-23118 10:45:24.651270" level=debug msg=BEGIN component=bun duration="132µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:26.115845" level=debug msg=COMMIT component=bun duration=2.849ms operation=COMMIT
              +bench | time="10-11-23118 10:45:26.130880" level=debug msg=BEGIN component=bun duration="141µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:27.571748" level=debug msg=COMMIT component=bun duration=3.992ms operation=COMMIT
              +bench | time="10-11-23118 10:45:27.580745" level=debug msg=BEGIN component=bun duration="136µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:28.984534" level=debug msg=COMMIT component=bun duration=3.464ms operation=COMMIT
              +bench | time="10-11-23118 10:45:28.993302" level=debug msg=BEGIN component=bun duration="118µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:30.419764" level=debug msg=COMMIT component=bun duration=3.258ms operation=COMMIT
              +bench | time="10-11-23118 10:45:30.434680" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:31.897673" level=debug msg=COMMIT component=bun duration=48.033ms operation=COMMIT
              +bench | time="10-11-23118 10:45:31.913630" level=debug msg=BEGIN component=bun duration="163µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:33.330502" level=debug msg=COMMIT component=bun duration=4.804ms operation=COMMIT
              +bench | time="10-11-23118 10:45:33.339085" level=debug msg=BEGIN component=bun duration="147µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:34.754113" level=debug msg=COMMIT component=bun duration=3.182ms operation=COMMIT
              +bench | time="10-11-23118 10:45:34.770764" level=debug msg=BEGIN component=bun duration="180µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:36.219458" level=debug msg=COMMIT component=bun duration=26.405ms operation=COMMIT
              +bench | time="10-11-23118 10:45:36.228871" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:37.721273" level=debug msg=COMMIT component=bun duration=2.898ms operation=COMMIT
              +bench | time="10-11-23118 10:45:37.738406" level=debug msg=BEGIN component=bun duration="137µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:39.205523" level=debug msg=COMMIT component=bun duration=3.261ms operation=COMMIT
              +bench | time="10-11-23118 10:45:39.214287" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:40.666019" level=debug msg=COMMIT component=bun duration=2.87ms operation=COMMIT
              +bench | time="10-11-23118 10:45:40.681853" level=debug msg=BEGIN component=bun duration="135µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:42.145809" level=debug msg=COMMIT component=bun duration=3.32ms operation=COMMIT
              +bench | time="10-11-23118 10:45:42.160681" level=debug msg=BEGIN component=bun duration="152µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:43.608434" level=debug msg=COMMIT component=bun duration=3.078ms operation=COMMIT
              +bench | time="10-11-23118 10:45:43.624551" level=debug msg=BEGIN component=bun duration="152µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:45.052947" level=debug msg=COMMIT component=bun duration=2.771ms operation=COMMIT
              +bench | time="10-11-23118 10:45:45.069293" level=debug msg=BEGIN component=bun duration="161µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:46.493128" level=debug msg=COMMIT component=bun duration=2.774ms operation=COMMIT
              +bench | time="10-11-23118 10:45:46.508042" level=debug msg=BEGIN component=bun duration="139µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:47.939295" level=debug msg=COMMIT component=bun duration=5.932ms operation=COMMIT
              +bench | time="10-11-23118 10:45:47.956292" level=debug msg=BEGIN component=bun duration="117µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:49.375386" level=debug msg=COMMIT component=bun duration=3.362ms operation=COMMIT
              +bench | time="10-11-23118 10:45:49.384021" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:50.807222" level=debug msg=COMMIT component=bun duration=4.426ms operation=COMMIT
              +bench | time="10-11-23118 10:45:50.815903" level=debug msg=BEGIN component=bun duration="118µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:52.274938" level=debug msg=COMMIT component=bun duration=2.766ms operation=COMMIT
              +bench | time="10-11-23118 10:45:52.283549" level=debug msg=BEGIN component=bun duration="135µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:53.726151" level=debug msg=COMMIT component=bun duration=3.23ms operation=COMMIT
              +bench | time="10-11-23118 10:45:53.741590" level=debug msg=BEGIN component=bun duration="147µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:55.185849" level=debug msg=COMMIT component=bun duration=2.99ms operation=COMMIT
              +bench | time="10-11-23118 10:45:55.200484" level=debug msg=BEGIN component=bun duration="133µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:56.656503" level=debug msg=COMMIT component=bun duration=2.912ms operation=COMMIT
              +bench | time="10-11-23118 10:45:56.665074" level=debug msg=BEGIN component=bun duration="129µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:58.079639" level=debug msg=COMMIT component=bun duration=11.093ms operation=COMMIT
              +bench | time="10-11-23118 10:45:58.092603" level=debug msg=BEGIN component=bun duration="126µs" operation=BEGIN
              +bench | time="10-11-23118 10:45:59.538445" level=debug msg=COMMIT component=bun duration=9.296ms operation=COMMIT
              +bench | time="10-11-23118 10:45:59.547224" level=debug msg=BEGIN component=bun duration="125µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:00.993951" level=debug msg=COMMIT component=bun duration=4.331ms operation=COMMIT
              +bench | time="10-11-23118 10:46:01.008357" level=debug msg=BEGIN component=bun duration="122µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:02.488559" level=debug msg=COMMIT component=bun duration=11.137ms operation=COMMIT
              +bench | time="10-11-23118 10:46:02.496991" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:03.974745" level=debug msg=COMMIT component=bun duration=43.745ms operation=COMMIT
              +bench | time="10-11-23118 10:46:03.983398" level=debug msg=BEGIN component=bun duration="171µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:05.413908" level=debug msg=COMMIT component=bun duration=2.993ms operation=COMMIT
              +bench | time="10-11-23118 10:46:05.429065" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:06.863320" level=debug msg=COMMIT component=bun duration=3.289ms operation=COMMIT
              +bench | time="10-11-23118 10:46:06.878791" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:08.337277" level=debug msg=COMMIT component=bun duration=3.369ms operation=COMMIT
              +bench | time="10-11-23118 10:46:08.351886" level=debug msg=BEGIN component=bun duration="141µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:09.762442" level=debug msg=COMMIT component=bun duration=3.059ms operation=COMMIT
              +bench | time="10-11-23118 10:46:09.779205" level=debug msg=BEGIN component=bun duration="146µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:11.265611" level=debug msg=COMMIT component=bun duration=12.904ms operation=COMMIT
              +bench | time="10-11-23118 10:46:11.282242" level=debug msg=BEGIN component=bun duration="149µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:12.707920" level=debug msg=COMMIT component=bun duration=12.043ms operation=COMMIT
              +bench | time="10-11-23118 10:46:12.724619" level=debug msg=BEGIN component=bun duration="209µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:14.183584" level=debug msg=COMMIT component=bun duration=3.346ms operation=COMMIT
              +bench | time="10-11-23118 10:46:14.199108" level=debug msg=BEGIN component=bun duration="223µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:15.624566" level=debug msg=COMMIT component=bun duration=3.301ms operation=COMMIT
              +bench | time="10-11-23118 10:46:15.641148" level=debug msg=BEGIN component=bun duration="141µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:17.114465" level=debug msg=COMMIT component=bun duration=14.025ms operation=COMMIT
              +bench | time="10-11-23118 10:46:17.127333" level=debug msg=BEGIN component=bun duration="156µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:18.559936" level=debug msg=COMMIT component=bun duration=11.719ms operation=COMMIT
              +bench | time="10-11-23118 10:46:18.567940" level=debug msg=BEGIN component=bun duration="101µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:20.021838" level=debug msg=COMMIT component=bun duration=11.28ms operation=COMMIT
              +bench | time="10-11-23118 10:46:20.037557" level=debug msg=BEGIN component=bun duration="142µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:21.474123" level=debug msg=COMMIT component=bun duration=3.307ms operation=COMMIT
              +bench | time="10-11-23118 10:46:21.482099" level=debug msg=BEGIN component=bun duration="110µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:22.925410" level=debug msg=COMMIT component=bun duration=3.84ms operation=COMMIT
              +bench | time="10-11-23118 10:46:22.933686" level=debug msg=BEGIN component=bun duration="98µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:24.407568" level=debug msg=COMMIT component=bun duration=53.206ms operation=COMMIT
              +bench | time="10-11-23118 10:46:24.424807" level=debug msg=BEGIN component=bun duration="172µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:25.970993" level=debug msg=COMMIT component=bun duration=52.803ms operation=COMMIT
              +bench | time="10-11-23118 10:46:25.990238" level=debug msg=BEGIN component=bun duration="191µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:27.428056" level=debug msg=COMMIT component=bun duration=3.229ms operation=COMMIT
              +bench | time="10-11-23118 10:46:27.442655" level=debug msg=BEGIN component=bun duration="124µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:28.916003" level=debug msg=COMMIT component=bun duration=11.031ms operation=COMMIT
              +bench | time="10-11-23118 10:46:28.931748" level=debug msg=BEGIN component=bun duration="141µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:30.383673" level=debug msg=COMMIT component=bun duration=3.534ms operation=COMMIT
              +bench | time="10-11-23118 10:46:30.392360" level=debug msg=BEGIN component=bun duration="151µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:31.872359" level=debug msg=COMMIT component=bun duration=19.44ms operation=COMMIT
              +bench | time="10-11-23118 10:46:31.880665" level=debug msg=BEGIN component=bun duration="119µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:33.301463" level=debug msg=COMMIT component=bun duration=4.419ms operation=COMMIT
              +bench | time="10-11-23118 10:46:33.317489" level=debug msg=BEGIN component=bun duration="135µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:34.760394" level=debug msg=COMMIT component=bun duration=2.983ms operation=COMMIT
              +bench | time="10-11-23118 10:46:34.776063" level=debug msg=BEGIN component=bun duration="147µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:36.218540" level=debug msg=COMMIT component=bun duration=6.942ms operation=COMMIT
              +bench | time="10-11-23118 10:46:36.226893" level=debug msg=BEGIN component=bun duration="135µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:37.664664" level=debug msg=COMMIT component=bun duration=4.366ms operation=COMMIT
              +bench | time="10-11-23118 10:46:37.673394" level=debug msg=BEGIN component=bun duration="158µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.111754" level=debug msg=COMMIT component=bun duration=3.342ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.111917" level=debug msg=BEGIN component=bun duration="99µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.116196" level=debug msg=COMMIT component=bun duration=2.834ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.116313" level=debug msg=BEGIN component=bun duration="75µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.119869" level=debug msg=COMMIT component=bun duration=2.822ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.119976" level=debug msg=BEGIN component=bun duration="80µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.123375" level=debug msg=COMMIT component=bun duration=2.824ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.123474" level=debug msg=BEGIN component=bun duration="73µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.126891" level=debug msg=COMMIT component=bun duration=2.761ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.126987" level=debug msg=BEGIN component=bun duration="67µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.130443" level=debug msg=COMMIT component=bun duration=2.787ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.130541" level=debug msg=BEGIN component=bun duration="76µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.134074" level=debug msg=COMMIT component=bun duration=2.834ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.134167" level=debug msg=BEGIN component=bun duration="65µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.137576" level=debug msg=COMMIT component=bun duration=2.825ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.137674" level=debug msg=BEGIN component=bun duration="76µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.141079" level=debug msg=COMMIT component=bun duration=2.834ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.141182" level=debug msg=BEGIN component=bun duration="80µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.144531" level=debug msg=COMMIT component=bun duration=2.789ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.144619" level=debug msg=BEGIN component=bun duration="66µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.147938" level=debug msg=COMMIT component=bun duration=2.773ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.148055" level=debug msg=BEGIN component=bun duration="82µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.151605" level=debug msg=COMMIT component=bun duration=2.888ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.151715" level=debug msg=BEGIN component=bun duration="72µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.155120" level=debug msg=COMMIT component=bun duration=2.806ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.155210" level=debug msg=BEGIN component=bun duration="64µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.158560" level=debug msg=COMMIT component=bun duration=2.81ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.158663" level=debug msg=BEGIN component=bun duration="73µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.162196" level=debug msg=COMMIT component=bun duration=2.85ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.162276" level=debug msg=BEGIN component=bun duration="59µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.165594" level=debug msg=COMMIT component=bun duration=2.814ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.165691" level=debug msg=BEGIN component=bun duration="70µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.168989" level=debug msg=COMMIT component=bun duration=2.77ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.169073" level=debug msg=BEGIN component=bun duration="63µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.172566" level=debug msg=COMMIT component=bun duration=2.845ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.172660" level=debug msg=BEGIN component=bun duration="66µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.176011" level=debug msg=COMMIT component=bun duration=2.833ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.176108" level=debug msg=BEGIN component=bun duration="70µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.179407" level=debug msg=COMMIT component=bun duration=2.784ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.179499" level=debug msg=BEGIN component=bun duration="71µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.182812" level=debug msg=COMMIT component=bun duration=2.825ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.182902" level=debug msg=BEGIN component=bun duration="68µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.186206" level=debug msg=COMMIT component=bun duration=2.809ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.186297" level=debug msg=BEGIN component=bun duration="66µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.195261" level=debug msg=COMMIT component=bun duration=8.436ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.195364" level=debug msg=BEGIN component=bun duration="73µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.198715" level=debug msg=COMMIT component=bun duration=2.789ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.198814" level=debug msg=BEGIN component=bun duration="77µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.202247" level=debug msg=COMMIT component=bun duration=2.869ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.202355" level=debug msg=BEGIN component=bun duration="73µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.205794" level=debug msg=COMMIT component=bun duration=2.789ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.205890" level=debug msg=BEGIN component=bun duration="70µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.209222" level=debug msg=COMMIT component=bun duration=2.776ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.209312" level=debug msg=BEGIN component=bun duration="68µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.212639" level=debug msg=COMMIT component=bun duration=2.844ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.212730" level=debug msg=BEGIN component=bun duration="70µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.216102" level=debug msg=COMMIT component=bun duration=2.862ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.216205" level=debug msg=BEGIN component=bun duration="78µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.219612" level=debug msg=COMMIT component=bun duration=2.787ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.219725" level=debug msg=BEGIN component=bun duration="92µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.223015" level=debug msg=COMMIT component=bun duration=2.747ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.223105" level=debug msg=BEGIN component=bun duration="65µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.228164" level=debug msg=COMMIT component=bun duration=4.541ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.228255" level=debug msg=BEGIN component=bun duration="67µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.231553" level=debug msg=COMMIT component=bun duration=2.828ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.231658" level=debug msg=BEGIN component=bun duration="77µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.234954" level=debug msg=COMMIT component=bun duration=2.781ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.235041" level=debug msg=BEGIN component=bun duration="64µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.238291" level=debug msg=COMMIT component=bun duration=2.758ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.238389" level=debug msg=BEGIN component=bun duration="72µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.241750" level=debug msg=COMMIT component=bun duration=2.795ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.241840" level=debug msg=BEGIN component=bun duration="69µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.245203" level=debug msg=COMMIT component=bun duration=2.806ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.245288" level=debug msg=BEGIN component=bun duration="64µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.248543" level=debug msg=COMMIT component=bun duration=2.789ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.248632" level=debug msg=BEGIN component=bun duration="64µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.251869" level=debug msg=COMMIT component=bun duration=2.734ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.251973" level=debug msg=BEGIN component=bun duration="79µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.255705" level=debug msg=COMMIT component=bun duration=2.849ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.255797" level=debug msg=BEGIN component=bun duration="73µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.259398" level=debug msg=COMMIT component=bun duration=2.835ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.259564" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.263289" level=debug msg=COMMIT component=bun duration=2.832ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.263393" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.267027" level=debug msg=COMMIT component=bun duration=2.839ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.267131" level=debug msg=BEGIN component=bun duration="82µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.270734" level=debug msg=COMMIT component=bun duration=2.776ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.270877" level=debug msg=BEGIN component=bun duration="101µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.274595" level=debug msg=COMMIT component=bun duration=2.8ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.274695" level=debug msg=BEGIN component=bun duration="80µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.278335" level=debug msg=COMMIT component=bun duration=2.854ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.278451" level=debug msg=BEGIN component=bun duration="92µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.281883" level=debug msg=COMMIT component=bun duration=2.805ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.281982" level=debug msg=BEGIN component=bun duration="79µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.285270" level=debug msg=COMMIT component=bun duration=2.8ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.285513" level=debug msg=BEGIN component=bun duration="61µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.289358" level=debug msg=COMMIT component=bun duration=2.916ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.289537" level=debug msg=BEGIN component=bun duration="130µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.293285" level=debug msg=COMMIT component=bun duration=2.846ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.293406" level=debug msg=BEGIN component=bun duration="98µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.297021" level=debug msg=COMMIT component=bun duration=2.829ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.297135" level=debug msg=BEGIN component=bun duration="93µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.300787" level=debug msg=COMMIT component=bun duration=2.879ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.300898" level=debug msg=BEGIN component=bun duration="93µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.304513" level=debug msg=COMMIT component=bun duration=2.853ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.304636" level=debug msg=BEGIN component=bun duration="105µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.308303" level=debug msg=COMMIT component=bun duration=2.869ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.308410" level=debug msg=BEGIN component=bun duration="91µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.311924" level=debug msg=COMMIT component=bun duration=2.748ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.312038" level=debug msg=BEGIN component=bun duration="92µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.315671" level=debug msg=COMMIT component=bun duration=2.843ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.315802" level=debug msg=BEGIN component=bun duration="93µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.319579" level=debug msg=COMMIT component=bun duration=2.86ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.319699" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.323377" level=debug msg=COMMIT component=bun duration=2.866ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.323557" level=debug msg=BEGIN component=bun duration="139µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.327337" level=debug msg=COMMIT component=bun duration=2.865ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.327451" level=debug msg=BEGIN component=bun duration="93µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.330711" level=debug msg=COMMIT component=bun duration=2.734ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.330838" level=debug msg=BEGIN component=bun duration="87µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.335181" level=debug msg=COMMIT component=bun duration=3.771ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.335314" level=debug msg=BEGIN component=bun duration="83µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.339118" level=debug msg=COMMIT component=bun duration=2.869ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.339246" level=debug msg=BEGIN component=bun duration="87µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.342956" level=debug msg=COMMIT component=bun duration=2.891ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.343105" level=debug msg=BEGIN component=bun duration="104µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.346827" level=debug msg=COMMIT component=bun duration=2.853ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.346957" level=debug msg=BEGIN component=bun duration="91µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.350571" level=debug msg=COMMIT component=bun duration=2.795ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.350722" level=debug msg=BEGIN component=bun duration="106µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.354522" level=debug msg=COMMIT component=bun duration=2.903ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.354651" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.358027" level=debug msg=COMMIT component=bun duration=2.755ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.358164" level=debug msg=BEGIN component=bun duration="92µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.361469" level=debug msg=COMMIT component=bun duration=2.768ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.361598" level=debug msg=BEGIN component=bun duration="88µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.364934" level=debug msg=COMMIT component=bun duration=2.741ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.365054" level=debug msg=BEGIN component=bun duration="80µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.368334" level=debug msg=COMMIT component=bun duration=2.756ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.368461" level=debug msg=BEGIN component=bun duration="78µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.371725" level=debug msg=COMMIT component=bun duration=2.738ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.371862" level=debug msg=BEGIN component=bun duration="99µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.375751" level=debug msg=COMMIT component=bun duration=2.885ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.375889" level=debug msg=BEGIN component=bun duration="113µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.379658" level=debug msg=COMMIT component=bun duration=2.905ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.379813" level=debug msg=BEGIN component=bun duration="110µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.383459" level=debug msg=COMMIT component=bun duration=2.795ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.383633" level=debug msg=BEGIN component=bun duration="114µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.387416" level=debug msg=COMMIT component=bun duration=2.884ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.387590" level=debug msg=BEGIN component=bun duration="132µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.391176" level=debug msg=COMMIT component=bun duration=2.733ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.391311" level=debug msg=BEGIN component=bun duration="96µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.395021" level=debug msg=COMMIT component=bun duration=2.878ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.395171" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.398927" level=debug msg=COMMIT component=bun duration=2.913ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.399091" level=debug msg=BEGIN component=bun duration="119µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.402916" level=debug msg=COMMIT component=bun duration=2.902ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.403082" level=debug msg=BEGIN component=bun duration="119µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.406788" level=debug msg=COMMIT component=bun duration=2.835ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.406925" level=debug msg=BEGIN component=bun duration="92µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.410784" level=debug msg=COMMIT component=bun duration=2.884ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.410941" level=debug msg=BEGIN component=bun duration="116µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.414645" level=debug msg=COMMIT component=bun duration=2.842ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.414782" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.418161" level=debug msg=COMMIT component=bun duration=2.77ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.418287" level=debug msg=BEGIN component=bun duration="86µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.421735" level=debug msg=COMMIT component=bun duration=2.855ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.421876" level=debug msg=BEGIN component=bun duration="98µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.425289" level=debug msg=COMMIT component=bun duration=2.825ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.425437" level=debug msg=BEGIN component=bun duration="105µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.428755" level=debug msg=COMMIT component=bun duration=2.744ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.428877" level=debug msg=BEGIN component=bun duration="83µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.432189" level=debug msg=COMMIT component=bun duration=2.742ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.432305" level=debug msg=BEGIN component=bun duration="79µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.435795" level=debug msg=COMMIT component=bun duration=2.971ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.435904" level=debug msg=BEGIN component=bun duration="72µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.439235" level=debug msg=COMMIT component=bun duration=2.822ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.439350" level=debug msg=BEGIN component=bun duration="76µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.442745" level=debug msg=COMMIT component=bun duration=2.789ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.442863" level=debug msg=BEGIN component=bun duration="78µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.446218" level=debug msg=COMMIT component=bun duration=2.788ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.446340" level=debug msg=BEGIN component=bun duration="79µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.450142" level=debug msg=COMMIT component=bun duration=2.822ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.450312" level=debug msg=BEGIN component=bun duration="130µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.453984" level=debug msg=COMMIT component=bun duration=2.859ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.454150" level=debug msg=BEGIN component=bun duration="125µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.457892" level=debug msg=COMMIT component=bun duration=2.861ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.458034" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.461717" level=debug msg=COMMIT component=bun duration=2.853ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.461845" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.465581" level=debug msg=COMMIT component=bun duration=2.875ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.465723" level=debug msg=BEGIN component=bun duration="99µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.469429" level=debug msg=COMMIT component=bun duration=2.905ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.469580" level=debug msg=BEGIN component=bun duration="115µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.473329" level=debug msg=COMMIT component=bun duration=2.885ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.473489" level=debug msg=BEGIN component=bun duration="114µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.477521" level=debug msg=COMMIT component=bun duration=3.201ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.477674" level=debug msg=BEGIN component=bun duration="117µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.481617" level=debug msg=COMMIT component=bun duration=3.094ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.481770" level=debug msg=BEGIN component=bun duration="110µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.485417" level=debug msg=COMMIT component=bun duration=2.845ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.485596" level=debug msg=BEGIN component=bun duration="134µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.489386" level=debug msg=COMMIT component=bun duration=2.901ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.489538" level=debug msg=BEGIN component=bun duration="109µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.493289" level=debug msg=COMMIT component=bun duration=2.771ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.493428" level=debug msg=BEGIN component=bun duration="103µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.497250" level=debug msg=COMMIT component=bun duration=2.882ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.497401" level=debug msg=BEGIN component=bun duration="107µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.501040" level=debug msg=COMMIT component=bun duration=2.804ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.501202" level=debug msg=BEGIN component=bun duration="125µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.504941" level=debug msg=COMMIT component=bun duration=2.857ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.505077" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.508864" level=debug msg=COMMIT component=bun duration=2.915ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.509030" level=debug msg=BEGIN component=bun duration="124µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.512592" level=debug msg=COMMIT component=bun duration=2.723ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.512753" level=debug msg=BEGIN component=bun duration="125µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.516478" level=debug msg=COMMIT component=bun duration=2.892ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.516625" level=debug msg=BEGIN component=bun duration="109µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.520402" level=debug msg=COMMIT component=bun duration=2.876ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.520555" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.524314" level=debug msg=COMMIT component=bun duration=2.852ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.524477" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.528595" level=debug msg=COMMIT component=bun duration=3.262ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.528789" level=debug msg=BEGIN component=bun duration="144µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.532670" level=debug msg=COMMIT component=bun duration=2.92ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.532823" level=debug msg=BEGIN component=bun duration="114µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.536772" level=debug msg=COMMIT component=bun duration=2.95ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.536953" level=debug msg=BEGIN component=bun duration="136µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.545901" level=debug msg=COMMIT component=bun duration=8.022ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.546126" level=debug msg=BEGIN component=bun duration="173µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.550066" level=debug msg=COMMIT component=bun duration=2.912ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.550231" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.554379" level=debug msg=COMMIT component=bun duration=2.959ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.554539" level=debug msg=BEGIN component=bun duration="118µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.558321" level=debug msg=COMMIT component=bun duration=2.868ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.558502" level=debug msg=BEGIN component=bun duration="138µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.562392" level=debug msg=COMMIT component=bun duration=2.929ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.562556" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.566579" level=debug msg=COMMIT component=bun duration=2.929ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.566735" level=debug msg=BEGIN component=bun duration="114µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.570523" level=debug msg=COMMIT component=bun duration=2.857ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.570687" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.574551" level=debug msg=COMMIT component=bun duration=2.897ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.574793" level=debug msg=BEGIN component=bun duration="185µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.578931" level=debug msg=COMMIT component=bun duration=2.928ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.579087" level=debug msg=BEGIN component=bun duration="110µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.582861" level=debug msg=COMMIT component=bun duration=2.858ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.583019" level=debug msg=BEGIN component=bun duration="115µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.586855" level=debug msg=COMMIT component=bun duration=2.867ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.587009" level=debug msg=BEGIN component=bun duration="109µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.590793" level=debug msg=COMMIT component=bun duration=2.88ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.590944" level=debug msg=BEGIN component=bun duration="105µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.594688" level=debug msg=COMMIT component=bun duration=2.884ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.594832" level=debug msg=BEGIN component=bun duration="104µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.598546" level=debug msg=COMMIT component=bun duration=2.874ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.598712" level=debug msg=BEGIN component=bun duration="116µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.602351" level=debug msg=COMMIT component=bun duration=2.772ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.602520" level=debug msg=BEGIN component=bun duration="116µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.606355" level=debug msg=COMMIT component=bun duration=2.93ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.606519" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.610314" level=debug msg=COMMIT component=bun duration=2.885ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.610481" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.614294" level=debug msg=COMMIT component=bun duration=2.89ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.614464" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.618139" level=debug msg=COMMIT component=bun duration=2.815ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.618306" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.622168" level=debug msg=COMMIT component=bun duration=2.904ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.622316" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.626077" level=debug msg=COMMIT component=bun duration=2.867ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.626239" level=debug msg=BEGIN component=bun duration="124µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.630034" level=debug msg=COMMIT component=bun duration=2.901ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.630205" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.633952" level=debug msg=COMMIT component=bun duration=2.858ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.634181" level=debug msg=BEGIN component=bun duration="186µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.638089" level=debug msg=COMMIT component=bun duration=2.857ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.638252" level=debug msg=BEGIN component=bun duration="119µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.642075" level=debug msg=COMMIT component=bun duration=2.889ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.642245" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.646137" level=debug msg=COMMIT component=bun duration=2.886ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.646312" level=debug msg=BEGIN component=bun duration="132µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.649990" level=debug msg=COMMIT component=bun duration=2.842ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.650173" level=debug msg=BEGIN component=bun duration="138µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.653895" level=debug msg=COMMIT component=bun duration=2.877ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.654072" level=debug msg=BEGIN component=bun duration="138µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.657750" level=debug msg=COMMIT component=bun duration=2.807ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.657941" level=debug msg=BEGIN component=bun duration="144µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.661772" level=debug msg=COMMIT component=bun duration=2.859ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.661944" level=debug msg=BEGIN component=bun duration="129µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.665696" level=debug msg=COMMIT component=bun duration=2.817ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.665881" level=debug msg=BEGIN component=bun duration="137µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.669609" level=debug msg=COMMIT component=bun duration=2.853ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.669766" level=debug msg=BEGIN component=bun duration="115µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.673555" level=debug msg=COMMIT component=bun duration=2.886ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.673709" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.677410" level=debug msg=COMMIT component=bun duration=2.86ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.677571" level=debug msg=BEGIN component=bun duration="119µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.681336" level=debug msg=COMMIT component=bun duration=2.904ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.681493" level=debug msg=BEGIN component=bun duration="114µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.687088" level=debug msg=COMMIT component=bun duration=4.664ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.687281" level=debug msg=BEGIN component=bun duration="146µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.691195" level=debug msg=COMMIT component=bun duration=2.928ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.691381" level=debug msg=BEGIN component=bun duration="139µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.695824" level=debug msg=COMMIT component=bun duration=3.203ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.696008" level=debug msg=BEGIN component=bun duration="136µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.699735" level=debug msg=COMMIT component=bun duration=2.793ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.699899" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.703686" level=debug msg=COMMIT component=bun duration=2.889ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.703862" level=debug msg=BEGIN component=bun duration="134µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.707645" level=debug msg=COMMIT component=bun duration=2.9ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.707803" level=debug msg=BEGIN component=bun duration="119µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.711586" level=debug msg=COMMIT component=bun duration=2.898ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.711736" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.715453" level=debug msg=COMMIT component=bun duration=2.815ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.715640" level=debug msg=BEGIN component=bun duration="129µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.719348" level=debug msg=COMMIT component=bun duration=2.826ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.719520" level=debug msg=BEGIN component=bun duration="134µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.723248" level=debug msg=COMMIT component=bun duration=2.854ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.723409" level=debug msg=BEGIN component=bun duration="118µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.727198" level=debug msg=COMMIT component=bun duration=2.881ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.727350" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.731033" level=debug msg=COMMIT component=bun duration=2.786ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.731164" level=debug msg=BEGIN component=bun duration="98µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.735017" level=debug msg=COMMIT component=bun duration=2.857ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.735189" level=debug msg=BEGIN component=bun duration="128µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.739188" level=debug msg=COMMIT component=bun duration=2.918ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.739326" level=debug msg=BEGIN component=bun duration="106µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.743171" level=debug msg=COMMIT component=bun duration=2.855ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.743374" level=debug msg=BEGIN component=bun duration="157µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.747356" level=debug msg=COMMIT component=bun duration=2.91ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.747511" level=debug msg=BEGIN component=bun duration="133µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.751335" level=debug msg=COMMIT component=bun duration=2.876ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.751528" level=debug msg=BEGIN component=bun duration="150µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.755309" level=debug msg=COMMIT component=bun duration=2.799ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.755511" level=debug msg=BEGIN component=bun duration="160µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.759494" level=debug msg=COMMIT component=bun duration=2.916ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.759622" level=debug msg=BEGIN component=bun duration="106µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.763365" level=debug msg=COMMIT component=bun duration=2.875ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.763567" level=debug msg=BEGIN component=bun duration="158µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.767253" level=debug msg=COMMIT component=bun duration=2.847ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.767369" level=debug msg=BEGIN component=bun duration="91µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.771051" level=debug msg=COMMIT component=bun duration=2.857ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.771187" level=debug msg=BEGIN component=bun duration="92µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.774871" level=debug msg=COMMIT component=bun duration=2.853ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.774988" level=debug msg=BEGIN component=bun duration="94µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.778628" level=debug msg=COMMIT component=bun duration=2.831ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.778792" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.782507" level=debug msg=COMMIT component=bun duration=2.857ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.782625" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.786316" level=debug msg=COMMIT component=bun duration=2.811ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.786482" level=debug msg=BEGIN component=bun duration="122µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.790197" level=debug msg=COMMIT component=bun duration=2.874ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.790312" level=debug msg=BEGIN component=bun duration="91µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.793831" level=debug msg=COMMIT component=bun duration=2.725ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.793981" level=debug msg=BEGIN component=bun duration="107µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.797705" level=debug msg=COMMIT component=bun duration=2.859ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.797834" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.801659" level=debug msg=COMMIT component=bun duration=3.015ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.801797" level=debug msg=BEGIN component=bun duration="93µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.805405" level=debug msg=COMMIT component=bun duration=2.811ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.805539" level=debug msg=BEGIN component=bun duration="95µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.809214" level=debug msg=COMMIT component=bun duration=2.855ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.809413" level=debug msg=BEGIN component=bun duration="160µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.813052" level=debug msg=COMMIT component=bun duration=2.796ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.813195" level=debug msg=BEGIN component=bun duration="124µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.816855" level=debug msg=COMMIT component=bun duration=2.81ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.816957" level=debug msg=BEGIN component=bun duration="85µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.820494" level=debug msg=COMMIT component=bun duration=2.788ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.820658" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.824332" level=debug msg=COMMIT component=bun duration=2.892ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.824473" level=debug msg=BEGIN component=bun duration="99µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.828114" level=debug msg=COMMIT component=bun duration=2.799ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.828266" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.832178" level=debug msg=COMMIT component=bun duration=2.815ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.832291" level=debug msg=BEGIN component=bun duration="87µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.835952" level=debug msg=COMMIT component=bun duration=2.867ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.836068" level=debug msg=BEGIN component=bun duration="94µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.839653" level=debug msg=COMMIT component=bun duration=2.808ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.839810" level=debug msg=BEGIN component=bun duration="115µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.843586" level=debug msg=COMMIT component=bun duration=2.922ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.843736" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.847631" level=debug msg=COMMIT component=bun duration=3.089ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.847774" level=debug msg=BEGIN component=bun duration="103µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.851460" level=debug msg=COMMIT component=bun duration=2.832ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.851623" level=debug msg=BEGIN component=bun duration="114µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.855236" level=debug msg=COMMIT component=bun duration=2.78ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.855386" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.859088" level=debug msg=COMMIT component=bun duration=2.838ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.859254" level=debug msg=BEGIN component=bun duration="126µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.862957" level=debug msg=COMMIT component=bun duration=2.825ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.863087" level=debug msg=BEGIN component=bun duration="96µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.866815" level=debug msg=COMMIT component=bun duration=2.856ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.866966" level=debug msg=BEGIN component=bun duration="114µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.870679" level=debug msg=COMMIT component=bun duration=2.828ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.870874" level=debug msg=BEGIN component=bun duration="147µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.874765" level=debug msg=COMMIT component=bun duration=2.777ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.874944" level=debug msg=BEGIN component=bun duration="134µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.878811" level=debug msg=COMMIT component=bun duration=2.805ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.879032" level=debug msg=BEGIN component=bun duration="151µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.882800" level=debug msg=COMMIT component=bun duration=2.818ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.882956" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.886760" level=debug msg=COMMIT component=bun duration=2.916ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.886922" level=debug msg=BEGIN component=bun duration="125µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.890648" level=debug msg=COMMIT component=bun duration=2.869ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.890800" level=debug msg=BEGIN component=bun duration="110µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.894535" level=debug msg=COMMIT component=bun duration=2.891ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.894694" level=debug msg=BEGIN component=bun duration="117µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.898409" level=debug msg=COMMIT component=bun duration=2.864ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.898560" level=debug msg=BEGIN component=bun duration="112µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.902281" level=debug msg=COMMIT component=bun duration=2.932ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.902447" level=debug msg=BEGIN component=bun duration="124µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.906099" level=debug msg=COMMIT component=bun duration=2.834ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.906257" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.909931" level=debug msg=COMMIT component=bun duration=2.871ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.910081" level=debug msg=BEGIN component=bun duration="113µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.913631" level=debug msg=COMMIT component=bun duration=2.762ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.913789" level=debug msg=BEGIN component=bun duration="119µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.917396" level=debug msg=COMMIT component=bun duration=2.781ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.917552" level=debug msg=BEGIN component=bun duration="118µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.921188" level=debug msg=COMMIT component=bun duration=2.826ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.921346" level=debug msg=BEGIN component=bun duration="124µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.925048" level=debug msg=COMMIT component=bun duration=2.852ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.925295" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.928978" level=debug msg=COMMIT component=bun duration=2.835ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.929144" level=debug msg=BEGIN component=bun duration="124µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.932761" level=debug msg=COMMIT component=bun duration=2.797ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.932933" level=debug msg=BEGIN component=bun duration="135µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.936541" level=debug msg=COMMIT component=bun duration=2.75ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.936691" level=debug msg=BEGIN component=bun duration="113µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.940449" level=debug msg=COMMIT component=bun duration=2.821ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.940606" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.944285" level=debug msg=COMMIT component=bun duration=2.869ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.944452" level=debug msg=BEGIN component=bun duration="124µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.948093" level=debug msg=COMMIT component=bun duration=2.849ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.948279" level=debug msg=BEGIN component=bun duration="131µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.951965" level=debug msg=COMMIT component=bun duration=2.824ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.952126" level=debug msg=BEGIN component=bun duration="122µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.955813" level=debug msg=COMMIT component=bun duration=2.855ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.955979" level=debug msg=BEGIN component=bun duration="126µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.959663" level=debug msg=COMMIT component=bun duration=2.811ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.959829" level=debug msg=BEGIN component=bun duration="126µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.963507" level=debug msg=COMMIT component=bun duration=2.862ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.963673" level=debug msg=BEGIN component=bun duration="122µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.967394" level=debug msg=COMMIT component=bun duration=2.841ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.967823" level=debug msg=BEGIN component=bun duration="192µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.971798" level=debug msg=COMMIT component=bun duration=2.867ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.971952" level=debug msg=BEGIN component=bun duration="116µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.975644" level=debug msg=COMMIT component=bun duration=2.867ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.975802" level=debug msg=BEGIN component=bun duration="118µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.979426" level=debug msg=COMMIT component=bun duration=2.777ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.979614" level=debug msg=BEGIN component=bun duration="153µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.983374" level=debug msg=COMMIT component=bun duration=2.845ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.983535" level=debug msg=BEGIN component=bun duration="125µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.987290" level=debug msg=COMMIT component=bun duration=2.845ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.987445" level=debug msg=BEGIN component=bun duration="114µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.991159" level=debug msg=COMMIT component=bun duration=2.812ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.991353" level=debug msg=BEGIN component=bun duration="152µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.995147" level=debug msg=COMMIT component=bun duration=2.879ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.995343" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:39.999099" level=debug msg=COMMIT component=bun duration=2.841ms operation=COMMIT
              +bench | time="10-11-23118 10:46:39.999314" level=debug msg=BEGIN component=bun duration="167µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.003063" level=debug msg=COMMIT component=bun duration=2.84ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.003219" level=debug msg=BEGIN component=bun duration="118µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.006933" level=debug msg=COMMIT component=bun duration=2.81ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.007108" level=debug msg=BEGIN component=bun duration="132µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.010877" level=debug msg=COMMIT component=bun duration=2.868ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.011056" level=debug msg=BEGIN component=bun duration="129µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.018698" level=debug msg=COMMIT component=bun duration=6.683ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.018863" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.022673" level=debug msg=COMMIT component=bun duration=2.858ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.022819" level=debug msg=BEGIN component=bun duration="104µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.028824" level=debug msg=COMMIT component=bun duration=5.106ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.028995" level=debug msg=BEGIN component=bun duration="134µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.032784" level=debug msg=COMMIT component=bun duration=2.892ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.032927" level=debug msg=BEGIN component=bun duration="107µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.036613" level=debug msg=COMMIT component=bun duration=2.865ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.036767" level=debug msg=BEGIN component=bun duration="116µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.040448" level=debug msg=COMMIT component=bun duration=2.833ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.040634" level=debug msg=BEGIN component=bun duration="148µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.044395" level=debug msg=COMMIT component=bun duration=2.895ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.044557" level=debug msg=BEGIN component=bun duration="113µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.048193" level=debug msg=COMMIT component=bun duration=2.837ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.048367" level=debug msg=BEGIN component=bun duration="132µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.052011" level=debug msg=COMMIT component=bun duration=2.79ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.052156" level=debug msg=BEGIN component=bun duration="104µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.055729" level=debug msg=COMMIT component=bun duration=2.739ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.055863" level=debug msg=BEGIN component=bun duration="94µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.059436" level=debug msg=COMMIT component=bun duration=2.809ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.059603" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.063307" level=debug msg=COMMIT component=bun duration=2.866ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.063441" level=debug msg=BEGIN component=bun duration="110µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.066974" level=debug msg=COMMIT component=bun duration=2.77ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.067147" level=debug msg=BEGIN component=bun duration="131µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.070849" level=debug msg=COMMIT component=bun duration=2.859ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.070973" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.074500" level=debug msg=COMMIT component=bun duration=2.718ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.074609" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.078235" level=debug msg=COMMIT component=bun duration=2.843ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.078349" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.081951" level=debug msg=COMMIT component=bun duration=2.837ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.082060" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.085681" level=debug msg=COMMIT component=bun duration=2.843ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.085822" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.089439" level=debug msg=COMMIT component=bun duration=2.82ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.089612" level=debug msg=BEGIN component=bun duration="131µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.093258" level=debug msg=COMMIT component=bun duration=2.847ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.093436" level=debug msg=BEGIN component=bun duration="141µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.097276" level=debug msg=COMMIT component=bun duration=2.91ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.097532" level=debug msg=BEGIN component=bun duration="154µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.101382" level=debug msg=COMMIT component=bun duration=2.799ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.101528" level=debug msg=BEGIN component=bun duration="101µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.105114" level=debug msg=COMMIT component=bun duration=2.711ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.105283" level=debug msg=BEGIN component=bun duration="107µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.108962" level=debug msg=COMMIT component=bun duration=2.762ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.109097" level=debug msg=BEGIN component=bun duration="93µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.112903" level=debug msg=COMMIT component=bun duration=2.793ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.113033" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.116601" level=debug msg=COMMIT component=bun duration=2.781ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.116730" level=debug msg=BEGIN component=bun duration="84µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.120330" level=debug msg=COMMIT component=bun duration=2.783ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.120474" level=debug msg=BEGIN component=bun duration="99µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.124082" level=debug msg=COMMIT component=bun duration=2.791ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.124247" level=debug msg=BEGIN component=bun duration="117µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.127886" level=debug msg=COMMIT component=bun duration=2.725ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.128029" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.131337" level=debug msg=COMMIT component=bun duration=2.663ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.131506" level=debug msg=BEGIN component=bun duration="136µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.135125" level=debug msg=COMMIT component=bun duration=2.757ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.135263" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.138865" level=debug msg=COMMIT component=bun duration=2.758ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.138997" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.142596" level=debug msg=COMMIT component=bun duration=2.761ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.142718" level=debug msg=BEGIN component=bun duration="85µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.146289" level=debug msg=COMMIT component=bun duration=2.75ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.146416" level=debug msg=BEGIN component=bun duration="88µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.149966" level=debug msg=COMMIT component=bun duration=2.773ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.150091" level=debug msg=BEGIN component=bun duration="88µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.153680" level=debug msg=COMMIT component=bun duration=2.75ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.153801" level=debug msg=BEGIN component=bun duration="86µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.157312" level=debug msg=COMMIT component=bun duration=2.761ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.157453" level=debug msg=BEGIN component=bun duration="101µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.161107" level=debug msg=COMMIT component=bun duration=2.746ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.161236" level=debug msg=BEGIN component=bun duration="91µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.164779" level=debug msg=COMMIT component=bun duration=2.748ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.164933" level=debug msg=BEGIN component=bun duration="110µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.168745" level=debug msg=COMMIT component=bun duration=2.969ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.168886" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.172478" level=debug msg=COMMIT component=bun duration=2.776ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.172647" level=debug msg=BEGIN component=bun duration="131µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.176534" level=debug msg=COMMIT component=bun duration=3.103ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.176659" level=debug msg=BEGIN component=bun duration="82µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.180265" level=debug msg=COMMIT component=bun duration=2.778ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.180405" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.184047" level=debug msg=COMMIT component=bun duration=2.801ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.184208" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.187751" level=debug msg=COMMIT component=bun duration=2.767ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.187905" level=debug msg=BEGIN component=bun duration="107µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.191441" level=debug msg=COMMIT component=bun duration=2.742ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.191602" level=debug msg=BEGIN component=bun duration="101µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.195106" level=debug msg=COMMIT component=bun duration=2.729ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.195242" level=debug msg=BEGIN component=bun duration="95µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.198957" level=debug msg=COMMIT component=bun duration=2.793ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.199099" level=debug msg=BEGIN component=bun duration="100µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.202763" level=debug msg=COMMIT component=bun duration=2.783ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.202927" level=debug msg=BEGIN component=bun duration="119µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.206640" level=debug msg=COMMIT component=bun duration=2.789ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.206795" level=debug msg=BEGIN component=bun duration="106µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.210524" level=debug msg=COMMIT component=bun duration=2.801ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.210697" level=debug msg=BEGIN component=bun duration="132µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.218171" level=debug msg=COMMIT component=bun duration=6.514ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.218297" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.222010" level=debug msg=COMMIT component=bun duration=2.901ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.222215" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.225838" level=debug msg=COMMIT component=bun duration=2.773ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.226024" level=debug msg=BEGIN component=bun duration="143µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.229778" level=debug msg=COMMIT component=bun duration=2.8ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.229947" level=debug msg=BEGIN component=bun duration="126µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.233459" level=debug msg=COMMIT component=bun duration=2.71ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.233605" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.237179" level=debug msg=COMMIT component=bun duration=2.759ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.237307" level=debug msg=BEGIN component=bun duration="88µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.240879" level=debug msg=COMMIT component=bun duration=2.738ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.241004" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.244548" level=debug msg=COMMIT component=bun duration=2.728ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.244688" level=debug msg=BEGIN component=bun duration="95µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.248723" level=debug msg=COMMIT component=bun duration=2.802ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.248880" level=debug msg=BEGIN component=bun duration="93µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.252397" level=debug msg=COMMIT component=bun duration=2.728ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.252510" level=debug msg=BEGIN component=bun duration="77µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.255960" level=debug msg=COMMIT component=bun duration=2.719ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.256085" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.259884" level=debug msg=COMMIT component=bun duration=3.03ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.259999" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.263491" level=debug msg=COMMIT component=bun duration=2.747ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.263634" level=debug msg=BEGIN component=bun duration="94µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.267142" level=debug msg=COMMIT component=bun duration=2.718ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.267256" level=debug msg=BEGIN component=bun duration="78µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.270791" level=debug msg=COMMIT component=bun duration=2.75ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.270915" level=debug msg=BEGIN component=bun duration="83µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.274393" level=debug msg=COMMIT component=bun duration=2.715ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.274526" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.278017" level=debug msg=COMMIT component=bun duration=2.745ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.278132" level=debug msg=BEGIN component=bun duration="78µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.281637" level=debug msg=COMMIT component=bun duration=2.769ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.281748" level=debug msg=BEGIN component=bun duration="78µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.285272" level=debug msg=COMMIT component=bun duration=2.795ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.285405" level=debug msg=BEGIN component=bun duration="91µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.288964" level=debug msg=COMMIT component=bun duration=2.754ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.289101" level=debug msg=BEGIN component=bun duration="96µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.292661" level=debug msg=COMMIT component=bun duration=2.755ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.292851" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.296135" level=debug msg=COMMIT component=bun duration=2.73ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.296267" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.299596" level=debug msg=COMMIT component=bun duration=2.793ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.299736" level=debug msg=BEGIN component=bun duration="100µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.302983" level=debug msg=COMMIT component=bun duration=2.701ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.303123" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.306545" level=debug msg=COMMIT component=bun duration=2.727ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.306674" level=debug msg=BEGIN component=bun duration="87µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.309955" level=debug msg=COMMIT component=bun duration=2.709ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.310106" level=debug msg=BEGIN component=bun duration="105µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.313366" level=debug msg=COMMIT component=bun duration=2.685ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.313539" level=debug msg=BEGIN component=bun duration="129µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.317152" level=debug msg=COMMIT component=bun duration=2.756ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.317285" level=debug msg=BEGIN component=bun duration="94µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.320838" level=debug msg=COMMIT component=bun duration=2.762ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.320974" level=debug msg=BEGIN component=bun duration="93µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.324562" level=debug msg=COMMIT component=bun duration=2.806ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.324698" level=debug msg=BEGIN component=bun duration="92µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.328236" level=debug msg=COMMIT component=bun duration=2.77ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.328370" level=debug msg=BEGIN component=bun duration="88µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.331862" level=debug msg=COMMIT component=bun duration=2.723ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.331990" level=debug msg=BEGIN component=bun duration="91µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.335575" level=debug msg=COMMIT component=bun duration=2.799ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.335712" level=debug msg=BEGIN component=bun duration="94µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.339295" level=debug msg=COMMIT component=bun duration=2.8ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.339437" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.342933" level=debug msg=COMMIT component=bun duration=2.661ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.343047" level=debug msg=BEGIN component=bun duration="76µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.346651" level=debug msg=COMMIT component=bun duration=2.81ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.346878" level=debug msg=BEGIN component=bun duration="157µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.350957" level=debug msg=COMMIT component=bun duration=3.032ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.351098" level=debug msg=BEGIN component=bun duration="99µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.354817" level=debug msg=COMMIT component=bun duration=2.828ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.354942" level=debug msg=BEGIN component=bun duration="85µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.358628" level=debug msg=COMMIT component=bun duration=2.74ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.358759" level=debug msg=BEGIN component=bun duration="87µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.362274" level=debug msg=COMMIT component=bun duration=2.693ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.362400" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.365920" level=debug msg=COMMIT component=bun duration=2.757ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.366079" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.369564" level=debug msg=COMMIT component=bun duration=2.71ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.369696" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.374095" level=debug msg=COMMIT component=bun duration=3.566ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.374229" level=debug msg=BEGIN component=bun duration="92µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.379412" level=debug msg=COMMIT component=bun duration=4.126ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.379549" level=debug msg=BEGIN component=bun duration="95µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.384478" level=debug msg=COMMIT component=bun duration=4.135ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.384685" level=debug msg=BEGIN component=bun duration="149µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.388241" level=debug msg=COMMIT component=bun duration=2.889ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.388361" level=debug msg=BEGIN component=bun duration="78µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.391553" level=debug msg=COMMIT component=bun duration=2.685ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.391687" level=debug msg=BEGIN component=bun duration="91µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.395386" level=debug msg=COMMIT component=bun duration=2.748ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.395584" level=debug msg=BEGIN component=bun duration="148µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.399303" level=debug msg=COMMIT component=bun duration=2.811ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.399434" level=debug msg=BEGIN component=bun duration="105µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.403068" level=debug msg=COMMIT component=bun duration=2.722ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.403186" level=debug msg=BEGIN component=bun duration="99µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.406874" level=debug msg=COMMIT component=bun duration=2.749ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.406999" level=debug msg=BEGIN component=bun duration="106µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.410546" level=debug msg=COMMIT component=bun duration=2.712ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.410722" level=debug msg=BEGIN component=bun duration="127µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.414418" level=debug msg=COMMIT component=bun duration=2.763ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.414546" level=debug msg=BEGIN component=bun duration="105µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.418149" level=debug msg=COMMIT component=bun duration=2.759ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.418278" level=debug msg=BEGIN component=bun duration="105µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.421906" level=debug msg=COMMIT component=bun duration=2.795ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.422028" level=debug msg=BEGIN component=bun duration="104µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.425600" level=debug msg=COMMIT component=bun duration=2.758ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.425722" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.430930" level=debug msg=COMMIT component=bun duration=4.31ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.431113" level=debug msg=BEGIN component=bun duration="133µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.434847" level=debug msg=COMMIT component=bun duration=2.791ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.435025" level=debug msg=BEGIN component=bun duration="125µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.438673" level=debug msg=COMMIT component=bun duration=2.719ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.438844" level=debug msg=BEGIN component=bun duration="128µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.442695" level=debug msg=COMMIT component=bun duration=2.938ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.442869" level=debug msg=BEGIN component=bun duration="129µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.446601" level=debug msg=COMMIT component=bun duration=2.77ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.446773" level=debug msg=BEGIN component=bun duration="129µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.450480" level=debug msg=COMMIT component=bun duration=2.774ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.450634" level=debug msg=BEGIN component=bun duration="115µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.454300" level=debug msg=COMMIT component=bun duration=2.755ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.454433" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.458021" level=debug msg=COMMIT component=bun duration=2.746ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.458190" level=debug msg=BEGIN component=bun duration="129µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.461848" level=debug msg=COMMIT component=bun duration=2.768ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.461978" level=debug msg=BEGIN component=bun duration="106µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.465613" level=debug msg=COMMIT component=bun duration=2.783ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.465781" level=debug msg=BEGIN component=bun duration="125µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.469561" level=debug msg=COMMIT component=bun duration=2.841ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.469685" level=debug msg=BEGIN component=bun duration="101µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.473386" level=debug msg=COMMIT component=bun duration=2.785ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.473556" level=debug msg=BEGIN component=bun duration="124µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.477201" level=debug msg=COMMIT component=bun duration=2.784ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.477363" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.481010" level=debug msg=COMMIT component=bun duration=2.737ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.481141" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.484835" level=debug msg=COMMIT component=bun duration=2.8ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.485004" level=debug msg=BEGIN component=bun duration="128µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.488761" level=debug msg=COMMIT component=bun duration=2.806ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.488922" level=debug msg=BEGIN component=bun duration="126µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.492623" level=debug msg=COMMIT component=bun duration=2.79ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.492794" level=debug msg=BEGIN component=bun duration="129µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.496623" level=debug msg=COMMIT component=bun duration=2.951ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.496797" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.500130" level=debug msg=COMMIT component=bun duration=2.737ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.500234" level=debug msg=BEGIN component=bun duration="76µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.503433" level=debug msg=COMMIT component=bun duration=2.698ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.503588" level=debug msg=BEGIN component=bun duration="96µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.506857" level=debug msg=COMMIT component=bun duration=2.668ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.506951" level=debug msg=BEGIN component=bun duration="68µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.510173" level=debug msg=COMMIT component=bun duration=2.705ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.510325" level=debug msg=BEGIN component=bun duration="110µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.514211" level=debug msg=COMMIT component=bun duration=2.884ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.514346" level=debug msg=BEGIN component=bun duration="95µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.518108" level=debug msg=COMMIT component=bun duration=2.963ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.518224" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.521633" level=debug msg=COMMIT component=bun duration=2.793ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.521792" level=debug msg=BEGIN component=bun duration="96µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.525113" level=debug msg=COMMIT component=bun duration=2.735ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.525303" level=debug msg=BEGIN component=bun duration="129µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.528894" level=debug msg=COMMIT component=bun duration=2.825ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.529042" level=debug msg=BEGIN component=bun duration="105µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.532721" level=debug msg=COMMIT component=bun duration=2.754ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.532823" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.536011" level=debug msg=COMMIT component=bun duration=2.692ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.536141" level=debug msg=BEGIN component=bun duration="83µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.539373" level=debug msg=COMMIT component=bun duration=2.688ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.539460" level=debug msg=BEGIN component=bun duration="66µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.542711" level=debug msg=COMMIT component=bun duration=2.692ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.542829" level=debug msg=BEGIN component=bun duration="74µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.546021" level=debug msg=COMMIT component=bun duration=2.67ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.546144" level=debug msg=BEGIN component=bun duration="78µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.549849" level=debug msg=COMMIT component=bun duration=2.844ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.549994" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.553339" level=debug msg=COMMIT component=bun duration=2.756ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.553470" level=debug msg=BEGIN component=bun duration="88µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.556763" level=debug msg=COMMIT component=bun duration=2.756ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.556893" level=debug msg=BEGIN component=bun duration="87µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.560413" level=debug msg=COMMIT component=bun duration=2.717ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.560514" level=debug msg=BEGIN component=bun duration="79µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.563732" level=debug msg=COMMIT component=bun duration=2.676ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.563858" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.567193" level=debug msg=COMMIT component=bun duration=2.78ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.567352" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.571041" level=debug msg=COMMIT component=bun duration=2.777ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.571148" level=debug msg=BEGIN component=bun duration="85µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.574694" level=debug msg=COMMIT component=bun duration=2.748ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.574831" level=debug msg=BEGIN component=bun duration="93µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.578356" level=debug msg=COMMIT component=bun duration=2.701ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.578470" level=debug msg=BEGIN component=bun duration="88µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.581922" level=debug msg=COMMIT component=bun duration=2.682ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.582096" level=debug msg=BEGIN component=bun duration="122µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.585748" level=debug msg=COMMIT component=bun duration=2.801ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.585879" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.589312" level=debug msg=COMMIT component=bun duration=2.87ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.589405" level=debug msg=BEGIN component=bun duration="72µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.592668" level=debug msg=COMMIT component=bun duration=2.752ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.592762" level=debug msg=BEGIN component=bun duration="73µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.595984" level=debug msg=COMMIT component=bun duration=2.714ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.596076" level=debug msg=BEGIN component=bun duration="72µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.599371" level=debug msg=COMMIT component=bun duration=2.773ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.599506" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.602977" level=debug msg=COMMIT component=bun duration=2.684ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.603081" level=debug msg=BEGIN component=bun duration="84µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.606418" level=debug msg=COMMIT component=bun duration=2.732ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.606556" level=debug msg=BEGIN component=bun duration="116µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.610253" level=debug msg=COMMIT component=bun duration=2.885ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.610361" level=debug msg=BEGIN component=bun duration="87µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.614013" level=debug msg=COMMIT component=bun duration=2.806ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.614134" level=debug msg=BEGIN component=bun duration="101µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.617703" level=debug msg=COMMIT component=bun duration=2.779ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.617817" level=debug msg=BEGIN component=bun duration="86µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.621368" level=debug msg=COMMIT component=bun duration=2.733ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.621473" level=debug msg=BEGIN component=bun duration="87µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.624726" level=debug msg=COMMIT component=bun duration=2.728ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.624863" level=debug msg=BEGIN component=bun duration="99µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.628189" level=debug msg=COMMIT component=bun duration=2.752ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.628329" level=debug msg=BEGIN component=bun duration="101µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.631669" level=debug msg=COMMIT component=bun duration=2.749ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.631814" level=debug msg=BEGIN component=bun duration="109µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.635167" level=debug msg=COMMIT component=bun duration=2.728ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.635279" level=debug msg=BEGIN component=bun duration="91µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.639055" level=debug msg=COMMIT component=bun duration=2.757ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.639183" level=debug msg=BEGIN component=bun duration="82µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.642467" level=debug msg=COMMIT component=bun duration=2.733ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.642586" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.645917" level=debug msg=COMMIT component=bun duration=2.774ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.646066" level=debug msg=BEGIN component=bun duration="106µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.649911" level=debug msg=COMMIT component=bun duration=2.842ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.650038" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.653556" level=debug msg=COMMIT component=bun duration=2.71ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.653665" level=debug msg=BEGIN component=bun duration="83µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.657220" level=debug msg=COMMIT component=bun duration=2.782ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.657324" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.660588" level=debug msg=COMMIT component=bun duration=2.69ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.660732" level=debug msg=BEGIN component=bun duration="100µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.663988" level=debug msg=COMMIT component=bun duration=2.724ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.664132" level=debug msg=BEGIN component=bun duration="100µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.667335" level=debug msg=COMMIT component=bun duration=2.673ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.667476" level=debug msg=BEGIN component=bun duration="87µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.670990" level=debug msg=COMMIT component=bun duration=2.696ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.671102" level=debug msg=BEGIN component=bun duration="77µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.674689" level=debug msg=COMMIT component=bun duration=2.782ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.674839" level=debug msg=BEGIN component=bun duration="104µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.678465" level=debug msg=COMMIT component=bun duration=2.749ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.678583" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.682271" level=debug msg=COMMIT component=bun duration=2.911ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.682390" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.685913" level=debug msg=COMMIT component=bun duration=2.753ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.686062" level=debug msg=BEGIN component=bun duration="103µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.689662" level=debug msg=COMMIT component=bun duration=2.752ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.689790" level=debug msg=BEGIN component=bun duration="87µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.693291" level=debug msg=COMMIT component=bun duration=2.721ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.693437" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.697040" level=debug msg=COMMIT component=bun duration=2.773ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.697169" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.700753" level=debug msg=COMMIT component=bun duration=2.785ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.700853" level=debug msg=BEGIN component=bun duration="76µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.705630" level=debug msg=COMMIT component=bun duration=4.225ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.705729" level=debug msg=BEGIN component=bun duration="75µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.709001" level=debug msg=COMMIT component=bun duration=2.72ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.709148" level=debug msg=BEGIN component=bun duration="103µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.712487" level=debug msg=COMMIT component=bun duration=2.73ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.712617" level=debug msg=BEGIN component=bun duration="86µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.715861" level=debug msg=COMMIT component=bun duration=2.733ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.715989" level=debug msg=BEGIN component=bun duration="84µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.719564" level=debug msg=COMMIT component=bun duration=2.778ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.719669" level=debug msg=BEGIN component=bun duration="81µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.722903" level=debug msg=COMMIT component=bun duration=2.718ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.723067" level=debug msg=BEGIN component=bun duration="116µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.726413" level=debug msg=COMMIT component=bun duration=2.719ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.726549" level=debug msg=BEGIN component=bun duration="112µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.730204" level=debug msg=COMMIT component=bun duration=2.714ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.730356" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.733670" level=debug msg=COMMIT component=bun duration=2.689ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.733787" level=debug msg=BEGIN component=bun duration="93µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.737008" level=debug msg=COMMIT component=bun duration=2.674ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.737186" level=debug msg=BEGIN component=bun duration="137µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.740942" level=debug msg=COMMIT component=bun duration=2.826ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.741068" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.744728" level=debug msg=COMMIT component=bun duration=2.795ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.744905" level=debug msg=BEGIN component=bun duration="132µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.748495" level=debug msg=COMMIT component=bun duration=2.753ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.748645" level=debug msg=BEGIN component=bun duration="103µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.752128" level=debug msg=COMMIT component=bun duration=2.692ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.752262" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.755620" level=debug msg=COMMIT component=bun duration=2.786ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.755756" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.759039" level=debug msg=COMMIT component=bun duration=2.723ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.759205" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.762674" level=debug msg=COMMIT component=bun duration=2.831ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.762855" level=debug msg=BEGIN component=bun duration="115µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.766455" level=debug msg=COMMIT component=bun duration=2.696ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.766603" level=debug msg=BEGIN component=bun duration="101µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.769891" level=debug msg=COMMIT component=bun duration=2.693ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.770037" level=debug msg=BEGIN component=bun duration="108µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.773575" level=debug msg=COMMIT component=bun duration=2.952ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.773693" level=debug msg=BEGIN component=bun duration="84µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.776962" level=debug msg=COMMIT component=bun duration=2.737ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.777108" level=debug msg=BEGIN component=bun duration="107µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.780700" level=debug msg=COMMIT component=bun duration=2.704ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.780821" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.784394" level=debug msg=COMMIT component=bun duration=2.78ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.784552" level=debug msg=BEGIN component=bun duration="117µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.788222" level=debug msg=COMMIT component=bun duration=2.784ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.788334" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.791973" level=debug msg=COMMIT component=bun duration=2.776ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.792196" level=debug msg=BEGIN component=bun duration="173µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.795964" level=debug msg=COMMIT component=bun duration=2.822ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.796127" level=debug msg=BEGIN component=bun duration="113µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.799524" level=debug msg=COMMIT component=bun duration=2.809ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.799702" level=debug msg=BEGIN component=bun duration="119µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.803142" level=debug msg=COMMIT component=bun duration=2.71ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.803288" level=debug msg=BEGIN component=bun duration="107µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.806647" level=debug msg=COMMIT component=bun duration=2.733ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.806782" level=debug msg=BEGIN component=bun duration="94µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.809976" level=debug msg=COMMIT component=bun duration=2.62ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.810126" level=debug msg=BEGIN component=bun duration="112µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.813571" level=debug msg=COMMIT component=bun duration=2.802ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.813709" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.817062" level=debug msg=COMMIT component=bun duration=2.757ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.817227" level=debug msg=BEGIN component=bun duration="121µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.820575" level=debug msg=COMMIT component=bun duration=2.731ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.820738" level=debug msg=BEGIN component=bun duration="120µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.824035" level=debug msg=COMMIT component=bun duration=2.711ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.824176" level=debug msg=BEGIN component=bun duration="101µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.827409" level=debug msg=COMMIT component=bun duration=2.673ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.827608" level=debug msg=BEGIN component=bun duration="159µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.831504" level=debug msg=COMMIT component=bun duration=2.967ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.831684" level=debug msg=BEGIN component=bun duration="136µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.835299" level=debug msg=COMMIT component=bun duration=2.756ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.835444" level=debug msg=BEGIN component=bun duration="107µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.838763" level=debug msg=COMMIT component=bun duration=2.716ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.838896" level=debug msg=BEGIN component=bun duration="98µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.842200" level=debug msg=COMMIT component=bun duration=2.71ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.842350" level=debug msg=BEGIN component=bun duration="110µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.845639" level=debug msg=COMMIT component=bun duration=2.724ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.845795" level=debug msg=BEGIN component=bun duration="117µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.849386" level=debug msg=COMMIT component=bun duration=2.7ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.849537" level=debug msg=BEGIN component=bun duration="116µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.853148" level=debug msg=COMMIT component=bun duration=2.788ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.853315" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.857026" level=debug msg=COMMIT component=bun duration=2.851ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.857206" level=debug msg=BEGIN component=bun duration="138µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.860905" level=debug msg=COMMIT component=bun duration=2.783ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.861054" level=debug msg=BEGIN component=bun duration="109µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.864893" level=debug msg=COMMIT component=bun duration=3.003ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.865104" level=debug msg=BEGIN component=bun duration="168µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.868746" level=debug msg=COMMIT component=bun duration=2.745ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.868886" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.872204" level=debug msg=COMMIT component=bun duration=2.748ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.872345" level=debug msg=BEGIN component=bun duration="102µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.875867" level=debug msg=COMMIT component=bun duration=2.831ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.876023" level=debug msg=BEGIN component=bun duration="115µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.879418" level=debug msg=COMMIT component=bun duration=2.794ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.879618" level=debug msg=BEGIN component=bun duration="154µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.883481" level=debug msg=COMMIT component=bun duration=2.825ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.883658" level=debug msg=BEGIN component=bun duration="137µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.887348" level=debug msg=COMMIT component=bun duration=2.82ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.887528" level=debug msg=BEGIN component=bun duration="137µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.891294" level=debug msg=COMMIT component=bun duration=2.867ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.891480" level=debug msg=BEGIN component=bun duration="132µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.895119" level=debug msg=COMMIT component=bun duration=2.737ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.895271" level=debug msg=BEGIN component=bun duration="112µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.898705" level=debug msg=COMMIT component=bun duration=2.749ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.898841" level=debug msg=BEGIN component=bun duration="97µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.902193" level=debug msg=COMMIT component=bun duration=2.695ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.902331" level=debug msg=BEGIN component=bun duration="96µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.905651" level=debug msg=COMMIT component=bun duration=2.715ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.905793" level=debug msg=BEGIN component=bun duration="105µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.909149" level=debug msg=COMMIT component=bun duration=2.72ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.909317" level=debug msg=BEGIN component=bun duration="122µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.912570" level=debug msg=COMMIT component=bun duration=2.69ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.912698" level=debug msg=BEGIN component=bun duration="94µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.915942" level=debug msg=COMMIT component=bun duration=2.704ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.916071" level=debug msg=BEGIN component=bun duration="95µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.919399" level=debug msg=COMMIT component=bun duration=2.736ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.919613" level=debug msg=BEGIN component=bun duration="168µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.923032" level=debug msg=COMMIT component=bun duration=2.696ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.923151" level=debug msg=BEGIN component=bun duration="82µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.926444" level=debug msg=COMMIT component=bun duration=2.726ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.926600" level=debug msg=BEGIN component=bun duration="113µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.930154" level=debug msg=COMMIT component=bun duration=2.719ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.930313" level=debug msg=BEGIN component=bun duration="117µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.933987" level=debug msg=COMMIT component=bun duration=2.78ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.934174" level=debug msg=BEGIN component=bun duration="148µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.937806" level=debug msg=COMMIT component=bun duration=2.711ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.937969" level=debug msg=BEGIN component=bun duration="122µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.941572" level=debug msg=COMMIT component=bun duration=2.753ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.941735" level=debug msg=BEGIN component=bun duration="123µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.945357" level=debug msg=COMMIT component=bun duration=2.792ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.945515" level=debug msg=BEGIN component=bun duration="114µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.949085" level=debug msg=COMMIT component=bun duration=2.677ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.949234" level=debug msg=BEGIN component=bun duration="111µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.952804" level=debug msg=COMMIT component=bun duration=2.733ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.952969" level=debug msg=BEGIN component=bun duration="127µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.956568" level=debug msg=COMMIT component=bun duration=2.75ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.956698" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.959969" level=debug msg=COMMIT component=bun duration=2.699ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.960098" level=debug msg=BEGIN component=bun duration="83µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.963371" level=debug msg=COMMIT component=bun duration=2.727ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.963507" level=debug msg=BEGIN component=bun duration="96µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.966783" level=debug msg=COMMIT component=bun duration=2.714ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.966902" level=debug msg=BEGIN component=bun duration="82µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.970480" level=debug msg=COMMIT component=bun duration=2.723ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.970608" level=debug msg=BEGIN component=bun duration="89µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.973908" level=debug msg=COMMIT component=bun duration=2.733ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.974037" level=debug msg=BEGIN component=bun duration="86µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.977611" level=debug msg=COMMIT component=bun duration=2.76ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.977750" level=debug msg=BEGIN component=bun duration="96µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.981328" level=debug msg=COMMIT component=bun duration=2.745ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.981459" level=debug msg=BEGIN component=bun duration="90µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.984936" level=debug msg=COMMIT component=bun duration=2.689ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.985052" level=debug msg=BEGIN component=bun duration="83µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.988642" level=debug msg=COMMIT component=bun duration=2.801ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.988769" level=debug msg=BEGIN component=bun duration="91µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.992440" level=debug msg=COMMIT component=bun duration=2.919ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.992551" level=debug msg=BEGIN component=bun duration="79µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.996240" level=debug msg=COMMIT component=bun duration=2.848ms operation=COMMIT
              +bench | time="10-11-23118 10:46:40.996352" level=debug msg=BEGIN component=bun duration="80µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:40.999962" level=debug msg=COMMIT component=bun duration=2.778ms operation=COMMIT
              +bench | time="10-11-23118 10:46:41.000082" level=debug msg=BEGIN component=bun duration="88µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:41.003678" level=debug msg=COMMIT component=bun duration=2.78ms operation=COMMIT
              +bench | time="10-11-23118 10:46:41.003814" level=debug msg=BEGIN component=bun duration="104µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:41.007509" level=debug msg=COMMIT component=bun duration=2.832ms operation=COMMIT
              +bench | time="10-11-23118 10:46:41.007676" level=debug msg=BEGIN component=bun duration="127µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:41.011320" level=debug msg=COMMIT component=bun duration=2.807ms operation=COMMIT
              +bench | time="10-11-23118 10:46:41.011457" level=debug msg=BEGIN component=bun duration="104µs" operation=BEGIN
              +bench | time="10-11-23118 10:46:41.015028" level=debug msg=COMMIT component=bun duration=2.71ms operation=COMMIT
              +bench | BenchmarkList/aggregating_balance_filtering_on_account_address_segment
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=1.192..1.193 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=1.075..1.075 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=1.041..1.069 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=1.040..1.068 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=1.040..1.046 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.057..0.798 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.034..0.034 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.662 ms
              +bench | Execution Time: 1.256 ms
              +bench | time="10-11-23118 10:46:42.428451" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=4.124ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:42.430853" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.054ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.539..0.540 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.482 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.450..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.449..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.449..0.455 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (mov
              +bench | [A                                Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.597 ms
              +bench | time="10-11-23118 10:46:42.432895" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.014ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.596..0.597 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.519..0.520 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.477..0.515 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.476..0.514 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.476..0.485 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.216 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (m
              +bench | [A                                Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.667 ms
              +bench | time="10-11-23118 10:46:42.435040" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.118ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.539..0.539 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.482 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.449..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.448..0.454 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.208 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.599 ms
              +bench | time="10-11-23118 10:46:42.437053" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.985ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.581 ms
              +bench | time="10-11-23118 10:46:42.439040" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.959ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.201 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.590 ms
              +bench | time="10-11-23118 10:46:42.441052" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.982ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.578 ms
              +bench | time="10-11-23118 10:46:42.443047" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.964ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.541..0.541 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.484..0.484 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.452..0.480 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.451..0.479 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.451..0.457 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.210 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.597 ms
              +bench | time="10-11-23118 10:46:42.445066" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.989ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:42.447077" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.985ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.543..0.543 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.485..0.485 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.453..0.481 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.453..0.480 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.453..0.458 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.049..0.201 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.037..0.037 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.601 ms
              +bench | time="10-11-23118 10:46:42.449154" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.049ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.540..0.541 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.198 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.606 ms
              +bench | time="10-11-23118 10:46:42.451247" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.062ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.534..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.153 ms
              +bench | Execution Time: 0.595 ms
              +bench | time="10-11-23118 10:46:42.453349" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.067ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.578..0.579 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.504..0.504 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.462..0.499 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.461..0.498 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.458..0.468 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.637 ms
              +bench | time="10-11-23118 10:46:42.455491" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.113ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.587 ms
              +bench | time="10-11-23118 10:46:42.457496" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.976ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.582 ms
              +bench | time="10-11-23118 10:46:42.459494" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.97ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.538..0.539 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.483..0.484 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.451..0.479 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.451..0.478 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.450..0.457 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.594 ms
              +bench | time="10-11-23118 10:46:42.461491" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.953ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.579 ms
              +bench | time="10-11-23118 10:46:42.463449" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.927ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.532..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.477..0.478 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.445..0.473 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.445..0.472 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.444..0.450 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.589 ms
              +bench | time="10-11-23118 10:46:42.465420" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.939ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.584 ms
              +bench | time="10-11-23118 10:46:42.467371" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:42.469383" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.983ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.540..0.540 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.480..0.480 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.444..0.475 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.450 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.043..0.200 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.030..0.030 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.146 ms
              +bench | Execution Time: 0.600 ms
              +bench | time="10-11-23118 10:46:42.471432" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.018ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:42.473413" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.96ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.535..0.536 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.480..0.481 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.446..0.476 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.446..0.475 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.445..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.595 ms
              +bench | time="10-11-23118 10:46:42.475392" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.953ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (mov
              +bench | [A                                Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.578 ms
              +bench | time="10-11-23118 10:46:42.477352" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.94ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.526..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.583 ms
              +bench | time="10-11-23118 10:46:42.479332" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.952ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:42.481289" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:42.483353" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.031ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.532..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.045..0.199 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.034..0.035 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.591 ms
              +bench | time="10-11-23118 10:46:42.485449" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.058ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.579 ms
              +bench | time="10-11-23118 10:46:42.487469" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.979ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.544..0.544 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.485..0.486 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.451..0.481 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.450..0.480 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.449..0.456 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.041..0.200 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.145 ms
              +bench | Execution Time: 0.606 ms
              +bench | time="10-11-23118 10:46:42.489520" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.013ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.588 ms
              +bench | time="10-11-23118 10:46:42.491534" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.982ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.542..0.543 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.486..0.487 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.454..0.482 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.454..0.481 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.454..0.460 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.198 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.600 ms
              +bench | time="10-11-23118 10:46:42.493585" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.011ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.588 ms
              +bench | time="10-11-23118 10:46:42.495747" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.119ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:42.497913" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.127ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.471..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.590 ms
              +bench | time="10-11-23118 10:46:42.500036" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.085ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.041..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.150 ms
              +bench | Execution Time: 0.588 ms
              +bench | time="10-11-23118 10:46:42.502143" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.07ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.041..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.588 ms
              +bench | time="10-11-23118 10:46:42.504281" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.09ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.536..0.536 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.477..0.478 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.446..0.473 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.445..0.473 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.445..0.451 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.592 ms
              +bench | time="10-11-23118 10:46:42.506353" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.041ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.543..0.543 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.479 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.474 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.030 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.610 ms
              +bench | time="10-11-23118 10:46:42.508445" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.052ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.150 ms
              +bench | Execution Time: 0.601 ms
              +bench | time="10-11-23118 10:46:42.510509" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.025ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.532..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.475 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.198 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.607 ms
              +bench | time="10-11-23118 10:46:42.512574" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.032ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.541..0.542 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.482 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.449..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.448..0.454 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.603 ms
              +bench | time="10-11-23118 10:46:42.514578" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.973ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.475 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.590 ms
              +bench | time="10-11-23118 10:46:42.516580" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.973ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.518595" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.973ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.553..0.554 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.480..0.480 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.448..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.447..0.475 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.614 ms
              +bench | time="10-11-23118 10:46:42.520632" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.007ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.579 ms
              +bench | time="10-11-23118 10:46:42.522628" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.966ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.543..0.543 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.473..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.601 ms
              +bench | time="10-11-23118 10:46:42.524640" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.972ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:42.526617" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.948ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.542..0.543 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.603 ms
              +bench | time="10-11-23118 10:46:42.528712" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.067ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.535..0.535 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.478 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.446..0.474 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.445..0.473 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.445..0.451 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.042..0.202 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.030..0.030 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.602 ms
              +bench | time="10-11-23118 10:46:42.530840" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.087ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.543..0.544 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.484..0.485 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.451..0.480 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.450..0.479 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.450..0.456 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.041..0.205 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bit
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.146 ms
              +bench | Execution Time: 0.607 ms
              +bench | time="10-11-23118 10:46:42.533129" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.251ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.532..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.041..0.201 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.594 ms
              +bench | time="10-11-23118 10:46:42.535263" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.086ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.548..0.549 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.489..0.489 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.457..0.485 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.456..0.484 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.456..0.462 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.200 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.148 ms
              +bench | Execution Time: 0.614 ms
              +bench | time="10-11-23118 10:46:42.537431" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.126ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.471..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.594 ms
              +bench | time="10-11-23118 10:46:42.539517" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.054ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.589 ms
              +bench | time="10-11-23118 10:46:42.541613" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.064ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.589 ms
              +bench | time="10-11-23118 10:46:42.543732" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.084ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.583 ms
              +bench | time="10-11-23118 10:46:42.545867" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.098ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.471..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_l
              +bench | [A                                Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.595 ms
              +bench | time="10-11-23118 10:46:42.548060" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.136ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.587 ms
              +bench | time="10-11-23118 10:46:42.550233" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.132ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.473..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.589 ms
              +bench | time="10-11-23118 10:46:42.552409" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.144ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.536..0.537 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.477..0.477 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.444..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.200 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.599 ms
              +bench | time="10-11-23118 10:46:42.554479" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.044ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.576..0.577 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.512..0.512 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.479..0.508 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.478..0.507 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.476..0.482 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.641 ms
              +bench | time="10-11-23118 10:46:42.556622" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.116ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index 
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.584 ms
              +bench | time="10-11-23118 10:46:42.558677" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.016ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.544..0.544 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.488..0.488 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.455..0.483 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.455..0.482 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.454..0.460 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.606 ms
              +bench | time="10-11-23118 10:46:42.560767" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.062ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.534..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.477..0.477 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.041..0.199 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.601 ms
              +bench | time="10-11-23118 10:46:42.562839" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.042ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.531..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.590 ms
              +bench | time="10-11-23118 10:46:42.564905" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.035ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.594 ms
              +bench | time="10-11-23118 10:46:42.566980" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.039ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.569..0.570 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.477..0.506 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.477..0.505 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.477..0.483 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.043..0.224 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.631 ms
              +bench | time="10-11-23118 10:46:42.569015" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.008ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.534..0.535 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.477 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.597 ms
              +bench | time="10-11-23118 10:46:42.571009" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.96ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.549..0.549 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.492..0.492 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.460..0.487 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.459..0.487 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.459..0.465
              +bench | [A                    ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.459..0.465 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.206 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.611 ms
              +bench | time="10-11-23118 10:46:42.572990" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.955ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.477 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.199 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.594 ms
              +bench | time="10-11-23118 10:46:42.575002" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.986ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.551..0.552 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.492..0.493 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.460..0.488 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.459..0.487 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.459..0.465 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.201 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_l
              +bench | [A                                Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.614 ms
              +bench | time="10-11-23118 10:46:42.577151" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.118ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.145 ms
              +bench | Execution Time: 0.588 ms
              +bench | time="10-11-23118 10:46:42.579209" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.027ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.526..0.527 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.155 ms
              +bench | Execution Time: 0.588 ms
              +bench | time="10-11-23118 10:46:42.581266" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.027ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.531..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.475 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.592 ms
              +bench | time="10-11-23118 10:46:42.583366" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.062ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.471..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.591 ms
              +bench | time="10-11-23118 10:46:42.585558" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.139ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.526..0.527 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.587 ms
              +bench | time="10-11-23118 10:46:42.587880" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.285ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.531..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.475 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.202 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.149 ms
              +bench | Execution Time: 0.592 ms
              +bench | time="10-11-23118 10:46:42.590057" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.139ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.541..0.542 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.482..0.482 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.448..0.476 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.448..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.447..0.454 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.044..0.200 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.031..0.031 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.145 ms
              +bench | Execution Time: 0.606 ms
              +bench | time="10-11-23118 10:46:42.592141" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.051ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.043..0.199 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.181 ms
              +bench | Execution Time: 0.602 ms
              +bench | time="10-11-23118 10:46:42.594346" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.172ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.561..0.562 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.501..0.501 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.468..0.496 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.468..0.495 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.467..0.473 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.043..0.206 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.031..0.031 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.168 ms
              +bench | Execution Time: 0.632 ms
              +bench | time="10-11-23118 10:46:42.596619" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.237ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.544..0.544 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.482 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.445..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.445..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.444..0.451 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.198 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.158 ms
              +bench | Execution Time: 0.605 ms
              +bench | time="10-11-23118 10:46:42.598711" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.058ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.538..0.538 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.479..0.480 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.474 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.596 ms
              +bench | time="10-11-23118 10:46:42.600732" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.99ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.045..0.200 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.030..0.030 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.592 ms
              +bench | time="10-11-23118 10:46:42.602778" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.013ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.553..0.554 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.492..0.492 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.459..0.487 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.459..0.486 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.459..0.465 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.043..0.212 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.030..0.030 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.149 ms
              +bench | Execution Time: 0.621 ms
              +bench | time="10-11-23118 10:46:42.605012" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.081ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.542..0.542 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.483..0.483 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.450..0.478 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.450..0.478 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.449..0.455 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.605 ms
              +bench | time="10-11-23118 10:46:42.606980" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.939ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.542..0.542 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.484..0.485 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.452..0.480 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.452..0.480 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.452..0.458 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.209 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.602 ms
              +bench | time="10-11-23118 10:46:42.609012" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.006ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.200 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.029..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.589 ms
              +bench | time="10-11-23118 10:46:42.611043" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.005ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.537..0.538 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.482 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.450..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.449..0.455 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.206 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.597 ms
              +bench | time="10-11-23118 10:46:42.613050" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.976ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.527 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.588 ms
              +bench | time="10-11-23118 10:46:42.615067" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.99ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.540..0.541 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.484..0.484 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.451..0.479 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.451..0.479 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.449..0.456 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.207 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.604 ms
              +bench | time="10-11-23118 10:46:42.617124" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.025ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.537..0.538 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.480..0.481 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.447..0.476 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.447..0.475 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.046..0.202 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.033..0.033 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.603 ms
              +bench | time="10-11-23118 10:46:42.619156" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.004ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.539..0.540 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.481 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.447..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.447..0.474 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.445..0.451 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.202 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.163 ms
              +bench | Execution Time: 0.605 ms
              +bench | time="10-11-23118 10:46:42.621218" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.031ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.623276" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.029ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.150 ms
              +bench | Execution Time: 0.582 ms
              +bench | time="10-11-23118 10:46:42.625303" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.995ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.583 ms
              +bench | time="10-11-23118 10:46:42.627285" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.955ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (mov
              +bench | [A                                Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.152 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:42.629323" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.006ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:42.631348" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.995ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.583 ms
              +bench | time="10-11-23118 10:46:42.633365" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.991ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.586 ms
              +bench | time="10-11-23118 10:46:42.635352" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.961ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.579 ms
              +bench | time="10-11-23118 10:46:42.637860" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.034ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.584 ms
              +bench | time="10-11-23118 10:46:42.639853" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.969ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.583 ms
              +bench | time="10-11-23118 10:46:42.641846" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.964ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:42.643820" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.947ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:42.645798" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.955ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:42.647843" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.012ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:42.649781" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.915ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.536..0.536 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.479..0.480 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.450..0.478 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.450..0.477 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.448..0.454 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.201 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.586 ms
              +bench | time="10-11-23118 10:46:42.651745" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.939ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:42.653705" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.575 ms
              +bench | time="10-11-23118 10:46:42.655674" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.941ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.576..0.577 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.506..0.507 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.467..0.505 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.466..0.504 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.464..0.474 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.627 ms
              +bench | time="10-11-23118 10:46:42.657685" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.986ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.659652" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.938ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:42.661583" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.908ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:42.663544" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.936ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:42.665455" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.885ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:42.667375" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.898ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index 
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.581 ms
              +bench | time="10-11-23118 10:46:42.669311" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.915ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:42.671212" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.875ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.167 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:42.673139" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.9ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:42.675030" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.868ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.478 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.448..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.448..0.454 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.207 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:42.676964" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.906ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:42.678870" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.884ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.477 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.448..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.447..0.474 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.447..0.453 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index 
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.587 ms
              +bench | time="10-11-23118 10:46:42.680819" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.924ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.526..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.146 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:42.682816" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.975ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.526..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.684800" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.959ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:42.686759" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.933ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.447..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.447..0.474 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.581 ms
              +bench | time="10-11-23118 10:46:42.688713" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:42.690629" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.894ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.527 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.692567" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.914ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:42.694536" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.945ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:42.696503" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.94ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.698457" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.926ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:42.700425" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.941ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:42.702400" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.948ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bit
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:42.704366" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.94ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.538..0.539 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.482 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.452..0.480 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.451..0.479 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.451..0.457 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.199 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_l
              +bench | [A                                Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.589 ms
              +bench | time="10-11-23118 10:46:42.706324" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.933ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:42.708294" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.944ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:42.710255" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.935ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:42.712228" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.948ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_l
              +bench | [A                                Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:42.714179" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.924ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.579 ms
              +bench | time="10-11-23118 10:46:42.716183" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.967ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.576..0.577 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.516..0.516 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.487..0.515 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.486..0.514 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.486..0.492 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.229 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.629 ms
              +bench | time="10-11-23118 10:46:42.718208" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.999ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.532..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.587 ms
              +bench | time="10-11-23118 10:46:42.720218" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.985ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.582 ms
              +bench | time="10-11-23118 10:46:42.722315" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.069ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.586..0.587 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.502..0.503 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.462..0.501 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.461..0.500 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.461..0.470
              +bench | [A                    ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.461..0.470 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.047..0.203 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Fil
              +bench | [A                                Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.033..0.034 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.147 ms
              +bench | Execution Time: 0.651 ms
              +bench | time="10-11-23118 10:46:42.724695" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.348ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.532..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.473 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.472 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.029 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.591 ms
              +bench | time="10-11-23118 10:46:42.726751" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.019ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.541..0.541 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.483..0.484 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.454..0.482 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.454..0.481 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.453..0.460 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.592 ms
              +bench | time="10-11-23118 10:46:42.728831" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.052ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.526..0.527 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.198 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.730888" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.028ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.538..0.538 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.480..0.481 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.451..0.479 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.450..0.478 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.449..0.455 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.203 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.591 ms
              +bench | time="10-11-23118 10:46:42.732952" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.037ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.579 ms
              +bench | time="10-11-23118 10:46:42.735006" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.025ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.535..0.535 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.478 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.448..0.476 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.448..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.203 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.588 ms
              +bench | time="10-11-23118 10:46:42.737069" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.036ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.579 ms
              +bench | time="10-11-23118 10:46:42.739123" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.021ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.539..0.539 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.478 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.449..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.447..0.453 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.603 ms
              +bench | time="10-11-23118 10:46:42.741211" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.058ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.743324" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.078ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.532..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.475 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.446..0.474 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.445..0.473 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.445..0.451 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.145 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:42.745421" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.067ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.535..0.536 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.477..0.478 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.445..0.473 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.445..0.472 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.444..0.451 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.597 ms
              +bench | time="10-11-23118 10:46:42.747554" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.104ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.532..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.447..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.446..0.474 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.582 ms
              +bench | time="10-11-23118 10:46:42.749624" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.036ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.578 ms
              +bench | time="10-11-23118 10:46:42.751716" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.06ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:42.753731" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.98ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.570 ms
              +bench | time="10-11-23118 10:46:42.755715" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.95ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:42.757680" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.933ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_l
              +bench | [A                                Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:42.759670" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.959ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:42.761687" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.983ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:42.763771" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.055ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.147 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.765841" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.033ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:42.767890" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.02ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.537..0.538 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.446..0.474 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.445..0.473 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.445..0.451 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.198 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.590 ms
              +bench | time="10-11-23118 10:46:42.769983" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.061ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:42.772057" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.034ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.591 ms
              +bench | time="10-11-23118 10:46:42.774147" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.061ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::num
              +bench | [A                                Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:42.776169" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.977ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.527 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.471..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.579 ms
              +bench | time="10-11-23118 10:46:42.778164" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.961ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:42.780136" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.942ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:42.782086" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.925ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:42.784030" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.915ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:42.785974" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.914ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.504..0.505 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.447..0.448 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.419..0.446 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.418..0.446 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.418..0.424 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.549 ms
              +bench | time="10-11-23118 10:46:42.787950" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.948ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:42.789927" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.948ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:42.791890" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.93ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:42.793996" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.08ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.179 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:42.796153" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.124ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.531 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.471..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:42.798153" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.964ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.582 ms
              +bench | time="10-11-23118 10:46:42.800174" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.991ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.536..0.537 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.479 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.449..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.448..0.455 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (
              +bench | [A                          ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.153 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:42.802222" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.017ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.550..0.550 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.485..0.485 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.456..0.483 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.455..0.482 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.455..0.461 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.595 ms
              +bench | time="10-11-23118 10:46:42.804295" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.041ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.154 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:42.806310" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.969ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:42.808263" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.923ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.471..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:42.810203" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.911ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:42.812305" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.074ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:42.814255" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.921ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:42.816204" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.926ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.502..0.503 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.447..0.447 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.419..0.446 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.418..0.445 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.418..0.424 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.546 ms
              +bench | time="10-11-23118 10:46:42.818164" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.931ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.182 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.551 ms
              +bench | time="10-11-23118 10:46:42.820103" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.908ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.449..0.450 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.448 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.420..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.420..0.426 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:42.822031" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.901ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:42.824008" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.944ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.579 ms
              +bench | time="10-11-23118 10:46:42.825956" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.915ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.157 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:42.827929" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.945ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.030..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:42.829829" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.874ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:42.831835" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.975ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:42.833790" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.929ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.537..0.538 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.478 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.448..0.476 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.448..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.024..0.024 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.588 ms
              +bench | time="10-11-23118 10:46:42.835884" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.062ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.572..0.573 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.507..0.507 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.476..0.504 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.476..0.503 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.475..0.482 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.223 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.148 ms
              +bench | Execution Time: 0.622 ms
              +bench | time="10-11-23118 10:46:42.838087" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.162ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.450..0.451 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:42.840031" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.916ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:42.841963" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.909ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_a
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:42.843904" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.91ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:42.845829" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.903ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.451..0.451 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:42.847795" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.935ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:42.849806" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.981ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:42.851790" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.956ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:42.853733" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.914ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:42.855706" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.943ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:42.857650" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.918ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:42.859632" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.959ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:42.861597" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.938ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.504..0.505 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.448..0.448 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.419..0.447 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.418..0.446 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.418..0.424 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.549 ms
              +bench | time="10-11-23118 10:46:42.863525" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.905ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:42.865472" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.924ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.471..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.199 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.867488" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.982ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:42.869422" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.91ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.451..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.553 ms
              +bench | time="10-11-23118 10:46:42.871323" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.878ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:42.873270" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.924ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:42.875208" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.916ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.450..0.451 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.420..0.426 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.156 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:42.877185" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.955ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.450..0.450 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.418..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.418..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.417..0.423 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.181 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.552 ms
              +bench | time="10-11-23118 10:46:42.879111" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.902ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.042..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:42.881084" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.952ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.575 ms
              +bench | time="10-11-23118 10:46:42.883014" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.906ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.547..0.547 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.490..0.490 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.460..0.489 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.460..0.488 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.458..0.465 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.207 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.599 ms
              +bench | time="10-11-23118 10:46:42.884980" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.942ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:42.886996" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.971ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.558..0.559 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.497..0.497 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.461..0.496 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.461..0.495 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.460..0.468 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.200 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.148 ms
              +bench | Execution Time: 0.604 ms
              +bench | time="10-11-23118 10:46:42.889109" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.079ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.620..0.621 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.541..0.542 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.494..0.540 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.493..0.539 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.493..0.504 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.157 ms
              +bench | Execution Time: 0.675 ms
              +bench | time="10-11-23118 10:46:42.891269" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.123ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.152 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:42.893202" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.907ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:42.895134" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.903ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:42.897099" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.938ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:42.899032" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.91ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.475 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.446..0.473 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.445..0.473 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.445..0.451 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:42.901000" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.942ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.536..0.537 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.479..0.479 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.447..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.446..0.474 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.592 ms
              +bench | time="10-11-23118 10:46:42.902985" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.96ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.473..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.445..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.444..0.450 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.575 ms
              +bench | time="10-11-23118 10:46:42.904929" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.918ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:42.906866" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.914ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:42.908820" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.932ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:42.910753" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.911ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.538..0.539 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.480..0.481 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.450..0.479 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.450..0.478 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.450..0.456 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.583 ms
              +bench | time="10-11-23118 10:46:42.912720" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.945ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:42.914667" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.926ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.570 ms
              +bench | time="10-11-23118 10:46:42.916622" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:42.918548" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.904ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.536..0.537 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.587 ms
              +bench | time="10-11-23118 10:46:42.920538" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.967ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:42.922446" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.884ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:42.924375" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.902ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:42.926343" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.946ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:42.928383" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.014ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:42.930442" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.034ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:42.932483" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.015ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.548..0.549 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.489..0.489 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.459..0.487 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.458..0.486 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.457..0.463 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort
              +bench | [A                          Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.056..0.214 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.042..0.042 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.275 ms
              +bench | Execution Time: 0.618 ms
              +bench | time="10-11-23118 10:46:42.934692" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.185ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.531 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.473..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.583 ms
              +bench | time="10-11-23118 10:46:42.937198" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.479ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:42.939125" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.898ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.532..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.477 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.447..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.447..0.475 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.042..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.031..0.031 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:42.941077" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.926ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.551 ms
              +bench | time="10-11-23118 10:46:42.943012" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.907ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.539..0.539 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.481 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.452..0.480 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.451..0.479 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.451..0.457 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.212 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.584 ms
              +bench | time="10-11-23118 10:46:42.944996" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.96ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.536..0.536 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.447..0.474 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.446..0.473 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:42.946964" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.942ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:42.948882" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.891ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.496..0.496 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.439..0.440 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.410..0.438 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.410..0.438 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.410..0.416 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.539 ms
              +bench | time="10-11-23118 10:46:42.950800" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.89ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:42.952747" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.922ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:42.954726" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.953ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.477 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.447..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.447..0.475 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:42.956690" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.936ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:42.958631" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.915ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:42.960586" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:42.962555" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.943ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.526..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:42.964521" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.937ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:42.966463" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.916ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:42.968479" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.989ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:42.970416" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.892ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.526..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.174 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:42.972642" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.083ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:42.974544" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.875ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.504..0.504 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.448..0.448 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.419..0.447 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.418..0.446 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.417..0.423 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d14
              +bench | [A                          ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.548 ms
              +bench | time="10-11-23118 10:46:42.976442" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.871ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:42.978350" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.874ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index 
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:42.980248" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.872ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort
              +bench | [A                          Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:42.982125" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.855ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:42.984013" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.861ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.152 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:42.985950" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.914ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:42.987904" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.931ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:42.989844" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.913ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:42.991755" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.886ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.503..0.504 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.449..0.449 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.420..0.448 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.419..0.447 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.419..0.425 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.546 ms
              +bench | time="10-11-23118 10:46:42.993666" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.888ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:42.995690" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.001ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.023 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.578 ms
              +bench | time="10-11-23118 10:46:42.997732" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.021ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:42.999694" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.926ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.532..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.475 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.446..0.474 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.445..0.473 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.445..0.451 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.026 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.575 ms
              +bench | time="10-11-23118 10:46:43.001658" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.941ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.506..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.450..0.451 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.420..0.426 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.551 ms
              +bench | time="10-11-23118 10:46:43.003655" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.972ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:43.005650" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.967ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.420..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.420..0.426 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.007557" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.882ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.009441" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.861ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.451..0.451 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.551 ms
              +bench | time="10-11-23118 10:46:43.011359" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.896ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:43.013307" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.924ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (mov
              +bench | [A                                Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.015235" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.901ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.166 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:43.017231" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.968ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.449..0.450 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.418..0.448 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.418..0.447 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.417..0.424 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.019203" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.949ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.153 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.021177" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.947ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (
              +bench | [A                          ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:43.023131" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.041..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.030..0.031 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.030..0.031 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:43.025074" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.917ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.505..0.506 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.450..0.450 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.420..0.426 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index 
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.548 ms
              +bench | time="10-11-23118 10:46:43.027000" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.904ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.544..0.545 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.487..0.488 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.459..0.486 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.458..0.486 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.457..0.463 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.588 ms
              +bench | time="10-11-23118 10:46:43.028945" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.912ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:43.030934" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.962ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.531..0.531 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.473..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.444..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.204 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.575 ms
              +bench | time="10-11-23118 10:46:43.032924" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.962ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.148 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.034870" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.917ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:43.036832" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.935ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.535..0.535 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.478 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.448..0.476 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.448..0.454 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:43.038821" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.963ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.571..0.571 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.506..0.507 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.477..0.505 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.476..0.504 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.475..0.482 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.622 ms
              +bench | time="10-11-23118 10:46:43.040834" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.984ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.503..0.504 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.448..0.448 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.419..0.447 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.418..0.446 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.418..0.424 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.547 ms
              +bench | time="10-11-23118 10:46:43.042743" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.884ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:43.044668" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.898ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.046579" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.884ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.048530" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.925ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.050475" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.92ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.577..0.578 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.498..0.498 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.454..0.496 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.453..0.495 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.453..0.464 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.651 ms
              +bench | time="10-11-23118 10:46:43.052535" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.034ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:43.054507" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.947ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.526..0.527 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index 
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.145 ms
              +bench | Execution Time: 0.587 ms
              +bench | time="10-11-23118 10:46:43.056505" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.971ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.535..0.536 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.473..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.589 ms
              +bench | time="10-11-23118 10:46:43.058498" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.97ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.597..0.597 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.535..0.536 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.494..0.534 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.493..0.533 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.492..0.502 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.201 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.645 ms
              +bench | time="10-11-23118 10:46:43.060531" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.012ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.062472" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.92ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.503..0.504 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.447..0.448 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.419..0.446 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.418..0.446 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.418..0.424 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.549 ms
              +bench | time="10-11-23118 10:46:43.064444" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.947ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.552 ms
              +bench | time="10-11-23118 10:46:43.066390" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.921ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:43.068351" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.936ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.070260" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.881ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.072194" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.908ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.506..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.549 ms
              +bench | time="10-11-23118 10:46:43.074117" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.902ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:43.076108" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.968ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:43.078039" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.902ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.079960" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.894ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:43.081898" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.911ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.554 ms
              +bench | time="10-11-23118 10:46:43.083838" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.913ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:43.085787" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.921ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.158 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:43.087770" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.957ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.089720" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.919ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.091674" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.926ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.093605" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.904ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:43.095565" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.924ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.097587" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.993ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:43.099531" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.917ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.101471" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.913ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.527 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:43.103491" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.992ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.105431" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.91ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.107365" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.902ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:43.109329" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.937ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.111268" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.914ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.147 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:43.113217" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.92ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.554 ms
              +bench | time="10-11-23118 10:46:43.115261" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.018ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.149 ms
              +bench | Execution Time: 0.553 ms
              +bench | time="10-11-23118 10:46:43.117255" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.966ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.119195" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.915ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.506..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.450..0.451 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.420..0.426 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.151 ms
              +bench | Execution Time: 0.551 ms
              +bench | time="10-11-23118 10:46:43.121116" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.897ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.123048" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.907ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_a
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:43.124990" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.919ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.537..0.538 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.479 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.450..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.448..0.454 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.199 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.584 ms
              +bench | time="10-11-23118 10:46:43.126975" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.961ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.531 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.445..0.473 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.445..0.472 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.444..0.450 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:43.128928" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.926ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.504..0.504 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.448..0.449 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.420..0.447 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.419..0.447 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.418..0.424 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.547 ms
              +bench | time="10-11-23118 10:46:43.130799" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.849ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.537..0.538 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.479..0.480 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.451..0.478 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.450..0.478 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.450..0.456 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:43.132729" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.909ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.134625" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.874ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:43.136526" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.88ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.138402" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.853ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.584..0.584 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.508..0.509 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.479..0.507 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.478..0.506 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.478..0.484 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.234 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.026..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.643 ms
              +bench | time="10-11-23118 10:46:43.140604" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.08ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:43.142557" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.927ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.144598" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.016ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.146620" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.995ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.531..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:43.148645" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.999ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.150663" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.993ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.540..0.540 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.481 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.480 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.479 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.453 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.024 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.586 ms
              +bench | time="10-11-23118 10:46:43.152692" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.003ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.154692" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.974ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.531 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:43.156698" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.98ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.553 ms
              +bench | time="10-11-23118 10:46:43.158683" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.958ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.578 ms
              +bench | time="10-11-23118 10:46:43.160709" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.506..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.449..0.450 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.448 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.420..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.420..0.426 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:43.162701" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.966ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:43.164722" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.995ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.500..0.501 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.444..0.445 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.416..0.443 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.415..0.443 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.415..0.421 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.182 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.543 ms
              +bench | time="10-11-23118 10:46:43.166697" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.947ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:43.168699" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.976ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.504..0.504 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.447..0.448 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.419..0.446 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.418..0.445 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.417..0.423 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.547 ms
              +bench | time="10-11-23118 10:46:43.170684" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.96ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.535..0.536 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.477 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.475 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.420..0.474 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.419..0.425 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:43.172711" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.174708" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.969ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.540..0.540 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.482..0.483 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.453..0.481 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.453..0.481 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.451..0.457 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.584 ms
              +bench | time="10-11-23118 10:46:43.176727" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.991ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.178691" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.937ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.534..0.535 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:43.180603" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.887ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.182493" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.866ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.184469" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.945ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.552 ms
              +bench | time="10-11-23118 10:46:43.186408" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.907ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.188377" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.942ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.190342" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.924ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.531..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.591 ms
              +bench | time="10-11-23118 10:46:43.192446" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.076ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.194344" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.871ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.196253" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.884ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:43.198167" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.89ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.200123" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.931ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.202050" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.899ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:43.204032" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.956ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:43.205975" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.916ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.207932" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.92ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.542..0.542 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:43.209903" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.943ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.211933" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.003ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.451..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.550 ms
              +bench | time="10-11-23118 10:46:43.213853" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.892ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.215832" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.952ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.035..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:43.217805" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.944ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.219742" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.911ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.451..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.551 ms
              +bench | time="10-11-23118 10:46:43.221672" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.902ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:43.223619" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.921ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:43.225577" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.93ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.227538" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.931ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:43.229530" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.964ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.554 ms
              +bench | time="10-11-23118 10:46:43.231436" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.88ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.233404" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.946ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:43.235352" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.926ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.147 ms
              +bench | Execution Time: 0.552 ms
              +bench | time="10-11-23118 10:46:43.237300" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.922ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.239217" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.893ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.146 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.241121" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.883ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.473..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:43.243001" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.859ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.527 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.471..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:43.244867" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.847ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.720..0.721 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.642..0.643 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.600..0.641 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.599..0.640 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.599..0.609 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.041..0.264 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.161 ms
              +bench | Execution Time: 0.777 ms
              +bench | time="10-11-23118 10:46:43.247082" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.191ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:43.249003" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.897ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (
              +bench | [A                          ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.133 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.250915" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.891ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.531..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:43.252874" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.936ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:43.254783" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.885ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.570 ms
              +bench | time="10-11-23118 10:46:43.256706" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.899ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.505..0.505 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.448..0.448 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.420..0.447 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.419..0.446 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.419..0.425 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.550 ms
              +bench | time="10-11-23118 10:46:43.258594" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.863ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.502..0.502 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.446..0.446 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.417..0.445 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.417..0.444 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.416..0.422 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.545 ms
              +bench | time="10-11-23118 10:46:43.260515" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.898ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.506..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.420..0.426 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.262444" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.901ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.264385" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.915ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:43.266362" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.953ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.451..0.451 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.268319" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.935ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.270312" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.967ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:43.272276" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.939ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:43.274191" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.888ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.506..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.451..0.451 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.549 ms
              +bench | time="10-11-23118 10:46:43.276156" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.938ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.147 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:43.278082" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.899ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.280037" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.93ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.527 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:43.281998" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.933ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bit
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.283952" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:43.285884" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.905ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.554 ms
              +bench | time="10-11-23118 10:46:43.287870" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.96ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.289834" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.937ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.553 ms
              +bench | time="10-11-23118 10:46:43.291805" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.946ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_l
              +bench | [A                                Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:43.293807" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.976ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.449..0.450 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.420..0.448 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.419..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.419..0.425 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.552 ms
              +bench | time="10-11-23118 10:46:43.295794" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.958ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:43.297749" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.931ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.299704" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.931ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d14
              +bench | [A                          ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.024..0.024 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.301665" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.935ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.553 ms
              +bench | time="10-11-23118 10:46:43.303651" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.962ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.305612" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.936ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.451..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.180 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.551 ms
              +bench | time="10-11-23118 10:46:43.307716" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.078ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.678..0.679 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.617..0.617 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.587..0.615 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.586..0.614 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.586..0.592 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.064..0.323 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.043..0.043 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.043..0.043 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.295 ms
              +bench | Execution Time: 0.748 ms
              +bench | time="10-11-23118 10:46:43.310243" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.456ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.312194" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.927ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.570 ms
              +bench | time="10-11-23118 10:46:43.314164" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.947ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.316105" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.919ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.318042" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.916ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.319976" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.913ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.321918" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.919ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.504..0.505 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.449..0.450 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.420..0.448 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.420..0.447 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.419..0.425 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.551 ms
              +bench | time="10-11-23118 10:46:43.323863" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.923ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.451..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.550 ms
              +bench | time="10-11-23118 10:46:43.325802" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.917ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.327789" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.961ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:43.329737" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.92ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.025..0.025 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.331687" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.922ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.333617" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.904ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.335583" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.939ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.337535" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.926ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.503..0.504 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.448..0.448 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.419..0.447 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.419..0.446 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.418..0.424 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.549 ms
              +bench | time="10-11-23118 10:46:43.339445" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.882ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.504..0.504 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.449..0.450 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.426 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.549 ms
              +bench | time="10-11-23118 10:46:43.341391" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.912ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.343323" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.904ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_l
              +bench | [A                                Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:43.345285" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.934ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.504..0.505 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.449..0.449 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.420..0.448 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.420..0.447 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.419..0.425 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.548 ms
              +bench | time="10-11-23118 10:46:43.347232" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.92ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.504..0.505 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.448..0.448 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.419..0.447 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.418..0.446 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.418..0.424 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.147 ms
              +bench | Execution Time: 0.549 ms
              +bench | time="10-11-23118 10:46:43.349209" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.951ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.351132" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.898ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.543..0.543 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.483..0.483 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.454..0.482 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.453..0.481 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.453..0.459 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.059..0.213 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.047..0.047 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.592 ms
              +bench | time="10-11-23118 10:46:43.353054" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.9ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.506..0.506 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.451..0.451 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.553 ms
              +bench | time="10-11-23118 10:46:43.355037" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.959ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.537..0.538 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.479 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.449..0.455 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.206 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:43.357103" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.043ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.359103" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.972ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.043..0.198 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.032..0.032 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:43.361083" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.958ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.363027" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.921ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.476..0.477 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.589 ms
              +bench | time="10-11-23118 10:46:43.364998" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.951ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.366888" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.865ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.473..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bit
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:43.368826" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.915ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.370786" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.933ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:43.372751" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.941ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:43.374694" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.922ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:43.376642" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.926ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.468..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.467 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.150 ms
              +bench | Execution Time: 0.582 ms
              +bench | time="10-11-23118 10:46:43.378659" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.995ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.446..0.446 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.417..0.445 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.416..0.444 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.416..0.422 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.380611" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.927ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.442..0.448 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:43.382577" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.944ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.384574" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.973ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.386510" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.91ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:43.388498" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.959ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.469 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.570 ms
              +bench | time="10-11-23118 10:46:43.390455" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.931ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.392403" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.921ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.394332" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.902ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:43.396314" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.955ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.578 ms
              +bench | time="10-11-23118 10:46:43.398278" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.937ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:43.400217" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.913ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:43.402163" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.919ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.575 ms
              +bench | time="10-11-23118 10:46:43.404148" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.96ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.525..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.570 ms
              +bench | time="10-11-23118 10:46:43.406076" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.9ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:43.408056" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.954ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:43.409972" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.889ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zo
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.182 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_a
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.552 ms
              +bench | time="10-11-23118 10:46:43.411871" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.874ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.413766" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.868ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.525 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:43.415686" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.897ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:43.417580" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.87ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index 
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:43.419557" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.953ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.735..0.735 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.651..0.652 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.606..0.649 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.606..0.648 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.603..0.613 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.040..0.275 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.027..0.027 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.186 ms
              +bench | Execution Time: 0.794 ms
              +bench | time="10-11-23118 10:46:43.421913" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.325ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:43.424258" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.317ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.746..0.747 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.661..0.662 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.617..0.660 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.617..0.659 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.616..0.626 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.044..0.287 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.197 ms
              +bench | Execution Time: 0.807 ms
              +bench | time="10-11-23118 10:46:43.426883" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.602ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.758..0.759 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.673..0.674 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.628..0.672 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.627..0.671 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.627..0.638 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.043..0.296 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.194 ms
              +bench | Execution Time: 0.823 ms
              +bench | time="10-11-23118 10:46:43.429213" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.303ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort
              +bench | [A                          Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.431176" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.942ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.146 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:43.433151" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.949ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.529..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:43.435089" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.917ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.538..0.539 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.482..0.482 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.453..0.481 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.452..0.480 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.452..0.458 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.198 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:43.437054" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.94ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.570 ms
              +bench | time="10-11-23118 10:46:43.438979" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.9ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:43.440955" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.937ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.556..0.557 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.480..0.480 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.479 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.478 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.439..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.605 ms
              +bench | time="10-11-23118 10:46:43.443165" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.183ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.556..0.556 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.492..0.493 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.460..0.491 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.460..0.490 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.459..0.466 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.043..0.210 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.028..0.028 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.201 ms
              +bench | Execution Time: 0.613 ms
              +bench | time="10-11-23118 10:46:43.445265" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.075ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.577..0.578 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.499..0.500 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.457..0.498 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.457..0.497 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.456..0.466 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.198 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.630 ms
              +bench | time="10-11-23118 10:46:43.447402" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.11ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.531..0.532 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.473..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.450 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.578 ms
              +bench | time="10-11-23118 10:46:43.449378" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.951ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.451262" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.861ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.448..0.448 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.420..0.447 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.419..0.446 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.419..0.425 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.145 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.453278" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.991ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.455195" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.893ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.153 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.457095" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.875ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.501..0.502 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.444..0.445 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.416..0.444 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.416..0.443 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.415..0.421 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.181 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.145 ms
              +bench | Execution Time: 0.548 ms
              +bench | time="10-11-23118 10:46:43.458970" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.852ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.198 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.025..0.025 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:43.460841" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.845ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.502..0.502 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.446..0.447 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.418..0.445 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.417..0.445 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.417..0.423 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.544 ms
              +bench | time="10-11-23118 10:46:43.462698" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.827ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.547..0.548 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.133 ms
              +bench | Execution Time: 0.591 ms
              +bench | time="10-11-23118 10:46:43.464584" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.862ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.554 ms
              +bench | time="10-11-23118 10:46:43.466440" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.834ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.531..0.531 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.585 ms
              +bench | time="10-11-23118 10:46:43.468340" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.879ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.030..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.470188" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.823ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.501..0.502 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.446..0.447 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.418..0.445 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.417..0.445 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.416..0.422 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.133 ms
              +bench | Execution Time: 0.547 ms
              +bench | time="10-11-23118 10:46:43.472033" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.82ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.acco
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index 
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.552 ms
              +bench | time="10-11-23118 10:46:43.473867" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.812ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.422..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.475968" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.985ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.496..0.496 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.440..0.441 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.412..0.439 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.411..0.439 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.411..0.417 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.539 ms
              +bench | time="10-11-23118 10:46:43.477815" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.82ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.506..0.506 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.450..0.450 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.448 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.553 ms
              +bench | time="10-11-23118 10:46:43.479699" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.862ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.481637" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.915ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.039..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.025..0.025 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.152 ms
              +bench | Execution Time: 0.573 ms
              +bench | time="10-11-23118 10:46:43.483593" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.931ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.541..0.541 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.133 ms
              +bench | Execution Time: 0.603 ms
              +bench | time="10-11-23118 10:46:43.486225" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.61ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.505..0.505 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.449..0.450 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.448 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.420..0.447 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.420..0.426 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.550 ms
              +bench | time="10-11-23118 10:46:43.488204" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.947ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (mov
              +bench | [A                                Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:43.490163" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.935ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:43.492085" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.898ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.494006" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.898ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.495928" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.898ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.497812" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.863ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.499785" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.949ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.463 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:43.501757" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.947ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.503683" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.898ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.554 ms
              +bench | time="10-11-23118 10:46:43.505579" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.872ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_l
              +bench | [A                                Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.507447" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.844ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.502..0.502 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.445..0.446 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.416..0.444 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.416..0.443 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.415..0.421 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.548 ms
              +bench | time="10-11-23118 10:46:43.509397" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.912ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.439..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.439..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.572 ms
              +bench | time="10-11-23118 10:46:43.511338" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.916ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:43.513302" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.938ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.501..0.502 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.445..0.446 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.417..0.444 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.416..0.444 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.415..0.421 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.545 ms
              +bench | time="10-11-23118 10:46:43.515212" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.884ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.508..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.423..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.154 ms
              +bench | Execution Time: 0.552 ms
              +bench | time="10-11-23118 10:46:43.517156" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.921ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.464..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.570 ms
              +bench | time="10-11-23118 10:46:43.519096" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.914ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.528..0.529 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.467 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.445 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.042..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.583 ms
              +bench | time="10-11-23118 10:46:43.521068" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.948ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.523021" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.925ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.530 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.472..0.473 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.471 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.443..0.471 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.443..0.449 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.197 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.576 ms
              +bench | time="10-11-23118 10:46:43.524977" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.93ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.570 ms
              +bench | time="10-11-23118 10:46:43.526913" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.906ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.471..0.472 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.442..0.470 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.201 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.580 ms
              +bench | time="10-11-23118 10:46:43.528912" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.974ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.506..0.507 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.450..0.451 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.421..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.550 ms
              +bench | time="10-11-23118 10:46:43.530834" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.897ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.538..0.539 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.482 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.453..0.480 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.452..0.479 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.452..0.458 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.582 ms
              +bench | time="10-11-23118 10:46:43.532798" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.939ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.534704" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.878ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.533 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.475 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.474 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.473 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.579 ms
              +bench | time="10-11-23118 10:46:43.536634" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.904ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.538601" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (mov
              +bench | [A                                Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:43.540582" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.953ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.542526" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.916ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:43.544484" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.93ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.530..0.531 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.469..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.468 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.440..0.468 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.440..0.446 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.578 ms
              +bench | time="10-11-23118 10:46:43.546506" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.993ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.548481" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.948ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.466 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.442 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:43.550414" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.907ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.568 ms
              +bench | time="10-11-23118 10:46:43.552382" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.938ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.141 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:43.554330" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.921ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.556264" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.906ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.558204" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.912ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.517 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.560189" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.957ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.562102" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.887ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.182 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.564027" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.899ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.561 ms
              +bench | time="10-11-23118 10:46:43.565931" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.879ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.567887" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.93ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.569807" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.896ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.449 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.182 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:43.571738" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.906ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.461 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.559 ms
              +bench | time="10-11-23118 10:46:43.573644" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.882ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.575563" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.891ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:43.577470" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.883ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.182 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.554 ms
              +bench | time="10-11-23118 10:46:43.579359" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.865ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.181 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.553 ms
              +bench | time="10-11-23118 10:46:43.581293" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.908ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.183 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.554 ms
              +bench | time="10-11-23118 10:46:43.583201" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.881ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.510..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.154 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.585123" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.897ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.510 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.553 ms
              +bench | time="10-11-23118 10:46:43.587057" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.907ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.465..0.465 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.436..0.464 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.436..0.463 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.435..0.441 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:43.588980" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.9ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.454..0.454 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.425..0.453 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.425..0.452 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.425..0.431 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.025..0.025 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.134 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.590899" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.891ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.535..0.536 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.478..0.479 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.450..0.477 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.449..0.477 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.449..0.455 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address
              +bench | [A                                      Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.586 ms
              +bench | time="10-11-23118 10:46:43.592892" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.97ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.594893" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.976ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.526..0.526 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.467..0.468 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.438..0.444 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:43.596836" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.92ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, mo
              +bench | [A                          Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.189 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.135 ms
              +bench | Execution Time: 0.566 ms
              +bench | time="10-11-23118 10:46:43.598817" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.956ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.742..0.743 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.659..0.659 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.617..0.657 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.616..0.656 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.616..0.626 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.054..0.282 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.040..0.041 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.263 ms
              +bench | Execution Time: 0.802 ms
              +bench | time="10-11-23118 10:46:43.601561" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.72ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.527..0.528 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.471 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.441..0.469 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.441..0.447 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.577 ms
              +bench | time="10-11-23118 10:46:43.603621" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.029ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.461..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.437 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:43.605647" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.996ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.520..0.521 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.194 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.564 ms
              +bench | time="10-11-23118 10:46:43.607666" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.992ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.460..0.460 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.431..0.459 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.430..0.436 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.140 ms
              +bench | Execution Time: 0.565 ms
              +bench | time="10-11-23118 10:46:43.609672" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.98ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.511 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.455 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.424..0.430 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.554 ms
              +bench | time="10-11-23118 10:46:43.611654" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.954ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.507..0.508 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.452..0.452 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.451 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.450 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.427 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.550 ms
              +bench | time="10-11-23118 10:46:43.613576" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.895ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.515..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.455..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.423..0.454 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.422..0.453 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.421..0.428 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.184 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.615531" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.929ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.515 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.558 ms
              +bench | time="10-11-23118 10:46:43.617466" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.899ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.512..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.555 ms
              +bench | time="10-11-23118 10:46:43.619380" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.886ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.431..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.621337" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.93ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.524..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.470..0.470 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.466 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.578 ms
              +bench | time="10-11-23118 10:46:43.623293" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.523..0.524 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.464 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.436..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.190 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.570 ms
              +bench | time="10-11-23118 10:46:43.625259" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.937ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.518..0.519 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.188 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.562 ms
              +bench | time="10-11-23118 10:46:43.627215" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.928ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.509..0.509 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.453..0.453 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.424..0.452 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.424..0.451 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.423..0.429 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.152 ms
              +bench | Execution Time: 0.552 ms
              +bench | time="10-11-23118 10:46:43.629161" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.918ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.511..0.512 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.456..0.456 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.426..0.454 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.426..0.432 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.032..0.185 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.144 ms
              +bench | Execution Time: 0.556 ms
              +bench | time="10-11-23118 10:46:43.631109" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.922ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.537..0.538 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.481..0.481 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.452..0.480 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.452..0.479 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.451..0.457 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (
              +bench | [A                          ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.061..0.216 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.049..0.049 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.581 ms
              +bench | time="10-11-23118 10:46:43.633083" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.945ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.514..0.514 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.458..0.458 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.428..0.434 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.635030" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.921ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.531..0.531 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.474..0.474 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.444..0.473 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.444..0.472 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.444..0.450 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.036..0.192 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.024..0.024 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.574 ms
              +bench | time="10-11-23118 10:46:43.636972" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.914ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.519..0.520 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.464 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.435..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.434..0.440 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.193 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.136 ms
              +bench | Execution Time: 0.563 ms
              +bench | time="10-11-23118 10:46:43.638896" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.897ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.546..0.546 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.484..0.484 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.455..0.483 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.455..0.482 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.454..0.461 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.023..0.023 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.139 ms
              +bench | Execution Time: 0.593 ms
              +bench | time="10-11-23118 10:46:43.640932" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.012ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.546..0.546 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.487..0.487 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.458..0.486 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.457..0.485 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.457..0.463 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.038..0.195 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.025..0.025 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.142 ms
              +bench | Execution Time: 0.593 ms
              +bench | time="10-11-23118 10:46:43.643054" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.099ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.533..0.534 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.475..0.476 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.447..0.474 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.446..0.473 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.446..0.452 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::b
              +bench | [A                          Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.037..0.203 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.025..0.025 rows=20
              +bench | [A                                ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.025..0.025 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.583 ms
              +bench | time="10-11-23118 10:46:43.645055" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.974ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.521..0.522 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.463..0.463 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.434..0.462 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.434..0.461 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.433..0.439 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.034..0.186 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.185 ms
              +bench | Execution Time: 0.571 ms
              +bench | time="10-11-23118 10:46:43.647138" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=2.057ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.516..0.516 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.459..0.459 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.430..0.458 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.429..0.457 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.429..0.435 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.043..0.196 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.032..0.032 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.143 ms
              +bench | Execution Time: 0.560 ms
              +bench | time="10-11-23118 10:46:43.649039" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.878ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.513..0.513 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.457..0.457 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.428..0.456 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.427..0.455 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.427..0.433 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.191 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.557 ms
              +bench | time="10-11-23118 10:46:43.650930" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.866ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.565..0.565 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.507..0.507 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.478..0.506 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.477..0.505 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.477..0.483 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.033..0.226 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.022..0.022 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.611 ms
              +bench | time="10-11-23118 10:46:43.652874" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.923ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.517..0.518 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.462..0.462 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.433..0.461 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.432..0.460 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.432..0.438 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.187 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.021..0.021 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.138 ms
              +bench | Execution Time: 0.569 ms
              +bench | time="10-11-23118 10:46:43.654758" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.862ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.522..0.523 rows=1 loops=1)
              +bench |   Output: volumes_to_jsonb(ROW(moves.asset, ROW(sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)), moves.asset
              +bench |   Group Key: moves.asset
              +bench |   ->  Sort  (cost=59.16..59.17 rows=3 width=41) (actual time=0.466..0.467 rows=1 loops=1)
              +bench |         Output: moves.asset, moves.post_commit_volumes
              +bench |         Sort Key: moves.asset
              +bench |         Sort Method: quicksort  Memory: 25kB
              +bench |         ->  Subquery Scan on moves  (cost=59.09..59.14 rows=3 width=41) (actual time=0.438..0.465 rows=1 loops=1)
              +bench |               Output: moves.asset, moves.post_commit_volumes
              +bench |               ->  Unique  (cost=59.09..59.11 rows=3 width=197) (actual time=0.437..0.465 rows=1 loops=1)
              +bench |                     Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                     ->  Sort  (cost=59.09..59.09 rows=3 width=197) (actual time=0.437..0.443 rows=200 loops=1)
              +bench |                           Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                           Sort Key: moves_1.account_address, moves_1.asset, moves_1.seq DESC
              +bench |                           Sort Method: quicksort  Memory: 45kB
              +bench |                           ->  Bitmap Heap Scan on "d241d90f-36eb-42d0-a171-907d1447debc".moves moves_1  (cost=20.07..59.06 rows=3 width=197) (actual time=0.031..0.182 rows=200 loops=1)
              +bench |                                 Output: moves_1.seq, NULL::numeric, moves_1.account_address, NULL::jsonb, moves_1.asset, NULL::numeric, NULL::timestamp without time zone, NULL::timestamp without time zone, moves_1.post_commit_volumes, NULL::volumes, NULL::boolean
              +bench |                                 Recheck Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench |                                 Filter: (jsonb_array_length(moves_1.account_address_array) = 2)
              +bench |                                 Heap Blocks: exact=102
              +bench |                                 ->  Bitmap Index Scan on moves_account_address_array  (cost=0.00..20.07 rows=10 width=0) (actual time=0.020..0.020 rows=200 loops=1)
              +bench |                                       Index Cond: (moves_1.account_address_array @@ '($[1] == "0")'::jsonpath)
              +bench | Planning Time: 0.137 ms
              +bench | Execution Time: 0.567 ms
              +bench | time="10-11-23118 10:46:43.656623" level=debug msg="WITH \"moves\" AS (SELECT distinct on (moves.account_address, moves.asset) moves.* FROM \"moves\" WHERE (jsonb_array_length(account_address_array) = 2 and account_address_array @@ ('$[1] == \"0\"')::jsonpath) ORDER BY \"account_address\", \"asset\", \"moves\".\"seq\" desc) SELECT volumes_to_jsonb((moves.asset, (sum((moves.post_commit_volumes).inputs), sum((moves.post_commit_volumes).outputs))::volumes)) as aggregated FROM moves GROUP BY \"moves\".\"asset\"" component=bun duration=1.844ms operation=SELECT
              +bench | GroupAggregate  (cost=59.16..59.99 rows=3 width=38) (actual time=0.504..0.505 rows=1 loops=1)

              +bench | [output clipped, log limit 2MiB reached]
              output | [A[----------] 100% transferring docker.io/library/postgres:15-alpine[K
              output | --> exporting outputs

 Push Summary ⏫ (disabled)
————————————————————————————————————————————————————————————————————————————————

To enable pushing use earthly --push

 Local Output Summary 🎁 (disabled)
————————————————————————————————————————————————————————————————————————————————



========================== 🌍 Earthly Build  ✅ SUCCESS ==========================

🛰️ Reuse cache between CI runs with Earthly Satellites! 2-20X faster than without cache. Generous free tier https://cloud.earthly.dev
