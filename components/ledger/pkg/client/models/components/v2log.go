// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/formancehq/stack/ledger/client/internal/utils"
	"math/big"
	"time"
)

type Type string

const (
	TypeNewTransaction      Type = "NEW_TRANSACTION"
	TypeSetMetadata         Type = "SET_METADATA"
	TypeRevertedTransaction Type = "REVERTED_TRANSACTION"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW_TRANSACTION":
		fallthrough
	case "SET_METADATA":
		fallthrough
	case "REVERTED_TRANSACTION":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type V2Log struct {
	ID   *big.Int       `json:"id"`
	Type Type           `json:"type"`
	Data map[string]any `json:"data"`
	Hash string         `json:"hash"`
	Date time.Time      `json:"date"`
}

func (v V2Log) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2Log) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V2Log) GetID() *big.Int {
	if o == nil {
		return big.NewInt(0)
	}
	return o.ID
}

func (o *V2Log) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *V2Log) GetData() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Data
}

func (o *V2Log) GetHash() string {
	if o == nil {
		return ""
	}
	return o.Hash
}

func (o *V2Log) GetDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Date
}
