(cors) {
	header {
		Access-Control-Allow-Methods "GET,OPTIONS,PUT,POST,DELETE,HEAD,PATCH"
		Access-Control-Allow-Headers content-type
		Access-Control-Max-Age 100
		Access-Control-Allow-Origin *
	}
}
{{- $values := . }}
{{- if .Auth }}
(auth) {
	auth {
		issuer {{ .Auth.Issuer }}

		read_key_set_max_retries 10

		{{- if .Auth.EnableScopes }}
		check_scopes yes
		service {args[0]}
		{{- end }}
	}
}
{{- end }}
{{- if .EnableAudit }}
(audit) {
	audit {
		# Kafka publisher
		{{- if (eq .Broker "kafka") }}
		publisher_kafka_broker {$PUBLISHER_KAFKA_BROKER:redpanda:29092}
		publisher_kafka_enabled {$PUBLISHER_KAFKA_ENABLED:false}
		publisher_kafka_tls_enabled {$PUBLISHER_KAFKA_TLS_ENABLED:false}
		publisher_kafka_sasl_enabled {$PUBLISHER_KAFKA_SASL_ENABLED:false}
		publisher_kafka_sasl_username {$PUBLISHER_KAFKA_SASL_USERNAME}
		publisher_kafka_sasl_password {$PUBLISHER_KAFKA_SASL_PASSWORD}
		publisher_kafka_sasl_mechanism {$PUBLISHER_KAFKA_SASL_MECHANISM}
		publisher_kafka_sasl_scram_sha_size {$PUBLISHER_KAFKA_SASL_SCRAM_SHA_SIZE}
		{{- end }}
		{{- if (eq .Broker "nats") }}
		# Nats publisher
		publisher_nats_enabled {$PUBLISHER_NATS_ENABLED:true}
		publisher_nats_url {$PUBLISHER_NATS_URL:nats://nats:4222}
		publisher_nats_client_id {$PUBLISHER_NATS_CLIENT_ID:gateway}
		publisher_nats_max_reconnects {$PUBLISHER_NATS_MAX_RECONNECTS:30}
		publisher_nats_max_reconnects_wait {$PUBLISHER_NATS_MAX_RECONNECT_WAIT:2s}
		{{- end }}
	}
}
{{- end }}

{
	{{ if .Debug }}debug{{ end }}
	# Many directives manipulate the HTTP handler chain and the order in which
	# those directives are evaluated matters. So the jwtauth directive must be
	# ordered.
	# c.f. https://caddyserver.com/docs/caddyfile/directives#directive-order
	{{- if .Auth }}
	order auth before basicauth
	{{- end }}
	order versions after metrics
	{{- if .EnableAudit }}
	order audit after encode
	{{- end }}
}

:{{ .Port }} {
    {{- if .EnableOpenTelemetry }}
	tracing {
		span gateway
	}
	{{- end }}
	log {
		output stdout
		{{- if .Debug }}
		level  DEBUG
		{{- end }}
	}

	{{- if .EnableAudit }}
	import audit
	{{- end }}

	{{- range $i, $service := .Services }}
    handle /api/{{ $service.Name }}* {
        uri strip_prefix /api/{{ $service.Name }}
        reverse_proxy {{ $service.Name }}:8080

        import cors
        {{- if and (not $service.Secured) $values.Auth }}
        import auth {{ $service.Name }}
        {{- end }}
    }
	{{- end }}

	handle /versions {
		versions {
			region "{{ .Platform.Region }}"
			env "{{ .Platform.Environment }}"
			endpoints {
				{{- range $i, $service := .Services }}
                {{ $service.Name }} {
                    http://{{ $service.Name }}:8080/_info http://{{ $service.Name }}:8080/_healthcheck
                }
				{{- end }}
			}
		}
	}

	# Respond 502 if service does not exists
	handle /api/* {
		respond "Bad Gateway" 502
	}
}