apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
    helm.sh/resource-policy: keep
  name: settings.formance.com
spec:
  group: formance.com
  names:
    kind: Settings
    listKind: SettingsList
    plural: settings
    singular: settings
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: Key
      jsonPath: .spec.key
      name: Key
      type: string
    - description: Value
      jsonPath: .spec.value
      name: Value
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: |-
          Settings represents a configurable piece of the stacks.


          The purpose of this resource is to be able to configure some common settings between a set of stacks.


          Example :
          ```yaml
          apiVersion: formance.com/v1beta1
          kind: Settings
          metadata:
            name: postgres-uri
          spec:
            key: postgres.ledger.uri
            stacks:
            - stack0
            value: postgresql://postgresql.formance.svc.cluster.local:5432
          ```


          This example create a setting named `postgres-uri` targeting the stack named `stack0` and the service `ledger` (see the key `postgres.ledger.uri`).


          Therefore, a [Database](#database) created for the stack `stack0` and the service named 'ledger' will use the uri `postgresql://postgresql.formance.svc.cluster.local:5432`.


          Settings allow to use wildcards in keys and in stacks list.


          For example, if you want to use the same database server for all the modules of a specific stack, you can write :
          ```yaml
          apiVersion: formance.com/v1beta1
          kind: Settings
          metadata:
            name: postgres-uri
          spec:
            key: postgres.*.uri # There, we use a wildcard to indicate we want to use that setting of all services of the stack `stack0`
            stacks:
            - stack0
            value: postgresql://postgresql.formance.svc.cluster.local:5432
          ```


          Also, we could use that setting for all of our stacks using :
          ```yaml
          apiVersion: formance.com/v1beta1
          kind: Settings
          metadata:
            name: postgres-uri
          spec:
            key: postgres.*.uri # There, we use a wildcard to indicate we want to use that setting for all services of all stacks
            stacks:
            - * # There we select all the stacks
            value: postgresql://postgresql.formance.svc.cluster.local:5432
          ```


          Some settings are really global, while some are used by specific module.


          Refer to the documentation of each module and resource to discover available Settings.


          ##### Global settings
          ###### AWS account


          A stack can use an AWS account for authentication.


          It can be used to connect to any AWS service we could use.


          It includes RDS, OpenSearch and MSK. To do so, you can create the following setting:
          ```yaml
          apiVersion: formance.com/v1beta1
          kind: Settings
          metadata:
            name: aws-service-account
          spec:
            key: aws.service-account
            stacks:
            - '*'
            value: aws-access
          ```
          This setting instruct the operator than there is somewhere on the cluster a service account named `aws-access`.


          So, each time a service has the capability to use AWS, the operator will use this service account.


          The service account could look like that :
          ```yaml
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            annotations:
              eks.amazonaws.com/role-arn: arn:aws:iam::************:role/staging-eu-west-1-hosting-stack-access
            labels:
              formance.com/stack: any
            name: aws-access
          ```
          You can note two things :
          1. We have an annotation indicating the role arn used to connect to AWS. Refer to the AWS documentation to create this role
          2. We have a label `formance.com/stack=any` indicating we are targeting all stacks.
             Refer to the documentation of [ResourceReference](#resourcereference) for further information.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            properties:
              key:
                description: The setting Key. See the documentation of each module
                  or [global settings](#globalsettings) to discover them.
                type: string
              stacks:
                description: Stacks on which the setting is applied. Can contain `*`
                  to indicate a wildcard.
                items:
                  type: string
                type: array
              value:
                description: The value. It must have a specific format following the
                  Key.
                type: string
            required:
            - key
            - value
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
