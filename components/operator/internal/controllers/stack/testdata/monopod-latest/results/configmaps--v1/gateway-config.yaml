apiVersion: v1
data:
    Caddyfile: |-
        (cors) {
        	header {
        		Access-Control-Allow-Methods "GET,OPTIONS,PUT,POST,DELETE,HEAD,PATCH"
        		Access-Control-Allow-Headers content-type
        		Access-Control-Max-Age 100
        		Access-Control-Allow-Origin *
        	}
        }

        (auth) {
        	auth {
        		issuer http://gateway:8000/api/auth

        		read_key_set_max_retries 10
        	}
        }

        {
        	
        	# Many directives manipulate the HTTP handler chain and the order in which
        	# those directives are evaluated matters. So the jwtauth directive must be
        	# ordered.
        	# c.f. https://caddyserver.com/docs/caddyfile/directives#directive-order
        	order auth before basicauth
        	order versions after metrics
        }

        :8000 {
        	tracing {
        		span gateway
        	}
        	log {
        		output stdout
        	}

        			@authmatcher {
        				path /api/auth*
        			}
        			handle @authmatcher {
        				uri strip_prefix /api/auth
        				reverse_proxy 127.0.0.1:10005

        				import cors
        			}

        			@ledgermatcher {
        				path /api/ledger*
        			}
        			handle @ledgermatcher {
        				uri strip_prefix /api/ledger
        				reverse_proxy 127.0.0.1:10001

        				import cors
        				import auth ledger
        			}

        			@orchestrationmatcher {
        				path /api/orchestration*
        			}
        			handle @orchestrationmatcher {
        				uri strip_prefix /api/orchestration
        				reverse_proxy 127.0.0.1:8080

        				import cors
        				import auth orchestration
        			}
        			@paymentsmatcher {
        				path /api/payments/payments*
        				method POST GET PATCH
        			}
        			handle @paymentsmatcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10003
        				import cors
        				import auth payments
        			}
        			@poolsmatcher {
        				path /api/payments/pools*
        				method POST GET DELETE
        			}
        			handle @poolsmatcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10003
        				import cors
        				import auth payments
        			}
        			@accountsmatcher {
        				path /api/payments/accounts*
        				method GET
        			}
        			handle @accountsmatcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10003
        				import cors
        				import auth payments
        			}
        			@bank-accounts-readmatcher {
        				path /api/payments/bank-accounts*
        				method GET
        			}
        			handle @bank-accounts-readmatcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10003
        				import cors
        				import auth payments
        			}
        			@transfer-initiations-readmatcher {
        				path /api/payments/transfer-initiations*
        				method GET
        			}
        			handle @transfer-initiations-readmatcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10003
        				import cors
        				import auth payments
        			}

        			@payments-apimatcher {
        				path /api/payments*
        			}
        			handle @payments-apimatcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10003

        				import cors
        				import auth payments
        			}
        			@connectorsmatcher {
        				path /api/payments/connectors*
        			}
        			handle @connectorsmatcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10004
        				import cors
        				import auth payments
        			}
        			@paymentWebhooksmatcher {
        				path /api/payments/connectors/webhooks*
        				method POST
        			}
        			handle @paymentWebhooksmatcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10004
        				import cors
        			}
        			@configsmatcher {
        				path /api/payments/configs*
        			}
        			handle @configsmatcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10004
        				import cors
        				import auth payments
        			}
        			@transfer-initiations-writematcher {
        				path /api/payments/transfer-initiations*
        				method POST DELETE
        			}
        			handle @transfer-initiations-writematcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10004
        				import cors
        				import auth payments
        			}
        			@bank-accounts-writematcher {
        				path /api/payments/bank-accounts*
        				method POST
        			}
        			handle @bank-accounts-writematcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10004
        				import cors
        				import auth payments
        			}

        			@payments-connectorsmatcher {
        				path /api/payments*
        			}
        			handle @payments-connectorsmatcher {
        				uri strip_prefix /api/payments
        				reverse_proxy 127.0.0.1:10004

        				import cors
        				import auth payments
        			}

        			@searchmatcher {
        				path /api/search*
        			}
        			handle @searchmatcher {
        				uri strip_prefix /api/search
        				reverse_proxy 127.0.0.1:10006

        				import cors
        				import auth search
        			}

        			@search-benthosmatcher {
        				path /api/search-benthos*
        			}
        			handle @search-benthosmatcher {
        				uri strip_prefix /api/search-benthos
        				reverse_proxy 127.0.0.1:4195

        				import cors
        				import auth search
        			}

        			@walletsmatcher {
        				path /api/wallets*
        			}
        			handle @walletsmatcher {
        				uri strip_prefix /api/wallets
        				reverse_proxy 127.0.0.1:10002

        				import cors
        				import auth wallets
        			}

        			@webhooksmatcher {
        				path /api/webhooks*
        			}
        			handle @webhooksmatcher {
        				uri strip_prefix /api/webhooks
        				reverse_proxy 127.0.0.1:10007

        				import cors
        				import auth webhooks
        			}

        	handle /versions {
        		versions {
        			region "us-west-1"
        			env "staging"
        			endpoints {
        					auth {
        						http://127.0.0.1:10005/_info http://127.0.0.1:10005/_healthcheck
        					}
        					ledger {
        						http://127.0.0.1:10001/_info http://127.0.0.1:10001/_healthcheck
        					}
        					orchestration {
        						http://127.0.0.1:8080/_info http://127.0.0.1:8080/_healthcheck
        					}
        					payments {
        						http://127.0.0.1:10003/_info http://127.0.0.1:10003/_health
        						http://127.0.0.1:10004/_info http://127.0.0.1:10004/_health
        					}
        					search {
        						http://127.0.0.1:10006/_info http://127.0.0.1:10006/_healthcheck
        					}
        					wallets {
        						http://127.0.0.1:10002/_info http://127.0.0.1:10002/_healthcheck
        					}
        					webhooks {
        						http://127.0.0.1:10007/_info http://127.0.0.1:10007/_healthcheck
        					}
        			}
        		}
        	}

        	# Respond 502 if service does not exists
        	handle /api/* {
        		respond "Bad Gateway" 502
        	}

        	# handle all other requests
        	handle {
        		reverse_proxy control:3000
        		import cors
        	}
        	
        }
kind: ConfigMap
metadata:
    labels:
        stack: "true"
    name: gateway-config
    namespace: monopod-latest
