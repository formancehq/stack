apiVersion: v1
data:
    event_bus.yaml: |
        name: event_bus
        type: input

        fields:
        - name: topic
          type: string
        - name: consumer_group
          type: string

        mapping: |
          root = if env("BROKER") == "kafka" {{
            "kafka": {
              "addresses": [ env("KAFKA_ADDRESS") ],
              "topics": [ env("TOPIC_PREFIX") + this.topic ],
              "target_version": env("KAFKA_VERSION"),
              "consumer_group": this.consumer_group,
              "checkpoint_limit": 1024,
              "sasl": {
                "mechanism": env("KAFKA_SASL_MECHANISM"),
                "password": env("KAFKA_SASL_PASSWORD"),
                "user": env("KAFKA_SASL_USERNAME")
              },
              "tls": {
                "enabled": env("KAFKA_TLS_ENABLED") == "true"
              },
              "extract_tracing_map": "root = meta()"
            }
          }} else {{
            "nats_jetstream": {
              "urls": [env("NATS_URL")],
              "queue": this.consumer_group,
              "subject": env("TOPIC_PREFIX") + this.topic,
              "durable": this.consumer_group
            }
          }}
    postgres_query.yaml: |
        name: postgres_query
        type: processor

        fields:
        - name: query
          type: string
        - name: service
          type: string

        mapping: |
          root = {
            "sql_raw": {
              "dsn": env("%s_POSTGRES_URI".format(this.service.uppercase())),
              "driver": "postgres",
              "query": this.query,
              "unsafe_dynamic_query": true
            }
          }
    switch_event_type.yaml: |
        name: switch_event_type
        type: processor

        fields:
        - kind: list
          type: unknown
          name: events

        mapping: |
          root = {
            "switch": this.events.map_each(eventDefinition -> {
              "check": "this.type == \"%s\" && this.version == \"%s\"".format(eventDefinition.label, eventDefinition.version),
              "processors": eventDefinition.processors
            }).append({
              "processors": [
                {
                  "log": {
                    "message": "unable to handle message ${! content() }"
                  }
                },
                {
                  "bloblang": "root = deleted()"
                }
              ]
            })
          }
kind: ConfigMap
metadata:
    labels:
        stack: "true"
    name: search-benthos-templates
    namespace: multipod-latest-with-custom-registry
