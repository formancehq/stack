---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: resourcereferences.formance.com
spec:
  group: formance.com
  names:
    kind: ResourceReference
    listKind: ResourceReferenceList
    plural: resourcereferences
    singular: resourcereference
  scope: Cluster
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: |-
          ResourceReference is a special resources used to refer to externally created resources.


          It includes k8s service accounts and secrets.


          Why? Because the operator create a namespace by stack, so, a stack does not have access to secrets and service
          accounts created externally.


          A ResourceReference is created by other resource who need to use a specific secret or service account.
          For example, if you want to use a secret for your database connection (see [Database](#database), you will
          create a setting indicating a secret name. You will need to create this secret yourself, and you will put this
          secret inside the namespace you want (`default` maybe).


          The Database reconciler will create a ResourceReference looking like that :
          ```
          apiVersion: formance.com/v1beta1
          kind: ResourceReference
          metadata:
            name: jqkuffjxcezj-qlii-auth-postgres
            ownerReferences:
            - apiVersion: formance.com/v1beta1
              blockOwnerDeletion: true
              controller: true
              kind: Database
              name: jqkuffjxcezj-qlii-auth
              uid: 2cc4b788-3ffb-4e3d-8a30-07ed3941c8d2
          spec:
            gvk:
              group: ""
              kind: Secret
              version: v1
            name: postgres
            stack: jqkuffjxcezj-qlii
          status:
            ...
          ```
          This reconciler behind this ResourceReference will search, in all namespaces, for a secret named "postgres".
          The secret must have a label `formance.com/stack` with the value matching either a specific stack or `any` to target any stack.


          Once the reconciler has found the secret, it will copy it inside the stack namespace, allowing the ResourceReconciler owner to use it.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            properties:
              gvk:
                description: |-
                  GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion
                  to avoid automatic coercion.  It doesn't use a GroupVersion to avoid custom marshalling
                properties:
                  group:
                    type: string
                  kind:
                    type: string
                  version:
                    type: string
                required:
                - group
                - kind
                - version
                type: object
              name:
                type: string
              stack:
                description: Stack indicates the stack on which the module is installed
                type: string
            required:
            - gvk
            - name
            type: object
          status:
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Status []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      pattern: ^([A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?)?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - status
                  - type
                  type: object
                type: array
              hash:
                type: string
              info:
                description: Info can contain any additional like reconciliation errors
                type: string
              ready:
                description: Ready indicates if the resource is seen as completely
                  reconciled
                type: boolean
              syncedResource:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
