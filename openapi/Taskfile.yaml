
# https://taskfile.dev
version: "3"

env:
  VERSION: "develop"

tasks:
  sdk:build:
    desc: Build the SDK
    cmds:
      - npm install
      - npm run build
      - sed -i -e "s/SDK_VERSION/{{.VERSION}}/g" build/generate.json

  sdk:generate:
    desc: Generate client code
    dir: .
    preconditions:
      - sh: '[ "{{.CLI_ARGS}}" != "" ]'
        msg: Please specify generator as first cli arg (ie "task generate -- go")
    cmds:
      - rm -rf ./sdks/{{.CLI_ARGS}}
      - >
        docker run --rm -w /local -v ${PWD}/..:/local openapitools/openapi-generator-cli:v6.4.0 generate
        -i ./openapi/build/generate.json
        -g {{ (split "-" .CLI_ARGS)._0 }}
        -c ./openapi/configs/{{.CLI_ARGS}}.yaml
        -o ./sdks/{{.CLI_ARGS}}
        --git-user-id=formancehq
        --git-repo-id=formance-sdk-{{.CLI_ARGS}}
        -p packageVersion={{.VERSION}}
        -p apiVersion={{.VERSION}}

  sdk:generate:all:
    desc: Generate all client code
    dir: ./sdk
    deps:
      - task: sdk:generate
        vars: {CLI_ARGS: "go", VERSION: "{{.VERSION}}"}
      - task: sdk:generate
        vars: {CLI_ARGS: "java", VERSION: "{{.VERSION}}"}
      - task: sdk:generate
        vars: {CLI_ARGS: "php", VERSION: "{{.VERSION}}"}
      - task: sdk:generate
        vars: {CLI_ARGS: "python", VERSION: "{{.VERSION}}"}
      - task: sdk:generate
        vars: {CLI_ARGS: "typescript-node", VERSION: "{{.VERSION}}"}

  sdk:template:
    desc: Extract templates
    preconditions:
    - sh: "[ \"{{.CLI_ARGS}}\" != \"\" ]"
      msg: Please specify generator as first cli arg (ie "task template -- go")
    cmds:
    - >
      docker run --rm -w /local -v ${PWD}:/local openapitools/openapi-generator-cli:v6.4.0 author
      template -g {{.CLI_ARGS}} -o templates/{{.CLI_ARGS}}
