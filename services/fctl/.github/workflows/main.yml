on:
  push:
    branches:
      - main
  pull_request:
    types: [ assigned, opened, synchronize, reopened ]
  release:
    types: [ prereleased, released ]
  workflow_call:
    secrets:
      NUMARY_GITHUB_TOKEN:
        required: true
      FURY_TOKEN:
        required: true

name: Main
jobs:
  Pr:
    if: github.event_name == 'pull_request'
    uses: formancehq/gh-workflows/.github/workflows/pr-style.yml@main

  Lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version-file: 'go.mod'
        cache: true
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: get deps
      run: go mod download
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.49.0
        args: --verbose

  Test:
    runs-on: ubuntu-latest
    steps:
    - name: Install task
      uses: arduino/setup-task@v1
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version-file: 'go.mod'
        cache: true
    - name: Run tests
      run: task tests
    - name: Upload coverage to Codecov
      run: bash <(curl -s https://codecov.io/bash)

  Build:
    if: github.event_name != 'release'
    name: GoReleaser Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version-file: 'go.mod'
        cache: true
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v2
      with:
        version: latest
        args: build --parallelism 4 --rm-dist --skip-validate --snapshot
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs:
      - Lint
      - Test

  Release:
    if: github.event_name == 'release'
    name: GoReleaser Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-go@v3
      with:
        go-version-file: 'go.mod'
        cache: true
    - name: Run GoReleaser
      env:
        GITHUB_TOKEN: ${{ secrets.NUMARY_GITHUB_TOKEN }}
        FURY_TOKEN_FORMANCE: ${{ secrets.FURY_TOKEN_FORMANCE }}
      uses: goreleaser/goreleaser-action@v2
      with:
        version: latest
        args: release --parallelism 4 --rm-dist --skip-validate
    needs:
      - Lint
      - Test

  Docker:
    name: 'Build Docker for fctl'
    runs-on: ubuntu-latest
    needs:
      - Lint
      - Test
    steps:
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: "NumaryBot"
        password: ${{ secrets.NUMARY_GITHUB_TOKEN }}
    - uses: actions/setup-go@v2
      with:
        go-version-file: 'go.mod'
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Download dependencies
      run: go mod vendor
    - name: Build and push Released
      if: github.event.action == 'released'
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ghcr.io/formancehq/fctl:latest,ghcr.io/formancehq/fctl:${{ github.event.release.tag_name }}
        build-args: |
          APP_SHA=${{ github.sha }}
          VERSION=${{ github.event.release.tag_name }}
    - name: Build and push PreReleased
      if: github.event.action == 'prereleased'
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ghcr.io/formancehq/fctl:${{ github.event.release.tag_name }}
        build-args: |
          APP_SHA=${{ github.sha }}
          VERSION=${{ github.event.release.tag_name }}
    - name: Build and push
      if: github.event.action != 'released' || github.event.action != 'prereleased'
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ghcr.io/formancehq/fctl:${{ github.sha }}
        build-args: |
          APP_SHA=${{ github.sha }}
          VERSION=develop
