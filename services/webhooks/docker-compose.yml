services:
  server:
    command: reflex -r '\.go' -s -- sh -c "go run . server"
    build:
      target: dev
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:8080/_healthcheck" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - .:/app
    ports:
      - "8080:8080"
    environment:
      OTEL_SERVICE_NAME: webhooks
      OTEL_TRACES: "true"
      OTEL_TRACES_EXPORTER: jaeger
      OTEL_TRACES_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces

  worker:
    command: reflex -r '\.go' -s -- sh -c "go run . worker"
    build:
      target: dev
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:8081/_healthcheck" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - .:/app
    ports:
      - "8081:8081"
    environment:
      KAFKA_BROKERS: "redpanda:29092"
      OTEL_SERVICE_NAME: webhooks-worker
      OTEL_TRACES: "true"
      OTEL_TRACES_EXPORTER: jaeger
      OTEL_TRACES_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces

  postgres:
    image: "postgres:alpine"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ledger"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "webhooks"
      POSTGRES_PASSWORD: "webhooks"
      POSTGRES_DB: "webhooks"
    depends_on:
      redpanda:
        condition: service_healthy

  redpanda:
    image: docker.vectorized.io/vectorized/redpanda:v22.2.2
    command:
      - redpanda
      - start
      - --smp
      - '1'
      - --reserve-memory
      - 0M
      - --overprovisioned
      - --node-id
      - '0'
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
    healthcheck:
      test: curl -s -f -k http://127.0.0.1:9644/metrics > /dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9644:9644"

  redpanda-config:
    image: docker.vectorized.io/vectorized/redpanda:v22.2.2
    command:
      - cluster
      - config
      - import
      - --filename
      - /etc/redpanda/redpanda.yaml
      - --api-urls
      - redpanda:9644
    depends_on:
      redpanda:
        condition: service_healthy
    volumes:
      - ./config/redpanda/config.yaml:/etc/redpanda/redpanda.yaml:ro

  redpanda-ui:
    image: docker.redpanda.com/vectorized/console:v2.0.2
    ports:
      - "8888:8080"
    depends_on:
      redpanda:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: redpanda:29092

  jaeger:
    image: jaegertracing/opentelemetry-all-in-one
    ports:
    - "16686:16686/tcp"
