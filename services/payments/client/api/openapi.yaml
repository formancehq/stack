openapi: 3.1.0
info:
  title: Payments API
  version: 1.0.0
servers:
- url: /
paths:
  /payments:
    get:
      operationId: listPayments
      parameters:
      - description: "Limit the number of payments to return, pagination can be achieved\
          \ in conjunction with 'skip' parameter."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema: {}
        style: form
      - description: "How many payments to skip, pagination can be achieved in conjunction\
          \ with 'limit' parameter."
        example: 100
        explode: true
        in: query
        name: skip
        required: false
        schema: {}
        style: form
      - description: Field used to sort payments (Default is by date).
        example: status
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items: {}
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPaymentsResponse'
          description: A JSON array of payments
      summary: Returns a list of payments.
      tags:
      - Payments
  /payments/{paymentId}:
    get:
      operationId: getPayment
      parameters:
      - description: The payment id
        example: XXX
        explode: false
        in: path
        name: paymentId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: A payment
      summary: Returns a payment.
      tags:
      - Payments
  /connectors:
    get:
      description: Get all installed connectors
      operationId: getAllConnectors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectorsResponse'
          description: List of installed connectors
      summary: Get all installed connectors
      tags:
      - Payments
  /connectors/configs:
    get:
      description: Get all available connectors configs
      operationId: getAllConnectorsConfigs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectorsConfigsResponse'
          description: List of available connectors configs
      summary: Get all available connectors configs
      tags:
      - Payments
  /connectors/{connector}:
    delete:
      description: Uninstall  connector
      operationId: uninstallConnector
      parameters:
      - description: The connector code
        explode: false
        in: path
        name: connector
        required: true
        schema:
          $ref: '#/components/schemas/Connectors'
        style: simple
      responses:
        "204":
          description: Connector has been uninstalled
      summary: Uninstall connector
      tags:
      - Payments
    post:
      description: Install connector
      operationId: installConnector
      parameters:
      - description: The connector code
        explode: false
        in: path
        name: connector
        required: true
        schema:
          $ref: '#/components/schemas/Connectors'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorConfig'
        required: true
      responses:
        "204":
          description: Connector has been installed
      summary: Install connector
      tags:
      - Payments
  /connectors/{connector}/config:
    get:
      description: Read connector config
      operationId: readConnectorConfig
      parameters:
      - description: The connector code
        explode: false
        in: path
        name: connector
        required: true
        schema:
          $ref: '#/components/schemas/Connectors'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorConfig'
          description: Connector config
      summary: Read connector config
      tags:
      - Payments
  /connectors/{connector}/reset:
    post:
      description: Reset connector. Will remove the connector and ALL PAYMENTS generated
        with it.
      operationId: resetConnector
      parameters:
      - description: The connector code
        explode: false
        in: path
        name: connector
        required: true
        schema:
          $ref: '#/components/schemas/Connectors'
        style: simple
      responses:
        "204":
          description: Connector has been reset
      summary: Reset connector
      tags:
      - Payments
  /connectors/{connector}/tasks:
    get:
      description: List all tasks associated with this connector.
      operationId: listConnectorTasks
      parameters:
      - description: The connector code
        explode: false
        in: path
        name: connector
        required: true
        schema:
          $ref: '#/components/schemas/Connectors'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  oneOf:
                  - $ref: '#/components/schemas/TaskDescriptorStripe'
                  - $ref: '#/components/schemas/TaskDescriptorWise'
                  - $ref: '#/components/schemas/TaskDescriptorCurrencyCloud'
                  - $ref: '#/components/schemas/TaskDescriptorDummyPay'
                  - $ref: '#/components/schemas/TaskDescriptorModulr'
                  - $ref: '#/components/schemas/TaskDescriptorBankingCircle'
          description: Task list
      summary: List connector tasks
      tags:
      - Payments
  /connectors/{connector}/tasks/{taskId}:
    get:
      description: Get a specific task associated to the connector
      operationId: getConnectorTask
      parameters:
      - description: The connector code
        explode: false
        in: path
        name: connector
        required: true
        schema:
          $ref: '#/components/schemas/Connectors'
        style: simple
      - description: The task id
        example: task1
        explode: false
        in: path
        name: taskId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/TaskDescriptorStripe'
                - $ref: '#/components/schemas/TaskDescriptorWise'
                - $ref: '#/components/schemas/TaskDescriptorCurrencyCloud'
                - $ref: '#/components/schemas/TaskDescriptorDummyPay'
                - $ref: '#/components/schemas/TaskDescriptorModulr'
                - $ref: '#/components/schemas/TaskDescriptorBankingCircle'
          description: The specified task
      summary: Read a specific task of the connector
      tags:
      - Payments
  /connectors/stripe/transfer:
    post:
      description: Execute a transfer between two Stripe accounts
      operationId: connectorsStripeTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StripeTransferRequest'
        required: true
      responses:
        "200":
          description: Transfer has been executed
      summary: Transfer funds between Stripe accounts
      tags:
      - Payments
components:
  schemas:
    Connectors:
      enum:
      - STRIPE
      - DUMMY-PAY
      - SIE
      - MODULR
      - CURRENCY-CLOUD
      - BANKING-CIRCLE
    ConnectorConfig:
      oneOf:
      - $ref: '#/components/schemas/StripeConfig'
      - $ref: '#/components/schemas/DummyPayConfig'
      - $ref: '#/components/schemas/WiseConfig'
      - $ref: '#/components/schemas/ModulrConfig'
      - $ref: '#/components/schemas/CurrencyCloudConfig'
      - $ref: '#/components/schemas/BankingCircleConfig'
    StripeConfig:
      properties:
        pollingPeriod:
          default: 120s
          description: The frequency at which the connector will try to fetch new
            BalanceTransaction objects from Stripe api
          example: 60s
        apiKey:
          example: XXX
        pageSize:
          default: 10
          description: |
            Number of BalanceTransaction to fetch at each polling interval.
          example: 50
      required:
      - apiKey
    StripeTask:
      properties:
        oldestId:
          description: The id of the oldest BalanceTransaction fetched from stripe
            for this account
        oldestDate:
          description: The creation date of the oldest BalanceTransaction fetched
            from stripe for this account
          format: date-time
        moreRecentId:
          description: The id of the more recent BalanceTransaction fetched from stripe
            for this account
        moreRecentDate:
          description: The creation date of the more recent BalanceTransaction fetched
            from stripe for this account
          format: date-time
        noMoreHistory: {}
    DummyPayConfig:
      properties:
        filePollingPeriod:
          default: 10s
          description: The frequency at which the connector will try to fetch new
            payment objects from the directory
          example: 60s
        fileGenerationPeriod:
          default: 10s
          description: The frequency at which the connector will create new payment
            objects in the directory
          example: 60s
        directory:
          example: /tmp/dummypay
      required:
      - directory
    WiseConfig:
      properties:
        apiKey:
          example: XXX
      required:
      - apiKey
    ModulrConfig:
      properties:
        apiKey:
          example: XXX
        apiSecret:
          example: XXX
        endpoint:
          example: XXX
      required:
      - apiKey
      - apiSecret
    BankingCircleConfig:
      properties:
        username:
          example: XXX
        password:
          example: XXX
        endpoint:
          example: XXX
        authorizationEndpoint:
          example: XXX
      required:
      - authorizationEndpoint
      - endpoint
      - password
      - username
    CurrencyCloudConfig:
      properties:
        apiKey:
          example: XXX
        loginID:
          description: Username of the API Key holder
          example: XXX
        pollingPeriod:
          description: The frequency at which the connector will fetch transactions
          example: 60s
        endpoint:
          description: The endpoint to use for the API. Defaults to https://devapi.currencycloud.com
          example: XXX
      required:
      - apiKey
      - loginID
    ListPaymentsResponse:
      example:
        data: ""
      properties:
        data:
          items:
            $ref: '#/components/schemas/Payment'
      required:
      - data
    GetPaymentResponse:
      properties:
        data:
          $ref: '#/components/schemas/Payment'
      required:
      - data
    Payment:
      example:
        reference: ""
        date: ""
        amount: 100
        scheme: ""
        provider: ""
        raw: ""
        id: XXX
        type: ""
        asset: USD
        status: ""
      properties:
        provider: {}
        reference: {}
        scheme:
          enum:
          - visa
          - mastercard
          - apple pay
          - google pay
          - sepa debit
          - sepa credit
          - sepa
          - a2a
          - ach debit
          - ach
          - rtp
          - other
        status: {}
        type:
          enum:
          - pay-in
          - payout
          - other
        id:
          example: XXX
        amount:
          example: 100
        asset:
          example: USD
        date:
          format: date-time
        raw:
          nullable: true
      required:
      - amount
      - asset
      - date
      - id
      - provider
      - scheme
      - status
      - type
    ListConnectorsResponse:
      example:
        data: ""
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConnectorBaseInfo'
      required:
      - data
    ListConnectorsConfigsResponse:
      example:
        connector:
          key:
            datatype: ""
            required: ""
      properties:
        connector:
          $ref: '#/components/schemas/ListConnectorsConfigsResponse_connector'
    ConnectorBaseInfo:
      properties:
        provider:
          example: stripe
        disabled:
          example: false
    StripeTransferRequest:
      example:
        amount: 100
        metadata:
          order_id: "6735"
        destination: acct_1Gqj58KZcSIg2N2q
        asset: USD
      properties:
        amount:
          example: 100
        asset:
          example: USD
        destination:
          example: acct_1Gqj58KZcSIg2N2q
        metadata:
          description: |
            A set of key/value pairs that you can attach to a transfer object.
            It can be useful for storing additional information about the transfer in a structured format.
          example:
            order_id: "6735"
    ConnectorTaskBase:
      properties:
        provider:
          description: The connector code
          example: stripe
        createdAt:
          description: The date when the task was created
          example: 2020-01-01T00:00:00.000Z
          format: date-time
        status:
          description: The task status
          enum:
          - stopped
          - pending
          - terminated
          - active
          - failed
          example: stopped
        error:
          description: The error message if the task failed
          example: "Error: Something went wrong"
        state:
          description: The task state
          example: {}
    TaskDescriptorStripe:
      allOf:
      - $ref: '#/components/schemas/ConnectorTaskBase'
      - properties:
          descriptor:
            properties:
              name: {}
              main: {}
              account: {}
    TaskDescriptorWise:
      allOf:
      - $ref: '#/components/schemas/ConnectorTaskBase'
      - properties:
          descriptor:
            properties:
              name: {}
              key: {}
              profileID: {}
    TaskDescriptorModulr:
      allOf:
      - $ref: '#/components/schemas/ConnectorTaskBase'
      - properties:
          descriptor:
            properties:
              name: {}
              key: {}
              accountID: {}
    TaskDescriptorDummyPay:
      allOf:
      - $ref: '#/components/schemas/ConnectorTaskBase'
      - properties:
          descriptor:
            properties:
              name: {}
              key: {}
              fileName: {}
    TaskDescriptorCurrencyCloud:
      allOf:
      - $ref: '#/components/schemas/ConnectorTaskBase'
      - properties:
          descriptor:
            properties:
              name: {}
    TaskDescriptorBankingCircle:
      allOf:
      - $ref: '#/components/schemas/ConnectorTaskBase'
      - properties:
          descriptor:
            properties:
              name: {}
              key: {}
    ListConnectorsConfigsResponse_connector_key:
      example:
        datatype: ""
        required: ""
      properties:
        datatype: {}
        required: {}
    ListConnectorsConfigsResponse_connector:
      example:
        key:
          datatype: ""
          required: ""
      properties:
        key:
          $ref: '#/components/schemas/ListConnectorsConfigsResponse_connector_key'
