/*
Payments API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ConnectorTaskBase struct for ConnectorTaskBase
type ConnectorTaskBase struct {
	// The connector code
	Provider interface{} `json:"provider,omitempty"`
	// The date when the task was created
	CreatedAt interface{} `json:"createdAt,omitempty"`
	// The task status
	Status interface{} `json:"status,omitempty"`
	// The error message if the task failed
	Error interface{} `json:"error,omitempty"`
	// The task state
	State interface{} `json:"state,omitempty"`
}

// NewConnectorTaskBase instantiates a new ConnectorTaskBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorTaskBase() *ConnectorTaskBase {
	this := ConnectorTaskBase{}
	return &this
}

// NewConnectorTaskBaseWithDefaults instantiates a new ConnectorTaskBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorTaskBaseWithDefaults() *ConnectorTaskBase {
	this := ConnectorTaskBase{}
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorTaskBase) GetProvider() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorTaskBase) GetProviderOk() (*interface{}, bool) {
	if o == nil || isNil(o.Provider) {
		return nil, false
	}
	return &o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *ConnectorTaskBase) HasProvider() bool {
	if o != nil && isNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given interface{} and assigns it to the Provider field.
func (o *ConnectorTaskBase) SetProvider(v interface{}) {
	o.Provider = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorTaskBase) GetCreatedAt() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorTaskBase) GetCreatedAtOk() (*interface{}, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return &o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ConnectorTaskBase) HasCreatedAt() bool {
	if o != nil && isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given interface{} and assigns it to the CreatedAt field.
func (o *ConnectorTaskBase) SetCreatedAt(v interface{}) {
	o.CreatedAt = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorTaskBase) GetStatus() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorTaskBase) GetStatusOk() (*interface{}, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return &o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectorTaskBase) HasStatus() bool {
	if o != nil && isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given interface{} and assigns it to the Status field.
func (o *ConnectorTaskBase) SetStatus(v interface{}) {
	o.Status = v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorTaskBase) GetError() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorTaskBase) GetErrorOk() (*interface{}, bool) {
	if o == nil || isNil(o.Error) {
		return nil, false
	}
	return &o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ConnectorTaskBase) HasError() bool {
	if o != nil && isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given interface{} and assigns it to the Error field.
func (o *ConnectorTaskBase) SetError(v interface{}) {
	o.Error = v
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorTaskBase) GetState() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorTaskBase) GetStateOk() (*interface{}, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return &o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ConnectorTaskBase) HasState() bool {
	if o != nil && isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given interface{} and assigns it to the State field.
func (o *ConnectorTaskBase) SetState(v interface{}) {
	o.State = v
}

func (o ConnectorTaskBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Provider != nil {
		toSerialize["provider"] = o.Provider
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorTaskBase struct {
	value *ConnectorTaskBase
	isSet bool
}

func (v NullableConnectorTaskBase) Get() *ConnectorTaskBase {
	return v.value
}

func (v *NullableConnectorTaskBase) Set(val *ConnectorTaskBase) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorTaskBase) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorTaskBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorTaskBase(val *ConnectorTaskBase) *NullableConnectorTaskBase {
	return &NullableConnectorTaskBase{value: val, isSet: true}
}

func (v NullableConnectorTaskBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorTaskBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
