openapi: 3.0.3
info:
  contact: {}
  title: Auth API
  version: AUTH_VERSION
servers:
- url: /
paths:
  /_info:
    get:
      operationId: getServerInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
          description: Server information
      summary: Get server info
  /clients:
    get:
      operationId: listClients
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClientsResponse'
          description: List of clients
      summary: List clients
      tags:
      - Clients
    post:
      operationId: createClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateClientResponse'
          description: Client created
      summary: Create client
      tags:
      - Clients
  /clients/{clientId}:
    delete:
      operationId: deleteClient
      parameters:
      - description: Client ID
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Client deleted
      summary: Delete client
      tags:
      - Clients
    get:
      operationId: readClient
      parameters:
      - description: Client ID
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadClientResponse'
          description: Retrieved client
      summary: Read client
      tags:
      - Clients
    put:
      operationId: updateClient
      parameters:
      - description: Client ID
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateClientResponse'
          description: Updated client
      summary: Update client
      tags:
      - Clients
  /clients/{clientId}/secrets:
    post:
      operationId: createSecret
      parameters:
      - description: Client ID
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecretRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSecretResponse'
          description: Created secret
      summary: Add a secret to a client
      tags:
      - Clients
  /clients/{clientId}/secrets/{secretId}:
    delete:
      operationId: deleteSecret
      parameters:
      - description: Client ID
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - description: Secret ID
        explode: false
        in: path
        name: secretId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Secret deleted
      summary: Delete a secret from a client
      tags:
      - Clients
  /clients/{clientId}/scopes/{scopeId}:
    delete:
      operationId: deleteScopeFromClient
      parameters:
      - description: Client ID
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - description: Scope ID
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Scope deleted from client
      summary: Delete scope from client
      tags:
      - Clients
    put:
      operationId: addScopeToClient
      parameters:
      - description: Client ID
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - description: Scope ID
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Scope added to client
      summary: Add scope to client
      tags:
      - Clients
  /scopes:
    get:
      description: List Scopes
      operationId: listScopes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListScopesResponse'
          description: List of scopes
      summary: List scopes
      tags:
      - Scopes
    post:
      description: Create scope
      operationId: createScope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScopeRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateScopeResponse'
          description: Created scope
      summary: Create scope
      tags:
      - Scopes
  /scopes/{scopeId}:
    delete:
      description: Delete scope
      operationId: deleteScope
      parameters:
      - description: Scope ID
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Scope deleted
      summary: Delete scope
      tags:
      - Scopes
    get:
      description: Read scope
      operationId: readScope
      parameters:
      - description: Scope ID
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadScopeResponse'
          description: Retrieved scope
      summary: Read scope
      tags:
      - Scopes
    put:
      description: Update scope
      operationId: updateScope
      parameters:
      - description: Scope ID
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScopeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateScopeResponse'
          description: Updated scope
      summary: Update scope
      tags:
      - Scopes
  /scopes/{scopeId}/transient/{transientScopeId}:
    delete:
      description: Delete a transient scope from a scope
      operationId: deleteTransientScope
      parameters:
      - description: Scope ID
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      - description: Transient scope ID
        explode: false
        in: path
        name: transientScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Transient scope deleted
      summary: Delete a transient scope from a scope
      tags:
      - Scopes
    put:
      description: Add a transient scope to a scope
      operationId: addTransientScope
      parameters:
      - description: Scope ID
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      - description: Transient scope ID
        explode: false
        in: path
        name: transientScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Scope added
      summary: Add a transient scope to a scope
      tags:
      - Scopes
  /users:
    get:
      description: List users
      operationId: listUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
          description: List of users
      summary: List users
      tags:
      - Users
  /users/{userId}:
    get:
      description: Read user
      operationId: readUser
      parameters:
      - description: User ID
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserResponse'
          description: Retrieved user
      summary: Read user
      tags:
      - Users
components:
  schemas:
    Metadata:
      additionalProperties: {}
      type: object
    ClientOptions:
      example:
        metadata:
          key: ""
        public: true
        trusted: true
        postLogoutRedirectUris:
        - postLogoutRedirectUris
        - postLogoutRedirectUris
        name: name
        description: description
        redirectUris:
        - redirectUris
        - redirectUris
      properties:
        public:
          type: boolean
        redirectUris:
          items:
            type: string
          type: array
        description:
          type: string
        name:
          type: string
        trusted:
          type: boolean
        postLogoutRedirectUris:
          items:
            type: string
          type: array
        metadata:
          additionalProperties: {}
          type: object
      required:
      - name
      type: object
    ClientSecret:
      properties:
        lastDigits:
          type: string
        name:
          type: string
        id:
          type: string
        metadata:
          additionalProperties: {}
          type: object
      required:
      - id
      - lastDigits
      - name
      type: object
    Client:
      allOf:
      - $ref: '#/components/schemas/ClientOptions'
      - $ref: '#/components/schemas/Client_allOf'
    ScopeOptions:
      example:
        metadata:
          key: ""
        label: label
      properties:
        label:
          type: string
        metadata:
          additionalProperties: {}
          type: object
      required:
      - label
      type: object
    Scope:
      allOf:
      - $ref: '#/components/schemas/ScopeOptions'
      - $ref: '#/components/schemas/Scope_allOf'
    SecretOptions:
      example:
        metadata:
          key: ""
        name: name
      properties:
        name:
          type: string
        metadata:
          additionalProperties: {}
          type: object
      required:
      - name
      type: object
    Secret:
      allOf:
      - $ref: '#/components/schemas/SecretOptions'
      - $ref: '#/components/schemas/Secret_allOf'
    User:
      example:
        subject: Jane Doe
        id: 3bb03708-312f-48a0-821a-e765837dc2c4
        email: user1@orga1.com
      properties:
        id:
          example: 3bb03708-312f-48a0-821a-e765837dc2c4
          type: string
        subject:
          example: Jane Doe
          type: string
        email:
          example: user1@orga1.com
          type: string
      type: object
    CreateClientRequest:
      $ref: '#/components/schemas/ClientOptions'
    CreateClientResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/Client'
      type: object
    ListClientsResponse:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/Client'
          type: array
      type: object
    UpdateClientRequest:
      $ref: '#/components/schemas/ClientOptions'
    UpdateClientResponse:
      $ref: '#/components/schemas/CreateClientResponse'
    ReadClientResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/Client'
      type: object
    ListScopesResponse:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/Scope'
          type: array
      type: object
    CreateScopeRequest:
      $ref: '#/components/schemas/ScopeOptions'
    CreateScopeResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/Scope'
      type: object
    ReadScopeResponse:
      $ref: '#/components/schemas/CreateScopeResponse'
    UpdateScopeRequest:
      $ref: '#/components/schemas/ScopeOptions'
    UpdateScopeResponse:
      $ref: '#/components/schemas/CreateScopeResponse'
    CreateSecretRequest:
      $ref: '#/components/schemas/SecretOptions'
    CreateSecretResponse:
      example:
        data: null
      properties:
        data:
          $ref: '#/components/schemas/Secret'
      type: object
    ReadUserResponse:
      example:
        data:
          subject: Jane Doe
          id: 3bb03708-312f-48a0-821a-e765837dc2c4
          email: user1@orga1.com
      properties:
        data:
          $ref: '#/components/schemas/User'
      type: object
    ListUsersResponse:
      example:
        data:
        - subject: Jane Doe
          id: 3bb03708-312f-48a0-821a-e765837dc2c4
          email: user1@orga1.com
        - subject: Jane Doe
          id: 3bb03708-312f-48a0-821a-e765837dc2c4
          email: user1@orga1.com
      properties:
        data:
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    ServerInfo:
      example:
        version: version
      properties:
        version:
          type: string
      required:
      - version
      type: object
    Client_allOf:
      properties:
        id:
          type: string
        scopes:
          items:
            type: string
          type: array
        secrets:
          items:
            $ref: '#/components/schemas/ClientSecret'
          type: array
      required:
      - id
      type: object
      example: null
    Scope_allOf:
      properties:
        id:
          type: string
        transient:
          items:
            type: string
          type: array
      required:
      - id
      type: object
      example: null
    Secret_allOf:
      properties:
        id:
          type: string
        lastDigits:
          type: string
        clear:
          type: string
      required:
      - clear
      - id
      - lastDigits
      type: object
      example: null
