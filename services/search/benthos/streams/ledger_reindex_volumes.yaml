input:
  http_server:
    path: /

pipeline:
  processors:
  - bloblang: |
      meta ledger = this.ledger
      meta batchSize = 100
  - postgres_query:
      service: ledger
      query: 'select count(*) as volumes_count from "${! meta("ledger") }".volumes'
  - unarchive:
      format: json_array
  - bloblang: |
      meta loopCount = (this.volumes_count.number() / meta("batchSize").number()).ceil()
      meta loopIndex = 0
  - while:
      check: 'meta("loopIndex") < meta("loopCount")'
      processors:
      - postgres_query:
          service: ledger
          query: |
            select account, asset, input, output
            from "${! meta("ledger") }".volumes
            offset ${! meta("loopIndex").number() * meta("batchSize").number() }
            limit ${! meta("batchSize") }
      - bloblang:
          meta loopIndex = meta("loopIndex").number() + 1
      - unarchive:
          format: json_array
      - bloblang: |
          meta action = "upsert"
          meta id = "ASSET-%s-%s-%s".format(meta("ledger"), this.account, this.asset)
          root = {
            "data": {
              "name": this.asset,
              "input": this.input,
              "output": this.output,
              "account": this.account,
              "ledger": meta("ledger")
            },
            "indexed": {
              "account": this.account,
              "name": this.asset,
              "ledger": meta("ledger")
            },
            "kind": "ASSET",
            "ledger": meta("ledger")
          }

output:
  resource: elasticsearch
