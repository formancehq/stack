input:
  event_bus:
    topic: ledger
    consumer_group: search

pipeline:
  processors:
  - switch_event_type:
      events:
      - label: COMMITTED_TRANSACTIONS
        version: v2
        processors:
        - bloblang: |
            map amount {
              root = [this.amount]
              let hasDecimals = this.asset.split("/").length() > 1
              let decimals = if $hasDecimals { this.asset.split("/").index(1).number() } else { 0 }
              root = if $decimals > 0 {
                root.append(
                  this.amount / range(0, $decimals).fold(1, t -> t.tally * 10) # Just a pow...
                )
              }
              root = root.flatten()
            }
                
            map tx {
              root = {
                "action": "index",
                "id": "TRANSACTION-%s-%s".format(this.ledger, this.transaction.id),
                "document": {
                  "data": {
                    "postings": this.transaction.postings,
                    "reference": this.transaction.reference,
                    "txid": this.transaction.id,
                    "timestamp": this.transaction.timestamp,
                    "metadata": if this.transaction.metadata { this.transaction.metadata } else {{}}
                  },
                  "indexed": {
                    "reference": this.transaction.reference,
                    "txid": this.transaction.id,
                    "timestamp": this.transaction.timestamp,
                    "asset": this.transaction.postings.map_each(p -> p.asset),
                    "source": this.transaction.postings.map_each(p -> p.source),
                    "destination": this.transaction.postings.map_each(p -> p.destination),
                    "amount": this.transaction.postings.map_each(p -> p.apply("amount"))
                  },
                  "kind": "TRANSACTION",
                  "when": this.date
                }
              }
            }
                      
            map account {
              root = {
                "action": "upsert",
                "id": "ACCOUNT-%s-%s".format(this.ledger, this.account),
                "document": {
                  "data": { 
                    "address": this.account,
                    "metadata": {}
                  },
                  "indexed": { 
                    "address": this.account
                  },
                  "kind": "ACCOUNT",
                  "when": this.date
                }
              }
            }
                  
            root = []
            root = root.append(
              this.payload.transactions.map_each(transaction -> {
                "transaction": transaction,
                "ledger": this.payload.ledger
              }.apply("tx"))
            )
            root = root.append(
              this.payload.transactions.
                map_each(transaction -> transaction.postings.map_each(posting -> [
                  posting.source,
                  posting.destination
                ]).
                flatten().
                map_each(account -> {
                  "account": account,
                  "ledger": this.payload.ledger
                }.apply("account"))
              ).
              flatten()
            )
            root = root.append(
              this.payload.accountMetadata.map_each(item -> item.value.map_each(metadata -> {
                "script": "ctx._source.data.metadata[params.key]=params.value",
                "params": {
                  "key": metadata.key,
                  "value": metadata.value
                },
                "action": "update",
                "id": "ACCOUNT-%s-%s".format(this.payload.ledger, item.key),
                "upsert": {
                  "data": { 
                    "address": item.key,
                    "metadata": { metadata.key: metadata.value }
                  },
                  "indexed": { 
                    "address": item.key
                  },
                  "kind": "ACCOUNT",
                  "when": this.date
                }
              }).values()).values().flatten()
            )
            root = root.flatten()
              
            let overlay = {
              "data": {
                "ledger": this.payload.ledger
              },
              "indexed": {
                "ledger": this.payload.ledger  
              }
            }
              
            root = root.map_each(cmd -> match cmd.action {
              cmd.action == "update" => if cmd.exists("upsert") { cmd.merge({
                "upsert": $overlay
              }) } else { cmd },
              _ => cmd.merge({
                "document": $overlay
              }) 
            })
        - log:
            message: "Computed: ${! this }"
        - unarchive:
            format: json_array
      - label: SAVED_METADATA
        version: v2
        processors:
        - bloblang: |
            root = this.payload.metadata.map_each(item -> {
              "script": "if (ctx._source.data.metadata == null) { ctx._source.data.metadata = [params.key: params.value] }  ctx._source.data.metadata[params.key]=params.value",
              "params": {
                "key": item.key,
                "value": item.value
              },
              "action": "update",
              "id": "%s-%s-%s".format(this.payload.targetType, this.payload.ledger, this.payload.targetId),
              "upsert": {
                "data": { 
                  "address": this.payload.targetId,
                  "metadata": { item.key: item.value },
                  "ledger": this.payload.ledger
                },
                "indexed": { 
                  "address": this.payload.targetId,
                  "ledger": this.payload.ledger
                },
                "kind": "ACCOUNT",
                "when": this.date
              }
            }).values()
        - unarchive:
            format: json_array
      - label: DELETED_METADATA
        version: v2
        processors:
        - bloblang: |
            root = {
              "script": "ctx._source.data.metadata.remove(params.key)",
              "params": {
                "key": this.payload.key
              },
              "action": "update",
              "id": "%s-%s-%s".format(this.payload.targetType, this.payload.ledger, this.payload.targetId)
            }
      - label: COMMITTED_TRANSACTIONS
        version: v1
        processors:
        - bloblang: |
            map account {
              root = this.map_each(v -> v.value.map_each(v2 -> {
                "action": "upsert",
                "id": v.key,
                "document": {
                  "data": {
                    "address": v.key
                  },
                  "indexed": {
                    "address": v.key
                  },
                  "kind": "ACCOUNT"
                }
              }).values()).values().flatten()
            }

            map tx {
              root = {
                "action": "index",
                "id": "%s".format(this.txid),
                "document": {
                  "data": {
                    "postings": this.postings,
                    "reference": this.reference,
                    "txid": this.txid,
                    "timestamp": this.timestamp,
                    "metadata": if this.metadata { this.metadata } else {{}}
                  },
                  "indexed": {
                    "reference": this.reference,
                    "txid": this.txid,
                    "timestamp": this.timestamp,
                    "asset": this.postings.map_each(p -> p.asset),
                    "source": this.postings.map_each(p -> p.source),
                    "destination": this.postings.map_each(p -> p.destination),
                    "amount": this.postings.map_each(p -> if p.asset.contains("/") {
                      [
                        p.amount,
                        p.amount / if p.asset.split("/").index(1).number(){ range(0, p.asset.split("/").index(1).number()).fold(1, t -> t.tally * 10) } else { 1 } # amount / pow(10, decimal part of asset)
                      ]
                    } else { [ p.amount ] }).flatten().map_each(v -> "%v".format(v))
                  },
                  "kind": "TRANSACTION"
                }
              }
            }

            map committedTransactions {
                root = [
                    this.payload.transactions.map_each(t -> t.apply("tx")).map_each(t -> t.assign({
                        "id": "TRANSACTION-%s-%s".format(this.payload.ledger, t.id)
                    })),
                    this.payload.transactions.map_each(t -> t.postings.map_each(p -> [{
                        "action": "upsert",
                        "id": "ACCOUNT-%s-%s".format(this.payload.ledger, p.source),
                        "document": {
                            "data": {
                                "address": p.source,
                                "metadata": {}
                            },
                            "indexed": {
                                "address": p.source
                            },
                            "kind": "ACCOUNT"
                        }
                    }, {
                        "action": "upsert",
                        "id": "ACCOUNT-%s-%s".format(this.payload.ledger, p.destination),
                        "document": {
                            "data": {
                                "address": p.destination,
                                "metadata": {}
                            },
                            "indexed": {
                                "address": p.destination
                            },
                            "kind": "ACCOUNT"
                        }
                    }])).flatten().flatten()
                ].flatten().map_each(t -> t.merge({
                   "document": {
                       "when": this.date,
                       "ledger": this.payload.ledger,
                       "data": {
                           "ledger": this.payload.ledger
                       },
                       "indexed": {
                           "ledger": this.payload.ledger
                       }
                   },
               }))
            }

            root = this.apply("committedTransactions")
        - unarchive:
            format: json_array
      - label: SAVED_METADATA
        version: v1
        processors:
        - bloblang: |
            root = this.payload.metadata.map_each(item -> {
              "script": "if (ctx._source.data.metadata == null) { ctx._source.data.metadata = [params.key: params.value] }  ctx._source.data.metadata[params.key]=params.value",
              "params": {
                "key": item.key,
                "value": item.value.string()
              },
              "action": "update",
              "id": "%s-%s-%s".format(this.payload.targetType, this.payload.ledger, this.payload.targetId),
              "upsert": {
                "data": {
                  "address": this.payload.targetId,
                  "metadata": { item.key: item.value.string() },
                  "ledger": this.payload.ledger
                },
                "indexed": { 
                  "address": this.payload.targetId,
                  "ledger": this.payload.ledger
                },
                "kind": "ACCOUNT",
                "when": this.date
              }
            }).values()
        - unarchive:
            format: json_array

output:
  resource: elasticsearch
