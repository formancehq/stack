output_resources:
  - label: elasticsearch
    processors:
      - mapping: |
          root = match {
            this.action == "update" => if this.exists("upsert") { this.merge({
              "upsert": {
                "stack": env("STACK")
              }
            }) } else { this },
            _ => this.merge({
              "document": {
                "stack": env("STACK")
              }
            })
          }
          root.id = "%s-%s".format(env("STACK"), this.id)
      - log:
          message: "Will write: ${! this }"
    elasticsearch:
      urls:
        - ${OPENSEARCH_URL}
      id: ${! json().id }
      sniff: false
      healthcheck: false
      index: ${OPENSEARCH_INDEX}
      action: ${! json().action }
      tls:
        enabled: true
        skip_cert_verify: true
      basic_auth:
        enabled: ${BASIC_AUTH_ENABLED}
        username: ${BASIC_AUTH_USERNAME}
        password: ${BASIC_AUTH_PASSWORD}
      batching:
        count: ${OPENSEARCH_BATCHING_COUNT:10}
        period: ${OPENSEARCH_BATCHING_PERIOD:1s}
      multipart: true
      doc: ${! if json().exists("document") { json("document") } else {""} }
      script: ${! if json().exists("script") { json("script") } else {""} }
      upsert: ${! if json().exists("upsert") { json("upsert") } else {""} }
      params: ${! if json().exists("params") { json("params") } else {""} }
      aws:
        enabled: env("AWS_IAM_ENABLED")
        region: env("AWS_REGION")
        endpoint: env("AWS_ENDPOINT")
        credentials:
          id: env("AWS_ACCESS_KEY_ID")
          secret: env("AWS_SECRET_ACCESS_KEY")
          token: env("AWS_SESSION_TOKEN")
          role: env("AWS_ROLE_ARN")
          profile: env("AWS_PROFILE")
