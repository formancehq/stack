name: Default - PR
on:
  pull_request:
    types: [ assigned, opened, synchronize, reopened ]

jobs:
  PR:
    name: Check PR Title
    runs-on: ubuntu-latest
    steps:
      - uses: aslafy-z/conventional-pr-title-action@v3.0.0
        with:
          success-state: Title follows the specification.
          failure-state: Title does not follow the specification.
          context-name: conventional-pr-title
          preset: conventional-changelog-angular@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  FindChanges:
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.result.outputs.folders }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files in the docs folder
        id: changed-files-specific
        uses: tj-actions/changed-files@v35
        with:
          dir_names: "true"
          json: "true"
          dir_names_max_depth: "2"
          files: |
            components/**
      - run: echo "folders=$(echo ${{ steps.changed-files-specific.outputs.all_modified_files }} | sed 's/components\///g')" >> $GITHUB_OUTPUT
        id: result
      - name: Run step if any file(s) in the docs folder change
        run: |
          echo "One or more files in the docs folder has changed."
          echo "List all the files that have changed: ${{ steps.result.outputs.folders }}"

  Find:
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.find.outputs.folders }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: echo "folders=$(node .github/actions/find-directory/index.js)" >> $GITHUB_OUTPUT
        id: find

  Lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.FindChanges.outputs.folders )}}
    needs:
      - FindChanges
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-go@v3
        with:
          go-version-file: ./components/${{ matrix.folder }}/go.mod
          cache-dependency-path: ./components/${{ matrix.folder }}/go.sum
          cache: true
      - run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.51.2
      - run: task ${{ matrix.folder }}:lint

  Tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.FindChanges.outputs.folders )}}
    needs:
      - FindChanges
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-go@v3
        with:
          go-version-file: ./components/${{ matrix.folder }}/go.mod
          cache-dependency-path: ./components/${{ matrix.folder }}/go.sum
          cache: true
      - run: task ${{ matrix.folder }}:tests
      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./components/${{ matrix.folder }}
          fail_ci_if_error: false # optional (default = false)
          verbose: true # optional (default = false)
          flags: ${{ matrix.folder }}

  TestsIntegration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-go@v3
        with:
          go-version-file: ./tests/integration/go.mod
          cache-dependency-path: ./tests/integration/go.sum
          cache: true
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      # TOneverDO: Try to use a fixed Ginkgo version, Ginkgo infer it from the go.mod project (see https://onsi.github.io/ginkgo/#installing-ginkgo)
      - run: |
          go install github.com/onsi/ginkgo/v2/ginkgo &&
          sudo ln -s $(go env GOPATH)/bin/ginkgo /usr/bin/ginkgo
        working-directory: tests/integration
      - run: task integration:tests
        env:
          STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY_FOR_TEST }}
          # TODO: Discover dynamically
          DOCKER_HOSTNAME: 172.17.0.1

  GoReleaser:
    name: GoReleaser
    runs-on:
      group: enterprise/runners
      labels: formance-ubuntu-latest-8-cores
    needs:
      - Find
    strategy:
      matrix:
        folder: ${{ fromJson(needs.Find.outputs.folders )}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-go@v3
        with:
          go-version-file: ./components/${{ matrix.folder }}/go.mod
          cache-dependency-path: ./components/${{ matrix.folder }}/go.sum
          cache: true
      - run: go mod vendor
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: "NumaryBot"
          password: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser-pro
          version: latest
          args: release --clean --nightly -f components/${{ matrix.folder }}/.goreleaser.yml
        env:
          GITHUB_TOKEN: ${{ secrets.NUMARY_GITHUB_TOKEN }}
          FURY_TOKEN: ${{ secrets.FURY_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          SEGMENT_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_KEY_OSS }}
