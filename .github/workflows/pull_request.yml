name: Default - PR
on:
  pull_request:
    types: [ assigned, opened, synchronize, reopened ]

jobs:
  PR:
    name: Check PR Title
    runs-on: ubuntu-latest
    steps:
      - uses: aslafy-z/conventional-pr-title-action@v3.0.0
        with:
          success-state: Title follows the specification.
          failure-state: Title does not follow the specification.
          context-name: conventional-pr-title
          preset: conventional-changelog-angular@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Find:
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.changed-files-specific.outputs.all_modified_files }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files in the docs folder
        id: changed-files-specific
        uses: tj-actions/changed-files@v35
        with:
          dir_names: "true"
          json: "true"
          dir_names_max_depth: "2"
          files: |
            services/**
      - name: Run step if any file(s) in the docs folder change
        run: |
          echo "One or more files in the docs folder has changed."
          echo "List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_modified_files }}"

  Lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.Find.outputs.folders )}}
    needs:
      - Find
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-go@v3
        with:
          go-version-file: './go.work'
      - run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.50.1
      - run: task ${{ matrix.folder }}:lint

  Tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.Find.outputs.folders )}}
    needs:
      - Find
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-go@v3
        with:
          go-version-file: './go.work'
      - run: task ${{ matrix.folder }}:tests

  Docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.Find.outputs.folders )}}
    needs:
      - Find
      - Lint
      - Tests
    steps:
      - uses: actions/checkout@v3
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: "NumaryBot"
          password: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: ./services/${{ matrix.folder }}/build.Dockerfile
          context: .
          platforms: linux/amd64
          push: true
          tags: ghcr.io/formancehq/${{ matrix.folder }}:${{ github.sha }}
          build-args: |
            APP_SHA=${{ github.sha }}
            VERSION=develop

#  GoReleaserBuild:
#    name: GoReleaser Build
##    strategy:
##      matrix:
##        folder: ${{ fromJson(needs.Find.outputs.folders )}}
##    needs:
##      - Find
##      - Lint
##      - Tests
#    runs-on: ubuntu-latest
#    env:
#      DOCKER_CLI_EXPERIMENTAL: "enabled"
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#      - uses: actions/setup-go@v3
#        with:
#          go-version-file: './go.work'
##          cache: true
#      - name: Run GoReleaser
#        uses: goreleaser/goreleaser-action@v2
#        with:
#          version: latest
#          args: release --snapshot --rm-dist
##          workdir: ${{ matrix.folder }}
#          workdir: ./services/auth
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
