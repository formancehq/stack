/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
	"time"
)

// TaskStripe struct for TaskStripe
type TaskStripe struct {
	Id *string `json:"id,omitempty"`
	ConnectorID *string `json:"connectorID,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Descriptor *TaskStripeDescriptor `json:"descriptor,omitempty"`
	Status *PaymentStatus `json:"status,omitempty"`
	State map[string]interface{} `json:"state,omitempty"`
	Error *string `json:"error,omitempty"`
}

// NewTaskStripe instantiates a new TaskStripe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskStripe() *TaskStripe {
	this := TaskStripe{}
	return &this
}

// NewTaskStripeWithDefaults instantiates a new TaskStripe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskStripeWithDefaults() *TaskStripe {
	this := TaskStripe{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaskStripe) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStripe) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaskStripe) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaskStripe) SetId(v string) {
	o.Id = &v
}

// GetConnectorID returns the ConnectorID field value if set, zero value otherwise.
func (o *TaskStripe) GetConnectorID() string {
	if o == nil || isNil(o.ConnectorID) {
		var ret string
		return ret
	}
	return *o.ConnectorID
}

// GetConnectorIDOk returns a tuple with the ConnectorID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStripe) GetConnectorIDOk() (*string, bool) {
	if o == nil || isNil(o.ConnectorID) {
    return nil, false
	}
	return o.ConnectorID, true
}

// HasConnectorID returns a boolean if a field has been set.
func (o *TaskStripe) HasConnectorID() bool {
	if o != nil && !isNil(o.ConnectorID) {
		return true
	}

	return false
}

// SetConnectorID gets a reference to the given string and assigns it to the ConnectorID field.
func (o *TaskStripe) SetConnectorID(v string) {
	o.ConnectorID = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TaskStripe) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStripe) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TaskStripe) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TaskStripe) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TaskStripe) GetUpdatedAt() time.Time {
	if o == nil || isNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStripe) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.UpdatedAt) {
    return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TaskStripe) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *TaskStripe) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *TaskStripe) GetDescriptor() TaskStripeDescriptor {
	if o == nil || isNil(o.Descriptor) {
		var ret TaskStripeDescriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStripe) GetDescriptorOk() (*TaskStripeDescriptor, bool) {
	if o == nil || isNil(o.Descriptor) {
    return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *TaskStripe) HasDescriptor() bool {
	if o != nil && !isNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given TaskStripeDescriptor and assigns it to the Descriptor field.
func (o *TaskStripe) SetDescriptor(v TaskStripeDescriptor) {
	o.Descriptor = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaskStripe) GetStatus() PaymentStatus {
	if o == nil || isNil(o.Status) {
		var ret PaymentStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStripe) GetStatusOk() (*PaymentStatus, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaskStripe) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PaymentStatus and assigns it to the Status field.
func (o *TaskStripe) SetStatus(v PaymentStatus) {
	o.Status = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TaskStripe) GetState() map[string]interface{} {
	if o == nil || isNil(o.State) {
		var ret map[string]interface{}
		return ret
	}
	return o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStripe) GetStateOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.State) {
    return map[string]interface{}{}, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TaskStripe) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given map[string]interface{} and assigns it to the State field.
func (o *TaskStripe) SetState(v map[string]interface{}) {
	o.State = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *TaskStripe) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStripe) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *TaskStripe) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *TaskStripe) SetError(v string) {
	o.Error = &v
}

func (o TaskStripe) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.ConnectorID) {
		toSerialize["connectorID"] = o.ConnectorID
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !isNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableTaskStripe struct {
	value *TaskStripe
	isSet bool
}

func (v NullableTaskStripe) Get() *TaskStripe {
	return v.value
}

func (v *NullableTaskStripe) Set(val *TaskStripe) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskStripe) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskStripe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskStripe(val *TaskStripe) *NullableTaskStripe {
	return &NullableTaskStripe{value: val, isSet: true}
}

func (v NullableTaskStripe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskStripe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


