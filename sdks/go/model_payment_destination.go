/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the PaymentDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentDestination{}

// PaymentDestination struct for PaymentDestination
type PaymentDestination struct {
	Psp string `json:"psp"`
}

// NewPaymentDestination instantiates a new PaymentDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentDestination(psp string) *PaymentDestination {
	this := PaymentDestination{}
	this.Psp = psp
	return &this
}

// NewPaymentDestinationWithDefaults instantiates a new PaymentDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentDestinationWithDefaults() *PaymentDestination {
	this := PaymentDestination{}
	return &this
}

// GetPsp returns the Psp field value
func (o *PaymentDestination) GetPsp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Psp
}

// GetPspOk returns a tuple with the Psp field value
// and a boolean to check if the value has been set.
func (o *PaymentDestination) GetPspOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Psp, true
}

// SetPsp sets field value
func (o *PaymentDestination) SetPsp(v string) {
	o.Psp = v
}

func (o PaymentDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["psp"] = o.Psp
	return toSerialize, nil
}

type NullablePaymentDestination struct {
	value *PaymentDestination
	isSet bool
}

func (v NullablePaymentDestination) Get() *PaymentDestination {
	return v.value
}

func (v *NullablePaymentDestination) Set(val *PaymentDestination) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentDestination) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentDestination(val *PaymentDestination) *NullablePaymentDestination {
	return &NullablePaymentDestination{value: val, isSet: true}
}

func (v NullablePaymentDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


