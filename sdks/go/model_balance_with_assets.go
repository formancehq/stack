/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the BalanceWithAssets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalanceWithAssets{}

// BalanceWithAssets struct for BalanceWithAssets
type BalanceWithAssets struct {
	Name string `json:"name"`
	Assets map[string]float32 `json:"assets"`
}

// NewBalanceWithAssets instantiates a new BalanceWithAssets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalanceWithAssets(name string, assets map[string]float32) *BalanceWithAssets {
	this := BalanceWithAssets{}
	this.Name = name
	this.Assets = assets
	return &this
}

// NewBalanceWithAssetsWithDefaults instantiates a new BalanceWithAssets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceWithAssetsWithDefaults() *BalanceWithAssets {
	this := BalanceWithAssets{}
	return &this
}

// GetName returns the Name field value
func (o *BalanceWithAssets) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BalanceWithAssets) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BalanceWithAssets) SetName(v string) {
	o.Name = v
}

// GetAssets returns the Assets field value
func (o *BalanceWithAssets) GetAssets() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *BalanceWithAssets) GetAssetsOk() (*map[string]float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assets, true
}

// SetAssets sets field value
func (o *BalanceWithAssets) SetAssets(v map[string]float32) {
	o.Assets = v
}

func (o BalanceWithAssets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalanceWithAssets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["assets"] = o.Assets
	return toSerialize, nil
}

type NullableBalanceWithAssets struct {
	value *BalanceWithAssets
	isSet bool
}

func (v NullableBalanceWithAssets) Get() *BalanceWithAssets {
	return v.value
}

func (v *NullableBalanceWithAssets) Set(val *BalanceWithAssets) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceWithAssets) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceWithAssets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceWithAssets(val *BalanceWithAssets) *NullableBalanceWithAssets {
	return &NullableBalanceWithAssets{value: val, isSet: true}
}

func (v NullableBalanceWithAssets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceWithAssets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


