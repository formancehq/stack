/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions />

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// WebhooksConfigUser struct for WebhooksConfigUser
type WebhooksConfigUser struct {
	Endpoint   string   `json:"endpoint"`
	Secret     *string  `json:"secret,omitempty"`
	EventTypes []string `json:"eventTypes"`
}

// NewWebhooksConfigUser instantiates a new WebhooksConfigUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhooksConfigUser(endpoint string, eventTypes []string) *WebhooksConfigUser {
	this := WebhooksConfigUser{}
	this.Endpoint = endpoint
	this.EventTypes = eventTypes
	return &this
}

// NewWebhooksConfigUserWithDefaults instantiates a new WebhooksConfigUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhooksConfigUserWithDefaults() *WebhooksConfigUser {
	this := WebhooksConfigUser{}
	return &this
}

// GetEndpoint returns the Endpoint field value
func (o *WebhooksConfigUser) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *WebhooksConfigUser) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *WebhooksConfigUser) SetEndpoint(v string) {
	o.Endpoint = v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *WebhooksConfigUser) GetSecret() string {
	if o == nil || isNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhooksConfigUser) GetSecretOk() (*string, bool) {
	if o == nil || isNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *WebhooksConfigUser) HasSecret() bool {
	if o != nil && !isNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *WebhooksConfigUser) SetSecret(v string) {
	o.Secret = &v
}

// GetEventTypes returns the EventTypes field value
func (o *WebhooksConfigUser) GetEventTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value
// and a boolean to check if the value has been set.
func (o *WebhooksConfigUser) GetEventTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// SetEventTypes sets field value
func (o *WebhooksConfigUser) SetEventTypes(v []string) {
	o.EventTypes = v
}

func (o WebhooksConfigUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !isNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if true {
		toSerialize["eventTypes"] = o.EventTypes
	}
	return json.Marshal(toSerialize)
}

type NullableWebhooksConfigUser struct {
	value *WebhooksConfigUser
	isSet bool
}

func (v NullableWebhooksConfigUser) Get() *WebhooksConfigUser {
	return v.value
}

func (v *NullableWebhooksConfigUser) Set(val *WebhooksConfigUser) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhooksConfigUser) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhooksConfigUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhooksConfigUser(val *WebhooksConfigUser) *NullableWebhooksConfigUser {
	return &NullableWebhooksConfigUser{value: val, isSet: true}
}

func (v NullableWebhooksConfigUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhooksConfigUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
