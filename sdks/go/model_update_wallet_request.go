/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the UpdateWalletRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWalletRequest{}

// UpdateWalletRequest struct for UpdateWalletRequest
type UpdateWalletRequest struct {
	// Custom metadata to attach to this wallet.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewUpdateWalletRequest instantiates a new UpdateWalletRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWalletRequest() *UpdateWalletRequest {
	this := UpdateWalletRequest{}
	return &this
}

// NewUpdateWalletRequestWithDefaults instantiates a new UpdateWalletRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWalletRequestWithDefaults() *UpdateWalletRequest {
	this := UpdateWalletRequest{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *UpdateWalletRequest) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWalletRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UpdateWalletRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *UpdateWalletRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o UpdateWalletRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWalletRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableUpdateWalletRequest struct {
	value *UpdateWalletRequest
	isSet bool
}

func (v NullableUpdateWalletRequest) Get() *UpdateWalletRequest {
	return v.value
}

func (v *NullableUpdateWalletRequest) Set(val *UpdateWalletRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWalletRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWalletRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWalletRequest(val *UpdateWalletRequest) *NullableUpdateWalletRequest {
	return &NullableUpdateWalletRequest{value: val, isSet: true}
}

func (v NullableUpdateWalletRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWalletRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


