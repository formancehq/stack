/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the StageWaitEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StageWaitEvent{}

// StageWaitEvent struct for StageWaitEvent
type StageWaitEvent struct {
	Event string `json:"event"`
}

// NewStageWaitEvent instantiates a new StageWaitEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStageWaitEvent(event string) *StageWaitEvent {
	this := StageWaitEvent{}
	this.Event = event
	return &this
}

// NewStageWaitEventWithDefaults instantiates a new StageWaitEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStageWaitEventWithDefaults() *StageWaitEvent {
	this := StageWaitEvent{}
	return &this
}

// GetEvent returns the Event field value
func (o *StageWaitEvent) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *StageWaitEvent) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *StageWaitEvent) SetEvent(v string) {
	o.Event = v
}

func (o StageWaitEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StageWaitEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	return toSerialize, nil
}

type NullableStageWaitEvent struct {
	value *StageWaitEvent
	isSet bool
}

func (v NullableStageWaitEvent) Get() *StageWaitEvent {
	return v.value
}

func (v *NullableStageWaitEvent) Set(val *StageWaitEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableStageWaitEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableStageWaitEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStageWaitEvent(val *StageWaitEvent) *NullableStageWaitEvent {
	return &NullableStageWaitEvent{value: val, isSet: true}
}

func (v NullableStageWaitEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStageWaitEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


