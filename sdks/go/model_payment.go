/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
	"time"
)

// checks if the Payment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Payment{}

// Payment struct for Payment
type Payment struct {
	Id string `json:"id"`
	Reference string `json:"reference"`
	AccountID string `json:"accountID"`
	Type string `json:"type"`
	Provider Connector `json:"provider"`
	Status PaymentStatus `json:"status"`
	InitialAmount int64 `json:"initialAmount"`
	Scheme string `json:"scheme"`
	Asset string `json:"asset"`
	CreatedAt time.Time `json:"createdAt"`
	Raw map[string]interface{} `json:"raw"`
	Adjustments []PaymentAdjustment `json:"adjustments"`
	Metadata PaymentMetadata `json:"metadata"`
}

// NewPayment instantiates a new Payment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayment(id string, reference string, accountID string, type_ string, provider Connector, status PaymentStatus, initialAmount int64, scheme string, asset string, createdAt time.Time, raw map[string]interface{}, adjustments []PaymentAdjustment, metadata PaymentMetadata) *Payment {
	this := Payment{}
	this.Id = id
	this.Reference = reference
	this.AccountID = accountID
	this.Type = type_
	this.Provider = provider
	this.Status = status
	this.InitialAmount = initialAmount
	this.Scheme = scheme
	this.Asset = asset
	this.CreatedAt = createdAt
	this.Raw = raw
	this.Adjustments = adjustments
	this.Metadata = metadata
	return &this
}

// NewPaymentWithDefaults instantiates a new Payment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentWithDefaults() *Payment {
	this := Payment{}
	return &this
}

// GetId returns the Id field value
func (o *Payment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Payment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Payment) SetId(v string) {
	o.Id = v
}

// GetReference returns the Reference field value
func (o *Payment) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *Payment) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *Payment) SetReference(v string) {
	o.Reference = v
}

// GetAccountID returns the AccountID field value
func (o *Payment) GetAccountID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountID
}

// GetAccountIDOk returns a tuple with the AccountID field value
// and a boolean to check if the value has been set.
func (o *Payment) GetAccountIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountID, true
}

// SetAccountID sets field value
func (o *Payment) SetAccountID(v string) {
	o.AccountID = v
}

// GetType returns the Type field value
func (o *Payment) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Payment) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Payment) SetType(v string) {
	o.Type = v
}

// GetProvider returns the Provider field value
func (o *Payment) GetProvider() Connector {
	if o == nil {
		var ret Connector
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *Payment) GetProviderOk() (*Connector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *Payment) SetProvider(v Connector) {
	o.Provider = v
}

// GetStatus returns the Status field value
func (o *Payment) GetStatus() PaymentStatus {
	if o == nil {
		var ret PaymentStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Payment) GetStatusOk() (*PaymentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Payment) SetStatus(v PaymentStatus) {
	o.Status = v
}

// GetInitialAmount returns the InitialAmount field value
func (o *Payment) GetInitialAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.InitialAmount
}

// GetInitialAmountOk returns a tuple with the InitialAmount field value
// and a boolean to check if the value has been set.
func (o *Payment) GetInitialAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitialAmount, true
}

// SetInitialAmount sets field value
func (o *Payment) SetInitialAmount(v int64) {
	o.InitialAmount = v
}

// GetScheme returns the Scheme field value
func (o *Payment) GetScheme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value
// and a boolean to check if the value has been set.
func (o *Payment) GetSchemeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scheme, true
}

// SetScheme sets field value
func (o *Payment) SetScheme(v string) {
	o.Scheme = v
}

// GetAsset returns the Asset field value
func (o *Payment) GetAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *Payment) GetAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *Payment) SetAsset(v string) {
	o.Asset = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Payment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Payment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Payment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetRaw returns the Raw field value
func (o *Payment) GetRaw() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value
// and a boolean to check if the value has been set.
func (o *Payment) GetRawOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Raw, true
}

// SetRaw sets field value
func (o *Payment) SetRaw(v map[string]interface{}) {
	o.Raw = v
}

// GetAdjustments returns the Adjustments field value
func (o *Payment) GetAdjustments() []PaymentAdjustment {
	if o == nil {
		var ret []PaymentAdjustment
		return ret
	}

	return o.Adjustments
}

// GetAdjustmentsOk returns a tuple with the Adjustments field value
// and a boolean to check if the value has been set.
func (o *Payment) GetAdjustmentsOk() ([]PaymentAdjustment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Adjustments, true
}

// SetAdjustments sets field value
func (o *Payment) SetAdjustments(v []PaymentAdjustment) {
	o.Adjustments = v
}

// GetMetadata returns the Metadata field value
func (o *Payment) GetMetadata() PaymentMetadata {
	if o == nil {
		var ret PaymentMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Payment) GetMetadataOk() (*PaymentMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Payment) SetMetadata(v PaymentMetadata) {
	o.Metadata = v
}

func (o Payment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Payment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["reference"] = o.Reference
	toSerialize["accountID"] = o.AccountID
	toSerialize["type"] = o.Type
	toSerialize["provider"] = o.Provider
	toSerialize["status"] = o.Status
	toSerialize["initialAmount"] = o.InitialAmount
	toSerialize["scheme"] = o.Scheme
	toSerialize["asset"] = o.Asset
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["raw"] = o.Raw
	toSerialize["adjustments"] = o.Adjustments
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

type NullablePayment struct {
	value *Payment
	isSet bool
}

func (v NullablePayment) Get() *Payment {
	return v.value
}

func (v *NullablePayment) Set(val *Payment) {
	v.value = val
	v.isSet = true
}

func (v NullablePayment) IsSet() bool {
	return v.isSet
}

func (v *NullablePayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayment(val *Payment) *NullablePayment {
	return &NullablePayment{value: val, isSet: true}
}

func (v NullablePayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


