/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// WorkflowConfig struct for WorkflowConfig
type WorkflowConfig struct {
	Stages []map[string]interface{} `json:"stages"`
}

// NewWorkflowConfig instantiates a new WorkflowConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowConfig(stages []map[string]interface{}) *WorkflowConfig {
	this := WorkflowConfig{}
	this.Stages = stages
	return &this
}

// NewWorkflowConfigWithDefaults instantiates a new WorkflowConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowConfigWithDefaults() *WorkflowConfig {
	this := WorkflowConfig{}
	return &this
}

// GetStages returns the Stages field value
func (o *WorkflowConfig) GetStages() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Stages
}

// GetStagesOk returns a tuple with the Stages field value
// and a boolean to check if the value has been set.
func (o *WorkflowConfig) GetStagesOk() ([]map[string]interface{}, bool) {
	if o == nil {
    return nil, false
	}
	return o.Stages, true
}

// SetStages sets field value
func (o *WorkflowConfig) SetStages(v []map[string]interface{}) {
	o.Stages = v
}

func (o WorkflowConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["stages"] = o.Stages
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowConfig struct {
	value *WorkflowConfig
	isSet bool
}

func (v NullableWorkflowConfig) Get() *WorkflowConfig {
	return v.value
}

func (v *NullableWorkflowConfig) Set(val *WorkflowConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowConfig(val *WorkflowConfig) *NullableWorkflowConfig {
	return &NullableWorkflowConfig{value: val, isSet: true}
}

func (v NullableWorkflowConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


