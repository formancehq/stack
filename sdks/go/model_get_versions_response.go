/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the GetVersionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetVersionsResponse{}

// GetVersionsResponse struct for GetVersionsResponse
type GetVersionsResponse struct {
	Region string `json:"region"`
	Env string `json:"env"`
	Versions []Version `json:"versions"`
}

// NewGetVersionsResponse instantiates a new GetVersionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetVersionsResponse(region string, env string, versions []Version) *GetVersionsResponse {
	this := GetVersionsResponse{}
	this.Region = region
	this.Env = env
	this.Versions = versions
	return &this
}

// NewGetVersionsResponseWithDefaults instantiates a new GetVersionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetVersionsResponseWithDefaults() *GetVersionsResponse {
	this := GetVersionsResponse{}
	return &this
}

// GetRegion returns the Region field value
func (o *GetVersionsResponse) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *GetVersionsResponse) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *GetVersionsResponse) SetRegion(v string) {
	o.Region = v
}

// GetEnv returns the Env field value
func (o *GetVersionsResponse) GetEnv() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Env
}

// GetEnvOk returns a tuple with the Env field value
// and a boolean to check if the value has been set.
func (o *GetVersionsResponse) GetEnvOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Env, true
}

// SetEnv sets field value
func (o *GetVersionsResponse) SetEnv(v string) {
	o.Env = v
}

// GetVersions returns the Versions field value
func (o *GetVersionsResponse) GetVersions() []Version {
	if o == nil {
		var ret []Version
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *GetVersionsResponse) GetVersionsOk() ([]Version, bool) {
	if o == nil {
		return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *GetVersionsResponse) SetVersions(v []Version) {
	o.Versions = v
}

func (o GetVersionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetVersionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["env"] = o.Env
	toSerialize["versions"] = o.Versions
	return toSerialize, nil
}

type NullableGetVersionsResponse struct {
	value *GetVersionsResponse
	isSet bool
}

func (v NullableGetVersionsResponse) Get() *GetVersionsResponse {
	return v.value
}

func (v *NullableGetVersionsResponse) Set(val *GetVersionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVersionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVersionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVersionsResponse(val *GetVersionsResponse) *NullableGetVersionsResponse {
	return &NullableGetVersionsResponse{value: val, isSet: true}
}

func (v NullableGetVersionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVersionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


