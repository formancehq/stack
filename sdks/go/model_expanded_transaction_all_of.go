/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the ExpandedTransactionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpandedTransactionAllOf{}

// ExpandedTransactionAllOf struct for ExpandedTransactionAllOf
type ExpandedTransactionAllOf struct {
	PreCommitVolumes map[string]map[string]Volume `json:"preCommitVolumes"`
	PostCommitVolumes map[string]map[string]Volume `json:"postCommitVolumes"`
}

// NewExpandedTransactionAllOf instantiates a new ExpandedTransactionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpandedTransactionAllOf(preCommitVolumes map[string]map[string]Volume, postCommitVolumes map[string]map[string]Volume) *ExpandedTransactionAllOf {
	this := ExpandedTransactionAllOf{}
	this.PreCommitVolumes = preCommitVolumes
	this.PostCommitVolumes = postCommitVolumes
	return &this
}

// NewExpandedTransactionAllOfWithDefaults instantiates a new ExpandedTransactionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpandedTransactionAllOfWithDefaults() *ExpandedTransactionAllOf {
	this := ExpandedTransactionAllOf{}
	return &this
}

// GetPreCommitVolumes returns the PreCommitVolumes field value
func (o *ExpandedTransactionAllOf) GetPreCommitVolumes() map[string]map[string]Volume {
	if o == nil {
		var ret map[string]map[string]Volume
		return ret
	}

	return o.PreCommitVolumes
}

// GetPreCommitVolumesOk returns a tuple with the PreCommitVolumes field value
// and a boolean to check if the value has been set.
func (o *ExpandedTransactionAllOf) GetPreCommitVolumesOk() (*map[string]map[string]Volume, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreCommitVolumes, true
}

// SetPreCommitVolumes sets field value
func (o *ExpandedTransactionAllOf) SetPreCommitVolumes(v map[string]map[string]Volume) {
	o.PreCommitVolumes = v
}

// GetPostCommitVolumes returns the PostCommitVolumes field value
func (o *ExpandedTransactionAllOf) GetPostCommitVolumes() map[string]map[string]Volume {
	if o == nil {
		var ret map[string]map[string]Volume
		return ret
	}

	return o.PostCommitVolumes
}

// GetPostCommitVolumesOk returns a tuple with the PostCommitVolumes field value
// and a boolean to check if the value has been set.
func (o *ExpandedTransactionAllOf) GetPostCommitVolumesOk() (*map[string]map[string]Volume, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostCommitVolumes, true
}

// SetPostCommitVolumes sets field value
func (o *ExpandedTransactionAllOf) SetPostCommitVolumes(v map[string]map[string]Volume) {
	o.PostCommitVolumes = v
}

func (o ExpandedTransactionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpandedTransactionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["preCommitVolumes"] = o.PreCommitVolumes
	toSerialize["postCommitVolumes"] = o.PostCommitVolumes
	return toSerialize, nil
}

type NullableExpandedTransactionAllOf struct {
	value *ExpandedTransactionAllOf
	isSet bool
}

func (v NullableExpandedTransactionAllOf) Get() *ExpandedTransactionAllOf {
	return v.value
}

func (v *NullableExpandedTransactionAllOf) Set(val *ExpandedTransactionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandedTransactionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandedTransactionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandedTransactionAllOf(val *ExpandedTransactionAllOf) *NullableExpandedTransactionAllOf {
	return &NullableExpandedTransactionAllOf{value: val, isSet: true}
}

func (v NullableExpandedTransactionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandedTransactionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


