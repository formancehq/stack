/*
Formance Stack API

Testing TransactionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package formance

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	client "github.com/formancehq/formance-sdk-go"
)

func Test_formance_TransactionsApiService(t *testing.T) {

	configuration := client.NewConfiguration()
	apiClient := client.NewAPIClient(configuration)

	t.Run("Test TransactionsApiService AddMetadataOnTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ledger string
		var txid int64

		httpRes, err := apiClient.TransactionsApi.AddMetadataOnTransaction(context.Background(), ledger, txid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService CountTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ledger string

		httpRes, err := apiClient.TransactionsApi.CountTransactions(context.Background(), ledger).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService CreateTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ledger string

		resp, httpRes, err := apiClient.TransactionsApi.CreateTransaction(context.Background(), ledger).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService GetTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ledger string
		var txid int64

		resp, httpRes, err := apiClient.TransactionsApi.GetTransaction(context.Background(), ledger, txid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService ListTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ledger string

		resp, httpRes, err := apiClient.TransactionsApi.ListTransactions(context.Background(), ledger).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService RevertTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ledger string
		var txid int64

		resp, httpRes, err := apiClient.TransactionsApi.RevertTransaction(context.Background(), ledger, txid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
