/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: SDK_VERSION
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// WalletWithBalancesAllOf struct for WalletWithBalancesAllOf
type WalletWithBalancesAllOf struct {
	Balances WalletWithBalancesAllOfBalances `json:"balances"`
}

// NewWalletWithBalancesAllOf instantiates a new WalletWithBalancesAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletWithBalancesAllOf(balances WalletWithBalancesAllOfBalances) *WalletWithBalancesAllOf {
	this := WalletWithBalancesAllOf{}
	this.Balances = balances
	return &this
}

// NewWalletWithBalancesAllOfWithDefaults instantiates a new WalletWithBalancesAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletWithBalancesAllOfWithDefaults() *WalletWithBalancesAllOf {
	this := WalletWithBalancesAllOf{}
	return &this
}

// GetBalances returns the Balances field value
func (o *WalletWithBalancesAllOf) GetBalances() WalletWithBalancesAllOfBalances {
	if o == nil {
		var ret WalletWithBalancesAllOfBalances
		return ret
	}

	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value
// and a boolean to check if the value has been set.
func (o *WalletWithBalancesAllOf) GetBalancesOk() (*WalletWithBalancesAllOfBalances, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Balances, true
}

// SetBalances sets field value
func (o *WalletWithBalancesAllOf) SetBalances(v WalletWithBalancesAllOfBalances) {
	o.Balances = v
}

func (o WalletWithBalancesAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["balances"] = o.Balances
	}
	return json.Marshal(toSerialize)
}

type NullableWalletWithBalancesAllOf struct {
	value *WalletWithBalancesAllOf
	isSet bool
}

func (v NullableWalletWithBalancesAllOf) Get() *WalletWithBalancesAllOf {
	return v.value
}

func (v *NullableWalletWithBalancesAllOf) Set(val *WalletWithBalancesAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletWithBalancesAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletWithBalancesAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletWithBalancesAllOf(val *WalletWithBalancesAllOf) *NullableWalletWithBalancesAllOf {
	return &NullableWalletWithBalancesAllOf{value: val, isSet: true}
}

func (v NullableWalletWithBalancesAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletWithBalancesAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


