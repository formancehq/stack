/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// ConnectorsConfigsResponseData struct for ConnectorsConfigsResponseData
type ConnectorsConfigsResponseData struct {
	Connector *ConnectorsConfigsResponseDataConnector `json:"connector,omitempty"`
}

// NewConnectorsConfigsResponseData instantiates a new ConnectorsConfigsResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorsConfigsResponseData() *ConnectorsConfigsResponseData {
	this := ConnectorsConfigsResponseData{}
	return &this
}

// NewConnectorsConfigsResponseDataWithDefaults instantiates a new ConnectorsConfigsResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorsConfigsResponseDataWithDefaults() *ConnectorsConfigsResponseData {
	this := ConnectorsConfigsResponseData{}
	return &this
}

// GetConnector returns the Connector field value if set, zero value otherwise.
func (o *ConnectorsConfigsResponseData) GetConnector() ConnectorsConfigsResponseDataConnector {
	if o == nil || isNil(o.Connector) {
		var ret ConnectorsConfigsResponseDataConnector
		return ret
	}
	return *o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorsConfigsResponseData) GetConnectorOk() (*ConnectorsConfigsResponseDataConnector, bool) {
	if o == nil || isNil(o.Connector) {
    return nil, false
	}
	return o.Connector, true
}

// HasConnector returns a boolean if a field has been set.
func (o *ConnectorsConfigsResponseData) HasConnector() bool {
	if o != nil && !isNil(o.Connector) {
		return true
	}

	return false
}

// SetConnector gets a reference to the given ConnectorsConfigsResponseDataConnector and assigns it to the Connector field.
func (o *ConnectorsConfigsResponseData) SetConnector(v ConnectorsConfigsResponseDataConnector) {
	o.Connector = &v
}

func (o ConnectorsConfigsResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Connector) {
		toSerialize["connector"] = o.Connector
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorsConfigsResponseData struct {
	value *ConnectorsConfigsResponseData
	isSet bool
}

func (v NullableConnectorsConfigsResponseData) Get() *ConnectorsConfigsResponseData {
	return v.value
}

func (v *NullableConnectorsConfigsResponseData) Set(val *ConnectorsConfigsResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorsConfigsResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorsConfigsResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorsConfigsResponseData(val *ConnectorsConfigsResponseData) *NullableConnectorsConfigsResponseData {
	return &NullableConnectorsConfigsResponseData{value: val, isSet: true}
}

func (v NullableConnectorsConfigsResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorsConfigsResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


