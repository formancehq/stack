/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the ActivityCreateTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityCreateTransaction{}

// ActivityCreateTransaction struct for ActivityCreateTransaction
type ActivityCreateTransaction struct {
	Ledger *string `json:"ledger,omitempty"`
	Data *PostTransaction `json:"data,omitempty"`
}

// NewActivityCreateTransaction instantiates a new ActivityCreateTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityCreateTransaction() *ActivityCreateTransaction {
	this := ActivityCreateTransaction{}
	return &this
}

// NewActivityCreateTransactionWithDefaults instantiates a new ActivityCreateTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityCreateTransactionWithDefaults() *ActivityCreateTransaction {
	this := ActivityCreateTransaction{}
	return &this
}

// GetLedger returns the Ledger field value if set, zero value otherwise.
func (o *ActivityCreateTransaction) GetLedger() string {
	if o == nil || IsNil(o.Ledger) {
		var ret string
		return ret
	}
	return *o.Ledger
}

// GetLedgerOk returns a tuple with the Ledger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityCreateTransaction) GetLedgerOk() (*string, bool) {
	if o == nil || IsNil(o.Ledger) {
		return nil, false
	}
	return o.Ledger, true
}

// HasLedger returns a boolean if a field has been set.
func (o *ActivityCreateTransaction) HasLedger() bool {
	if o != nil && !IsNil(o.Ledger) {
		return true
	}

	return false
}

// SetLedger gets a reference to the given string and assigns it to the Ledger field.
func (o *ActivityCreateTransaction) SetLedger(v string) {
	o.Ledger = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ActivityCreateTransaction) GetData() PostTransaction {
	if o == nil || IsNil(o.Data) {
		var ret PostTransaction
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityCreateTransaction) GetDataOk() (*PostTransaction, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ActivityCreateTransaction) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given PostTransaction and assigns it to the Data field.
func (o *ActivityCreateTransaction) SetData(v PostTransaction) {
	o.Data = &v
}

func (o ActivityCreateTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityCreateTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ledger) {
		toSerialize["ledger"] = o.Ledger
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableActivityCreateTransaction struct {
	value *ActivityCreateTransaction
	isSet bool
}

func (v NullableActivityCreateTransaction) Get() *ActivityCreateTransaction {
	return v.value
}

func (v *NullableActivityCreateTransaction) Set(val *ActivityCreateTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityCreateTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityCreateTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityCreateTransaction(val *ActivityCreateTransaction) *NullableActivityCreateTransaction {
	return &NullableActivityCreateTransaction{value: val, isSet: true}
}

func (v NullableActivityCreateTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityCreateTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


