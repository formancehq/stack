/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
	"time"
)

// checks if the Attempt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attempt{}

// Attempt struct for Attempt
type Attempt struct {
	Id string `json:"id"`
	WebhookID string `json:"webhookID"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Config WebhooksConfig `json:"config"`
	Payload string `json:"payload"`
	StatusCode int32 `json:"statusCode"`
	RetryAttempt int32 `json:"retryAttempt"`
	Status string `json:"status"`
	NextRetryAfter *time.Time `json:"nextRetryAfter,omitempty"`
}

// NewAttempt instantiates a new Attempt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttempt(id string, webhookID string, createdAt time.Time, updatedAt time.Time, config WebhooksConfig, payload string, statusCode int32, retryAttempt int32, status string) *Attempt {
	this := Attempt{}
	this.Id = id
	this.WebhookID = webhookID
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Config = config
	this.Payload = payload
	this.StatusCode = statusCode
	this.RetryAttempt = retryAttempt
	this.Status = status
	return &this
}

// NewAttemptWithDefaults instantiates a new Attempt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttemptWithDefaults() *Attempt {
	this := Attempt{}
	return &this
}

// GetId returns the Id field value
func (o *Attempt) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Attempt) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Attempt) SetId(v string) {
	o.Id = v
}

// GetWebhookID returns the WebhookID field value
func (o *Attempt) GetWebhookID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookID
}

// GetWebhookIDOk returns a tuple with the WebhookID field value
// and a boolean to check if the value has been set.
func (o *Attempt) GetWebhookIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebhookID, true
}

// SetWebhookID sets field value
func (o *Attempt) SetWebhookID(v string) {
	o.WebhookID = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Attempt) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Attempt) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Attempt) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Attempt) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Attempt) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Attempt) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetConfig returns the Config field value
func (o *Attempt) GetConfig() WebhooksConfig {
	if o == nil {
		var ret WebhooksConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Attempt) GetConfigOk() (*WebhooksConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *Attempt) SetConfig(v WebhooksConfig) {
	o.Config = v
}

// GetPayload returns the Payload field value
func (o *Attempt) GetPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *Attempt) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *Attempt) SetPayload(v string) {
	o.Payload = v
}

// GetStatusCode returns the StatusCode field value
func (o *Attempt) GetStatusCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value
// and a boolean to check if the value has been set.
func (o *Attempt) GetStatusCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCode, true
}

// SetStatusCode sets field value
func (o *Attempt) SetStatusCode(v int32) {
	o.StatusCode = v
}

// GetRetryAttempt returns the RetryAttempt field value
func (o *Attempt) GetRetryAttempt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RetryAttempt
}

// GetRetryAttemptOk returns a tuple with the RetryAttempt field value
// and a boolean to check if the value has been set.
func (o *Attempt) GetRetryAttemptOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetryAttempt, true
}

// SetRetryAttempt sets field value
func (o *Attempt) SetRetryAttempt(v int32) {
	o.RetryAttempt = v
}

// GetStatus returns the Status field value
func (o *Attempt) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Attempt) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Attempt) SetStatus(v string) {
	o.Status = v
}

// GetNextRetryAfter returns the NextRetryAfter field value if set, zero value otherwise.
func (o *Attempt) GetNextRetryAfter() time.Time {
	if o == nil || IsNil(o.NextRetryAfter) {
		var ret time.Time
		return ret
	}
	return *o.NextRetryAfter
}

// GetNextRetryAfterOk returns a tuple with the NextRetryAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetNextRetryAfterOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextRetryAfter) {
		return nil, false
	}
	return o.NextRetryAfter, true
}

// HasNextRetryAfter returns a boolean if a field has been set.
func (o *Attempt) HasNextRetryAfter() bool {
	if o != nil && !IsNil(o.NextRetryAfter) {
		return true
	}

	return false
}

// SetNextRetryAfter gets a reference to the given time.Time and assigns it to the NextRetryAfter field.
func (o *Attempt) SetNextRetryAfter(v time.Time) {
	o.NextRetryAfter = &v
}

func (o Attempt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attempt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["webhookID"] = o.WebhookID
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["config"] = o.Config
	toSerialize["payload"] = o.Payload
	toSerialize["statusCode"] = o.StatusCode
	toSerialize["retryAttempt"] = o.RetryAttempt
	toSerialize["status"] = o.Status
	if !IsNil(o.NextRetryAfter) {
		toSerialize["nextRetryAfter"] = o.NextRetryAfter
	}
	return toSerialize, nil
}

type NullableAttempt struct {
	value *Attempt
	isSet bool
}

func (v NullableAttempt) Get() *Attempt {
	return v.value
}

func (v *NullableAttempt) Set(val *Attempt) {
	v.value = val
	v.isSet = true
}

func (v NullableAttempt) IsSet() bool {
	return v.isSet
}

func (v *NullableAttempt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttempt(val *Attempt) *NullableAttempt {
	return &NullableAttempt{value: val, isSet: true}
}

func (v NullableAttempt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttempt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


