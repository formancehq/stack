/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
	"time"
)

// checks if the StageDelay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StageDelay{}

// StageDelay struct for StageDelay
type StageDelay struct {
	Until *time.Time `json:"until,omitempty"`
	Duration *string `json:"duration,omitempty"`
}

// NewStageDelay instantiates a new StageDelay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStageDelay() *StageDelay {
	this := StageDelay{}
	return &this
}

// NewStageDelayWithDefaults instantiates a new StageDelay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStageDelayWithDefaults() *StageDelay {
	this := StageDelay{}
	return &this
}

// GetUntil returns the Until field value if set, zero value otherwise.
func (o *StageDelay) GetUntil() time.Time {
	if o == nil || IsNil(o.Until) {
		var ret time.Time
		return ret
	}
	return *o.Until
}

// GetUntilOk returns a tuple with the Until field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StageDelay) GetUntilOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Until) {
		return nil, false
	}
	return o.Until, true
}

// HasUntil returns a boolean if a field has been set.
func (o *StageDelay) HasUntil() bool {
	if o != nil && !IsNil(o.Until) {
		return true
	}

	return false
}

// SetUntil gets a reference to the given time.Time and assigns it to the Until field.
func (o *StageDelay) SetUntil(v time.Time) {
	o.Until = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *StageDelay) GetDuration() string {
	if o == nil || IsNil(o.Duration) {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StageDelay) GetDurationOk() (*string, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *StageDelay) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *StageDelay) SetDuration(v string) {
	o.Duration = &v
}

func (o StageDelay) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StageDelay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Until) {
		toSerialize["until"] = o.Until
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	return toSerialize, nil
}

type NullableStageDelay struct {
	value *StageDelay
	isSet bool
}

func (v NullableStageDelay) Get() *StageDelay {
	return v.value
}

func (v *NullableStageDelay) Set(val *StageDelay) {
	v.value = val
	v.isSet = true
}

func (v NullableStageDelay) IsSet() bool {
	return v.isSet
}

func (v *NullableStageDelay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStageDelay(val *StageDelay) *NullableStageDelay {
	return &NullableStageDelay{value: val, isSet: true}
}

func (v NullableStageDelay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStageDelay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


