/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the ActivityRevertTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityRevertTransaction{}

// ActivityRevertTransaction struct for ActivityRevertTransaction
type ActivityRevertTransaction struct {
	Ledger string `json:"ledger"`
	Id string `json:"id"`
}

// NewActivityRevertTransaction instantiates a new ActivityRevertTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityRevertTransaction(ledger string, id string) *ActivityRevertTransaction {
	this := ActivityRevertTransaction{}
	this.Ledger = ledger
	this.Id = id
	return &this
}

// NewActivityRevertTransactionWithDefaults instantiates a new ActivityRevertTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityRevertTransactionWithDefaults() *ActivityRevertTransaction {
	this := ActivityRevertTransaction{}
	return &this
}

// GetLedger returns the Ledger field value
func (o *ActivityRevertTransaction) GetLedger() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ledger
}

// GetLedgerOk returns a tuple with the Ledger field value
// and a boolean to check if the value has been set.
func (o *ActivityRevertTransaction) GetLedgerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ledger, true
}

// SetLedger sets field value
func (o *ActivityRevertTransaction) SetLedger(v string) {
	o.Ledger = v
}

// GetId returns the Id field value
func (o *ActivityRevertTransaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActivityRevertTransaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActivityRevertTransaction) SetId(v string) {
	o.Id = v
}

func (o ActivityRevertTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityRevertTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ledger"] = o.Ledger
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

type NullableActivityRevertTransaction struct {
	value *ActivityRevertTransaction
	isSet bool
}

func (v NullableActivityRevertTransaction) Get() *ActivityRevertTransaction {
	return v.value
}

func (v *NullableActivityRevertTransaction) Set(val *ActivityRevertTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityRevertTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityRevertTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityRevertTransaction(val *ActivityRevertTransaction) *NullableActivityRevertTransaction {
	return &NullableActivityRevertTransaction{value: val, isSet: true}
}

func (v NullableActivityRevertTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityRevertTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


