/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: SDK_VERSION
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// WalletWithBalancesAllOfBalances struct for WalletWithBalancesAllOfBalances
type WalletWithBalancesAllOfBalances struct {
	Main AssetHolder `json:"main"`
}

// NewWalletWithBalancesAllOfBalances instantiates a new WalletWithBalancesAllOfBalances object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletWithBalancesAllOfBalances(main AssetHolder) *WalletWithBalancesAllOfBalances {
	this := WalletWithBalancesAllOfBalances{}
	this.Main = main
	return &this
}

// NewWalletWithBalancesAllOfBalancesWithDefaults instantiates a new WalletWithBalancesAllOfBalances object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletWithBalancesAllOfBalancesWithDefaults() *WalletWithBalancesAllOfBalances {
	this := WalletWithBalancesAllOfBalances{}
	return &this
}

// GetMain returns the Main field value
func (o *WalletWithBalancesAllOfBalances) GetMain() AssetHolder {
	if o == nil {
		var ret AssetHolder
		return ret
	}

	return o.Main
}

// GetMainOk returns a tuple with the Main field value
// and a boolean to check if the value has been set.
func (o *WalletWithBalancesAllOfBalances) GetMainOk() (*AssetHolder, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Main, true
}

// SetMain sets field value
func (o *WalletWithBalancesAllOfBalances) SetMain(v AssetHolder) {
	o.Main = v
}

func (o WalletWithBalancesAllOfBalances) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["main"] = o.Main
	}
	return json.Marshal(toSerialize)
}

type NullableWalletWithBalancesAllOfBalances struct {
	value *WalletWithBalancesAllOfBalances
	isSet bool
}

func (v NullableWalletWithBalancesAllOfBalances) Get() *WalletWithBalancesAllOfBalances {
	return v.value
}

func (v *NullableWalletWithBalancesAllOfBalances) Set(val *WalletWithBalancesAllOfBalances) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletWithBalancesAllOfBalances) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletWithBalancesAllOfBalances) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletWithBalancesAllOfBalances(val *WalletWithBalancesAllOfBalances) *NullableWalletWithBalancesAllOfBalances {
	return &NullableWalletWithBalancesAllOfBalances{value: val, isSet: true}
}

func (v NullableWalletWithBalancesAllOfBalances) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletWithBalancesAllOfBalances) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


