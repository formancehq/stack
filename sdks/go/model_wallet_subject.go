/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the WalletSubject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletSubject{}

// WalletSubject struct for WalletSubject
type WalletSubject struct {
	Type string `json:"type"`
	Identifier string `json:"identifier"`
	Balance *string `json:"balance,omitempty"`
}

// NewWalletSubject instantiates a new WalletSubject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletSubject(type_ string, identifier string) *WalletSubject {
	this := WalletSubject{}
	this.Type = type_
	this.Identifier = identifier
	return &this
}

// NewWalletSubjectWithDefaults instantiates a new WalletSubject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletSubjectWithDefaults() *WalletSubject {
	this := WalletSubject{}
	return &this
}

// GetType returns the Type field value
func (o *WalletSubject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WalletSubject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WalletSubject) SetType(v string) {
	o.Type = v
}

// GetIdentifier returns the Identifier field value
func (o *WalletSubject) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *WalletSubject) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *WalletSubject) SetIdentifier(v string) {
	o.Identifier = v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *WalletSubject) GetBalance() string {
	if o == nil || IsNil(o.Balance) {
		var ret string
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletSubject) GetBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *WalletSubject) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given string and assigns it to the Balance field.
func (o *WalletSubject) SetBalance(v string) {
	o.Balance = &v
}

func (o WalletSubject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletSubject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["identifier"] = o.Identifier
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	return toSerialize, nil
}

type NullableWalletSubject struct {
	value *WalletSubject
	isSet bool
}

func (v NullableWalletSubject) Get() *WalletSubject {
	return v.value
}

func (v *NullableWalletSubject) Set(val *WalletSubject) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletSubject(val *WalletSubject) *NullableWalletSubject {
	return &NullableWalletSubject{value: val, isSet: true}
}

func (v NullableWalletSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


