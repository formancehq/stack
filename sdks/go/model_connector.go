/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
	"fmt"
)

// Connector the model 'Connector'
type Connector string

// List of Connector
const (
	STRIPE Connector = "STRIPE"
	DUMMY_PAY Connector = "DUMMY-PAY"
	WISE Connector = "WISE"
	MODULR Connector = "MODULR"
	CURRENCY_CLOUD Connector = "CURRENCY-CLOUD"
	BANKING_CIRCLE Connector = "BANKING-CIRCLE"
)

// All allowed values of Connector enum
var AllowedConnectorEnumValues = []Connector{
	"STRIPE",
	"DUMMY-PAY",
	"WISE",
	"MODULR",
	"CURRENCY-CLOUD",
	"BANKING-CIRCLE",
}

func (v *Connector) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Connector(value)
	for _, existing := range AllowedConnectorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Connector", value)
}

// NewConnectorFromValue returns a pointer to a valid Connector
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorFromValue(v string) (*Connector, error) {
	ev := Connector(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Connector: valid values are %v", v, AllowedConnectorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Connector) IsValid() bool {
	for _, existing := range AllowedConnectorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Connector value
func (v Connector) Ptr() *Connector {
	return &v
}

type NullableConnector struct {
	value *Connector
	isSet bool
}

func (v NullableConnector) Get() *Connector {
	return v.value
}

func (v *NullableConnector) Set(val *Connector) {
	v.value = val
	v.isSet = true
}

func (v NullableConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnector(val *Connector) *NullableConnector {
	return &NullableConnector{value: val, isSet: true}
}

func (v NullableConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

