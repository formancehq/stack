/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
	"time"
)

// checks if the WorkflowInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowInstance{}

// WorkflowInstance struct for WorkflowInstance
type WorkflowInstance struct {
	WorkflowID string `json:"workflowID"`
	Id string `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Status []StageStatus `json:"status,omitempty"`
	Terminated bool `json:"terminated"`
	TerminatedAt *time.Time `json:"terminatedAt,omitempty"`
	Error *string `json:"error,omitempty"`
}

// NewWorkflowInstance instantiates a new WorkflowInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowInstance(workflowID string, id string, createdAt time.Time, updatedAt time.Time, terminated bool) *WorkflowInstance {
	this := WorkflowInstance{}
	this.WorkflowID = workflowID
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Terminated = terminated
	return &this
}

// NewWorkflowInstanceWithDefaults instantiates a new WorkflowInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowInstanceWithDefaults() *WorkflowInstance {
	this := WorkflowInstance{}
	return &this
}

// GetWorkflowID returns the WorkflowID field value
func (o *WorkflowInstance) GetWorkflowID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkflowID
}

// GetWorkflowIDOk returns a tuple with the WorkflowID field value
// and a boolean to check if the value has been set.
func (o *WorkflowInstance) GetWorkflowIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkflowID, true
}

// SetWorkflowID sets field value
func (o *WorkflowInstance) SetWorkflowID(v string) {
	o.WorkflowID = v
}

// GetId returns the Id field value
func (o *WorkflowInstance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WorkflowInstance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WorkflowInstance) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *WorkflowInstance) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *WorkflowInstance) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *WorkflowInstance) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *WorkflowInstance) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *WorkflowInstance) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *WorkflowInstance) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WorkflowInstance) GetStatus() []StageStatus {
	if o == nil || IsNil(o.Status) {
		var ret []StageStatus
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowInstance) GetStatusOk() ([]StageStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WorkflowInstance) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []StageStatus and assigns it to the Status field.
func (o *WorkflowInstance) SetStatus(v []StageStatus) {
	o.Status = v
}

// GetTerminated returns the Terminated field value
func (o *WorkflowInstance) GetTerminated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Terminated
}

// GetTerminatedOk returns a tuple with the Terminated field value
// and a boolean to check if the value has been set.
func (o *WorkflowInstance) GetTerminatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Terminated, true
}

// SetTerminated sets field value
func (o *WorkflowInstance) SetTerminated(v bool) {
	o.Terminated = v
}

// GetTerminatedAt returns the TerminatedAt field value if set, zero value otherwise.
func (o *WorkflowInstance) GetTerminatedAt() time.Time {
	if o == nil || IsNil(o.TerminatedAt) {
		var ret time.Time
		return ret
	}
	return *o.TerminatedAt
}

// GetTerminatedAtOk returns a tuple with the TerminatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowInstance) GetTerminatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TerminatedAt) {
		return nil, false
	}
	return o.TerminatedAt, true
}

// HasTerminatedAt returns a boolean if a field has been set.
func (o *WorkflowInstance) HasTerminatedAt() bool {
	if o != nil && !IsNil(o.TerminatedAt) {
		return true
	}

	return false
}

// SetTerminatedAt gets a reference to the given time.Time and assigns it to the TerminatedAt field.
func (o *WorkflowInstance) SetTerminatedAt(v time.Time) {
	o.TerminatedAt = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *WorkflowInstance) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowInstance) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *WorkflowInstance) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *WorkflowInstance) SetError(v string) {
	o.Error = &v
}

func (o WorkflowInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workflowID"] = o.WorkflowID
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["terminated"] = o.Terminated
	if !IsNil(o.TerminatedAt) {
		toSerialize["terminatedAt"] = o.TerminatedAt
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableWorkflowInstance struct {
	value *WorkflowInstance
	isSet bool
}

func (v NullableWorkflowInstance) Get() *WorkflowInstance {
	return v.value
}

func (v *NullableWorkflowInstance) Set(val *WorkflowInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowInstance(val *WorkflowInstance) *NullableWorkflowInstance {
	return &NullableWorkflowInstance{value: val, isSet: true}
}

func (v NullableWorkflowInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


