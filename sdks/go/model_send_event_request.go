/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the SendEventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendEventRequest{}

// SendEventRequest struct for SendEventRequest
type SendEventRequest struct {
	Name string `json:"name"`
}

// NewSendEventRequest instantiates a new SendEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendEventRequest(name string) *SendEventRequest {
	this := SendEventRequest{}
	this.Name = name
	return &this
}

// NewSendEventRequestWithDefaults instantiates a new SendEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendEventRequestWithDefaults() *SendEventRequest {
	this := SendEventRequest{}
	return &this
}

// GetName returns the Name field value
func (o *SendEventRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SendEventRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SendEventRequest) SetName(v string) {
	o.Name = v
}

func (o SendEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendEventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableSendEventRequest struct {
	value *SendEventRequest
	isSet bool
}

func (v NullableSendEventRequest) Get() *SendEventRequest {
	return v.value
}

func (v *NullableSendEventRequest) Set(val *SendEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendEventRequest(val *SendEventRequest) *NullableSendEventRequest {
	return &NullableSendEventRequest{value: val, isSet: true}
}

func (v NullableSendEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


