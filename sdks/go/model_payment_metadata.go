/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the PaymentMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentMetadata{}

// PaymentMetadata struct for PaymentMetadata
type PaymentMetadata struct {
	Key string `json:"key"`
	Value string `json:"value"`
	Changelog *PaymentMetadataChangelog `json:"changelog,omitempty"`
}

// NewPaymentMetadata instantiates a new PaymentMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMetadata(key string, value string) *PaymentMetadata {
	this := PaymentMetadata{}
	this.Key = key
	this.Value = value
	return &this
}

// NewPaymentMetadataWithDefaults instantiates a new PaymentMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMetadataWithDefaults() *PaymentMetadata {
	this := PaymentMetadata{}
	return &this
}

// GetKey returns the Key field value
func (o *PaymentMetadata) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *PaymentMetadata) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *PaymentMetadata) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *PaymentMetadata) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PaymentMetadata) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PaymentMetadata) SetValue(v string) {
	o.Value = v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *PaymentMetadata) GetChangelog() PaymentMetadataChangelog {
	if o == nil || isNil(o.Changelog) {
		var ret PaymentMetadataChangelog
		return ret
	}
	return *o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMetadata) GetChangelogOk() (*PaymentMetadataChangelog, bool) {
	if o == nil || isNil(o.Changelog) {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *PaymentMetadata) HasChangelog() bool {
	if o != nil && !isNil(o.Changelog) {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given PaymentMetadataChangelog and assigns it to the Changelog field.
func (o *PaymentMetadata) SetChangelog(v PaymentMetadataChangelog) {
	o.Changelog = &v
}

func (o PaymentMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	if !isNil(o.Changelog) {
		toSerialize["changelog"] = o.Changelog
	}
	return toSerialize, nil
}

type NullablePaymentMetadata struct {
	value *PaymentMetadata
	isSet bool
}

func (v NullablePaymentMetadata) Get() *PaymentMetadata {
	return v.value
}

func (v *NullablePaymentMetadata) Set(val *PaymentMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMetadata(val *PaymentMetadata) *NullablePaymentMetadata {
	return &NullablePaymentMetadata{value: val, isSet: true}
}

func (v NullablePaymentMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


