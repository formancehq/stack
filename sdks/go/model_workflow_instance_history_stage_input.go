/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
	"fmt"
)

// WorkflowInstanceHistoryStageInput struct for WorkflowInstanceHistoryStageInput
type WorkflowInstanceHistoryStageInput struct {
	ActivityConfirmHold *ActivityConfirmHold
	ActivityCreateTransaction *ActivityCreateTransaction
	ActivityCreditWallet *ActivityCreditWallet
	ActivityDebitWallet *ActivityDebitWallet
	ActivityGetAccount *ActivityGetAccount
	ActivityGetPayment *ActivityGetPayment
	ActivityGetWallet *ActivityGetWallet
	ActivityRevertTransaction *ActivityRevertTransaction
	ActivityVoidHold *ActivityVoidHold
	StripeTransferRequest *StripeTransferRequest
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *WorkflowInstanceHistoryStageInput) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ActivityConfirmHold
	err = json.Unmarshal(data, &dst.ActivityConfirmHold);
	if err == nil {
		jsonActivityConfirmHold, _ := json.Marshal(dst.ActivityConfirmHold)
		if string(jsonActivityConfirmHold) == "{}" { // empty struct
			dst.ActivityConfirmHold = nil
		} else {
			return nil // data stored in dst.ActivityConfirmHold, return on the first match
		}
	} else {
		dst.ActivityConfirmHold = nil
	}

	// try to unmarshal JSON data into ActivityCreateTransaction
	err = json.Unmarshal(data, &dst.ActivityCreateTransaction);
	if err == nil {
		jsonActivityCreateTransaction, _ := json.Marshal(dst.ActivityCreateTransaction)
		if string(jsonActivityCreateTransaction) == "{}" { // empty struct
			dst.ActivityCreateTransaction = nil
		} else {
			return nil // data stored in dst.ActivityCreateTransaction, return on the first match
		}
	} else {
		dst.ActivityCreateTransaction = nil
	}

	// try to unmarshal JSON data into ActivityCreditWallet
	err = json.Unmarshal(data, &dst.ActivityCreditWallet);
	if err == nil {
		jsonActivityCreditWallet, _ := json.Marshal(dst.ActivityCreditWallet)
		if string(jsonActivityCreditWallet) == "{}" { // empty struct
			dst.ActivityCreditWallet = nil
		} else {
			return nil // data stored in dst.ActivityCreditWallet, return on the first match
		}
	} else {
		dst.ActivityCreditWallet = nil
	}

	// try to unmarshal JSON data into ActivityDebitWallet
	err = json.Unmarshal(data, &dst.ActivityDebitWallet);
	if err == nil {
		jsonActivityDebitWallet, _ := json.Marshal(dst.ActivityDebitWallet)
		if string(jsonActivityDebitWallet) == "{}" { // empty struct
			dst.ActivityDebitWallet = nil
		} else {
			return nil // data stored in dst.ActivityDebitWallet, return on the first match
		}
	} else {
		dst.ActivityDebitWallet = nil
	}

	// try to unmarshal JSON data into ActivityGetAccount
	err = json.Unmarshal(data, &dst.ActivityGetAccount);
	if err == nil {
		jsonActivityGetAccount, _ := json.Marshal(dst.ActivityGetAccount)
		if string(jsonActivityGetAccount) == "{}" { // empty struct
			dst.ActivityGetAccount = nil
		} else {
			return nil // data stored in dst.ActivityGetAccount, return on the first match
		}
	} else {
		dst.ActivityGetAccount = nil
	}

	// try to unmarshal JSON data into ActivityGetPayment
	err = json.Unmarshal(data, &dst.ActivityGetPayment);
	if err == nil {
		jsonActivityGetPayment, _ := json.Marshal(dst.ActivityGetPayment)
		if string(jsonActivityGetPayment) == "{}" { // empty struct
			dst.ActivityGetPayment = nil
		} else {
			return nil // data stored in dst.ActivityGetPayment, return on the first match
		}
	} else {
		dst.ActivityGetPayment = nil
	}

	// try to unmarshal JSON data into ActivityGetWallet
	err = json.Unmarshal(data, &dst.ActivityGetWallet);
	if err == nil {
		jsonActivityGetWallet, _ := json.Marshal(dst.ActivityGetWallet)
		if string(jsonActivityGetWallet) == "{}" { // empty struct
			dst.ActivityGetWallet = nil
		} else {
			return nil // data stored in dst.ActivityGetWallet, return on the first match
		}
	} else {
		dst.ActivityGetWallet = nil
	}

	// try to unmarshal JSON data into ActivityRevertTransaction
	err = json.Unmarshal(data, &dst.ActivityRevertTransaction);
	if err == nil {
		jsonActivityRevertTransaction, _ := json.Marshal(dst.ActivityRevertTransaction)
		if string(jsonActivityRevertTransaction) == "{}" { // empty struct
			dst.ActivityRevertTransaction = nil
		} else {
			return nil // data stored in dst.ActivityRevertTransaction, return on the first match
		}
	} else {
		dst.ActivityRevertTransaction = nil
	}

	// try to unmarshal JSON data into ActivityVoidHold
	err = json.Unmarshal(data, &dst.ActivityVoidHold);
	if err == nil {
		jsonActivityVoidHold, _ := json.Marshal(dst.ActivityVoidHold)
		if string(jsonActivityVoidHold) == "{}" { // empty struct
			dst.ActivityVoidHold = nil
		} else {
			return nil // data stored in dst.ActivityVoidHold, return on the first match
		}
	} else {
		dst.ActivityVoidHold = nil
	}

	// try to unmarshal JSON data into StripeTransferRequest
	err = json.Unmarshal(data, &dst.StripeTransferRequest);
	if err == nil {
		jsonStripeTransferRequest, _ := json.Marshal(dst.StripeTransferRequest)
		if string(jsonStripeTransferRequest) == "{}" { // empty struct
			dst.StripeTransferRequest = nil
		} else {
			return nil // data stored in dst.StripeTransferRequest, return on the first match
		}
	} else {
		dst.StripeTransferRequest = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(WorkflowInstanceHistoryStageInput)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *WorkflowInstanceHistoryStageInput) MarshalJSON() ([]byte, error) {
	if src.ActivityConfirmHold != nil {
		return json.Marshal(&src.ActivityConfirmHold)
	}

	if src.ActivityCreateTransaction != nil {
		return json.Marshal(&src.ActivityCreateTransaction)
	}

	if src.ActivityCreditWallet != nil {
		return json.Marshal(&src.ActivityCreditWallet)
	}

	if src.ActivityDebitWallet != nil {
		return json.Marshal(&src.ActivityDebitWallet)
	}

	if src.ActivityGetAccount != nil {
		return json.Marshal(&src.ActivityGetAccount)
	}

	if src.ActivityGetPayment != nil {
		return json.Marshal(&src.ActivityGetPayment)
	}

	if src.ActivityGetWallet != nil {
		return json.Marshal(&src.ActivityGetWallet)
	}

	if src.ActivityRevertTransaction != nil {
		return json.Marshal(&src.ActivityRevertTransaction)
	}

	if src.ActivityVoidHold != nil {
		return json.Marshal(&src.ActivityVoidHold)
	}

	if src.StripeTransferRequest != nil {
		return json.Marshal(&src.StripeTransferRequest)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableWorkflowInstanceHistoryStageInput struct {
	value *WorkflowInstanceHistoryStageInput
	isSet bool
}

func (v NullableWorkflowInstanceHistoryStageInput) Get() *WorkflowInstanceHistoryStageInput {
	return v.value
}

func (v *NullableWorkflowInstanceHistoryStageInput) Set(val *WorkflowInstanceHistoryStageInput) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowInstanceHistoryStageInput) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowInstanceHistoryStageInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowInstanceHistoryStageInput(val *WorkflowInstanceHistoryStageInput) *NullableWorkflowInstanceHistoryStageInput {
	return &NullableWorkflowInstanceHistoryStageInput{value: val, isSet: true}
}

func (v NullableWorkflowInstanceHistoryStageInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowInstanceHistoryStageInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


