/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions />

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// ListAccountsResponse struct for ListAccountsResponse
type ListAccountsResponse struct {
	Data []PaymentsAccount `json:"data"`
}

// NewListAccountsResponse instantiates a new ListAccountsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListAccountsResponse(data []PaymentsAccount) *ListAccountsResponse {
	this := ListAccountsResponse{}
	this.Data = data
	return &this
}

// NewListAccountsResponseWithDefaults instantiates a new ListAccountsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListAccountsResponseWithDefaults() *ListAccountsResponse {
	this := ListAccountsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ListAccountsResponse) GetData() []PaymentsAccount {
	if o == nil {
		var ret []PaymentsAccount
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListAccountsResponse) GetDataOk() ([]PaymentsAccount, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListAccountsResponse) SetData(v []PaymentsAccount) {
	o.Data = v
}

func (o ListAccountsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListAccountsResponse struct {
	value *ListAccountsResponse
	isSet bool
}

func (v NullableListAccountsResponse) Get() *ListAccountsResponse {
	return v.value
}

func (v *NullableListAccountsResponse) Set(val *ListAccountsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListAccountsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListAccountsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAccountsResponse(val *ListAccountsResponse) *NullableListAccountsResponse {
	return &NullableListAccountsResponse{value: val, isSet: true}
}

func (v NullableListAccountsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAccountsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
