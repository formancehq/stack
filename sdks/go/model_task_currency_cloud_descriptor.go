/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// TaskCurrencyCloudDescriptor struct for TaskCurrencyCloudDescriptor
type TaskCurrencyCloudDescriptor struct {
	Name *string `json:"name,omitempty"`
}

// NewTaskCurrencyCloudDescriptor instantiates a new TaskCurrencyCloudDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskCurrencyCloudDescriptor() *TaskCurrencyCloudDescriptor {
	this := TaskCurrencyCloudDescriptor{}
	return &this
}

// NewTaskCurrencyCloudDescriptorWithDefaults instantiates a new TaskCurrencyCloudDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskCurrencyCloudDescriptorWithDefaults() *TaskCurrencyCloudDescriptor {
	this := TaskCurrencyCloudDescriptor{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaskCurrencyCloudDescriptor) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCurrencyCloudDescriptor) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaskCurrencyCloudDescriptor) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaskCurrencyCloudDescriptor) SetName(v string) {
	o.Name = &v
}

func (o TaskCurrencyCloudDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableTaskCurrencyCloudDescriptor struct {
	value *TaskCurrencyCloudDescriptor
	isSet bool
}

func (v NullableTaskCurrencyCloudDescriptor) Get() *TaskCurrencyCloudDescriptor {
	return v.value
}

func (v *NullableTaskCurrencyCloudDescriptor) Set(val *TaskCurrencyCloudDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskCurrencyCloudDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskCurrencyCloudDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskCurrencyCloudDescriptor(val *TaskCurrencyCloudDescriptor) *NullableTaskCurrencyCloudDescriptor {
	return &NullableTaskCurrencyCloudDescriptor{value: val, isSet: true}
}

func (v NullableTaskCurrencyCloudDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskCurrencyCloudDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


