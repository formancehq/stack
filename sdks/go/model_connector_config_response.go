/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the ConnectorConfigResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorConfigResponse{}

// ConnectorConfigResponse struct for ConnectorConfigResponse
type ConnectorConfigResponse struct {
	Data ConnectorConfig `json:"data"`
}

// NewConnectorConfigResponse instantiates a new ConnectorConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorConfigResponse(data ConnectorConfig) *ConnectorConfigResponse {
	this := ConnectorConfigResponse{}
	this.Data = data
	return &this
}

// NewConnectorConfigResponseWithDefaults instantiates a new ConnectorConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorConfigResponseWithDefaults() *ConnectorConfigResponse {
	this := ConnectorConfigResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ConnectorConfigResponse) GetData() ConnectorConfig {
	if o == nil {
		var ret ConnectorConfig
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ConnectorConfigResponse) GetDataOk() (*ConnectorConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ConnectorConfigResponse) SetData(v ConnectorConfig) {
	o.Data = v
}

func (o ConnectorConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorConfigResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableConnectorConfigResponse struct {
	value *ConnectorConfigResponse
	isSet bool
}

func (v NullableConnectorConfigResponse) Get() *ConnectorConfigResponse {
	return v.value
}

func (v *NullableConnectorConfigResponse) Set(val *ConnectorConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorConfigResponse(val *ConnectorConfigResponse) *NullableConnectorConfigResponse {
	return &NullableConnectorConfigResponse{value: val, isSet: true}
}

func (v NullableConnectorConfigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


