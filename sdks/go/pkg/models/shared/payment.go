// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"math/big"
	"time"
)

type PaymentScheme string

const (
	PaymentSchemeVisa       PaymentScheme = "visa"
	PaymentSchemeMastercard PaymentScheme = "mastercard"
	PaymentSchemeAmex       PaymentScheme = "amex"
	PaymentSchemeDiners     PaymentScheme = "diners"
	PaymentSchemeDiscover   PaymentScheme = "discover"
	PaymentSchemeJcb        PaymentScheme = "jcb"
	PaymentSchemeUnionpay   PaymentScheme = "unionpay"
	PaymentSchemeSepaDebit  PaymentScheme = "sepa debit"
	PaymentSchemeSepaCredit PaymentScheme = "sepa credit"
	PaymentSchemeSepa       PaymentScheme = "sepa"
	PaymentSchemeApplePay   PaymentScheme = "apple pay"
	PaymentSchemeGooglePay  PaymentScheme = "google pay"
	PaymentSchemeA2a        PaymentScheme = "a2a"
	PaymentSchemeAchDebit   PaymentScheme = "ach debit"
	PaymentSchemeAch        PaymentScheme = "ach"
	PaymentSchemeRtp        PaymentScheme = "rtp"
	PaymentSchemeUnknown    PaymentScheme = "unknown"
	PaymentSchemeOther      PaymentScheme = "other"
)

func (e PaymentScheme) ToPointer() *PaymentScheme {
	return &e
}

func (e *PaymentScheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "visa":
		fallthrough
	case "mastercard":
		fallthrough
	case "amex":
		fallthrough
	case "diners":
		fallthrough
	case "discover":
		fallthrough
	case "jcb":
		fallthrough
	case "unionpay":
		fallthrough
	case "sepa debit":
		fallthrough
	case "sepa credit":
		fallthrough
	case "sepa":
		fallthrough
	case "apple pay":
		fallthrough
	case "google pay":
		fallthrough
	case "a2a":
		fallthrough
	case "ach debit":
		fallthrough
	case "ach":
		fallthrough
	case "rtp":
		fallthrough
	case "unknown":
		fallthrough
	case "other":
		*e = PaymentScheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentScheme: %v", v)
	}
}

type PaymentType string

const (
	PaymentTypePayIn    PaymentType = "PAY-IN"
	PaymentTypePayout   PaymentType = "PAYOUT"
	PaymentTypeTransfer PaymentType = "TRANSFER"
	PaymentTypeOther    PaymentType = "OTHER"
)

func (e PaymentType) ToPointer() *PaymentType {
	return &e
}

func (e *PaymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAY-IN":
		fallthrough
	case "PAYOUT":
		fallthrough
	case "TRANSFER":
		fallthrough
	case "OTHER":
		*e = PaymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentType: %v", v)
	}
}

type Payment struct {
	Adjustments          []PaymentAdjustment    `json:"adjustments"`
	Asset                string                 `json:"asset"`
	ConnectorID          string                 `json:"connectorID"`
	CreatedAt            time.Time              `json:"createdAt"`
	DestinationAccountID string                 `json:"destinationAccountID"`
	ID                   string                 `json:"id"`
	InitialAmount        *big.Int               `json:"initialAmount"`
	Metadata             PaymentMetadata        `json:"metadata"`
	Provider             *Connector             `json:"provider,omitempty"`
	Raw                  map[string]interface{} `json:"raw"`
	Reference            string                 `json:"reference"`
	Scheme               PaymentScheme          `json:"scheme"`
	SourceAccountID      string                 `json:"sourceAccountID"`
	Status               PaymentStatus          `json:"status"`
	Type                 PaymentType            `json:"type"`
}
