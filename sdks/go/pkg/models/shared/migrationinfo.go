// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type MigrationInfoState string

const (
	MigrationInfoStateToDo MigrationInfoState = "to do"
	MigrationInfoStateDone MigrationInfoState = "done"
)

func (e MigrationInfoState) ToPointer() *MigrationInfoState {
	return &e
}

func (e *MigrationInfoState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "to do":
		fallthrough
	case "done":
		*e = MigrationInfoState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MigrationInfoState: %v", v)
	}
}

type MigrationInfo struct {
	Date    *time.Time          `json:"date,omitempty"`
	Name    *string             `json:"name,omitempty"`
	State   *MigrationInfoState `json:"state,omitempty"`
	Version *int64              `json:"version,omitempty"`
}

func (o *MigrationInfo) GetDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.Date
}

func (o *MigrationInfo) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MigrationInfo) GetState() *MigrationInfoState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *MigrationInfo) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}
