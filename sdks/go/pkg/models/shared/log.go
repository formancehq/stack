// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type LogType string

const (
	LogTypeNewTransaction      LogType = "NEW_TRANSACTION"
	LogTypeSetMetadata         LogType = "SET_METADATA"
	LogTypeRevertedTransaction LogType = "REVERTED_TRANSACTION"
)

func (e LogType) ToPointer() *LogType {
	return &e
}

func (e *LogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW_TRANSACTION":
		fallthrough
	case "SET_METADATA":
		fallthrough
	case "REVERTED_TRANSACTION":
		*e = LogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogType: %v", v)
	}
}

type Log struct {
	Data map[string]interface{} `json:"data"`
	Date time.Time              `json:"date"`
	Hash string                 `json:"hash"`
	ID   int64                  `json:"id"`
	Type LogType                `json:"type"`
}

func (o *Log) GetData() map[string]interface{} {
	if o == nil {
		return map[string]interface{}{}
	}
	return o.Data
}

func (o *Log) GetDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Date
}

func (o *Log) GetHash() string {
	if o == nil {
		return ""
	}
	return o.Hash
}

func (o *Log) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Log) GetType() LogType {
	if o == nil {
		return LogType("")
	}
	return o.Type
}
