// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

type Transaction struct {
	Metadata          map[string]interface{}       `json:"metadata,omitempty"`
	PostCommitVolumes map[string]map[string]Volume `json:"postCommitVolumes,omitempty"`
	Postings          []Posting                    `json:"postings"`
	PreCommitVolumes  map[string]map[string]Volume `json:"preCommitVolumes,omitempty"`
	Reference         *string                      `json:"reference,omitempty"`
	Timestamp         time.Time                    `json:"timestamp"`
	Txid              int64                        `json:"txid"`
}

func (o *Transaction) GetMetadata() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *Transaction) GetPostCommitVolumes() map[string]map[string]Volume {
	if o == nil {
		return nil
	}
	return o.PostCommitVolumes
}

func (o *Transaction) GetPostings() []Posting {
	if o == nil {
		return []Posting{}
	}
	return o.Postings
}

func (o *Transaction) GetPreCommitVolumes() map[string]map[string]Volume {
	if o == nil {
		return nil
	}
	return o.PreCommitVolumes
}

func (o *Transaction) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *Transaction) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Transaction) GetTxid() int64 {
	if o == nil {
		return 0
	}
	return o.Txid
}
