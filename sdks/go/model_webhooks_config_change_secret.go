/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions />

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// WebhooksConfigChangeSecret struct for WebhooksConfigChangeSecret
type WebhooksConfigChangeSecret struct {
	Secret *string `json:"secret,omitempty"`
}

// NewWebhooksConfigChangeSecret instantiates a new WebhooksConfigChangeSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhooksConfigChangeSecret() *WebhooksConfigChangeSecret {
	this := WebhooksConfigChangeSecret{}
	return &this
}

// NewWebhooksConfigChangeSecretWithDefaults instantiates a new WebhooksConfigChangeSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhooksConfigChangeSecretWithDefaults() *WebhooksConfigChangeSecret {
	this := WebhooksConfigChangeSecret{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *WebhooksConfigChangeSecret) GetSecret() string {
	if o == nil || isNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhooksConfigChangeSecret) GetSecretOk() (*string, bool) {
	if o == nil || isNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *WebhooksConfigChangeSecret) HasSecret() bool {
	if o != nil && !isNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *WebhooksConfigChangeSecret) SetSecret(v string) {
	o.Secret = &v
}

func (o WebhooksConfigChangeSecret) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableWebhooksConfigChangeSecret struct {
	value *WebhooksConfigChangeSecret
	isSet bool
}

func (v NullableWebhooksConfigChangeSecret) Get() *WebhooksConfigChangeSecret {
	return v.value
}

func (v *NullableWebhooksConfigChangeSecret) Set(val *WebhooksConfigChangeSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhooksConfigChangeSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhooksConfigChangeSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhooksConfigChangeSecret(val *WebhooksConfigChangeSecret) *NullableWebhooksConfigChangeSecret {
	return &NullableWebhooksConfigChangeSecret{value: val, isSet: true}
}

func (v NullableWebhooksConfigChangeSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhooksConfigChangeSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
