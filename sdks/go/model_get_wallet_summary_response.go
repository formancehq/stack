/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the GetWalletSummaryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetWalletSummaryResponse{}

// GetWalletSummaryResponse struct for GetWalletSummaryResponse
type GetWalletSummaryResponse struct {
	Balances []BalanceWithAssets `json:"balances"`
	AvailableFunds map[string]int32 `json:"availableFunds"`
	ExpiredFunds map[string]int32 `json:"expiredFunds"`
	ExpirableFunds map[string]int32 `json:"expirableFunds"`
	HoldFunds map[string]int32 `json:"holdFunds"`
}

// NewGetWalletSummaryResponse instantiates a new GetWalletSummaryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetWalletSummaryResponse(balances []BalanceWithAssets, availableFunds map[string]int32, expiredFunds map[string]int32, expirableFunds map[string]int32, holdFunds map[string]int32) *GetWalletSummaryResponse {
	this := GetWalletSummaryResponse{}
	this.Balances = balances
	this.AvailableFunds = availableFunds
	this.ExpiredFunds = expiredFunds
	this.ExpirableFunds = expirableFunds
	this.HoldFunds = holdFunds
	return &this
}

// NewGetWalletSummaryResponseWithDefaults instantiates a new GetWalletSummaryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetWalletSummaryResponseWithDefaults() *GetWalletSummaryResponse {
	this := GetWalletSummaryResponse{}
	return &this
}

// GetBalances returns the Balances field value
func (o *GetWalletSummaryResponse) GetBalances() []BalanceWithAssets {
	if o == nil {
		var ret []BalanceWithAssets
		return ret
	}

	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value
// and a boolean to check if the value has been set.
func (o *GetWalletSummaryResponse) GetBalancesOk() ([]BalanceWithAssets, bool) {
	if o == nil {
		return nil, false
	}
	return o.Balances, true
}

// SetBalances sets field value
func (o *GetWalletSummaryResponse) SetBalances(v []BalanceWithAssets) {
	o.Balances = v
}

// GetAvailableFunds returns the AvailableFunds field value
func (o *GetWalletSummaryResponse) GetAvailableFunds() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.AvailableFunds
}

// GetAvailableFundsOk returns a tuple with the AvailableFunds field value
// and a boolean to check if the value has been set.
func (o *GetWalletSummaryResponse) GetAvailableFundsOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableFunds, true
}

// SetAvailableFunds sets field value
func (o *GetWalletSummaryResponse) SetAvailableFunds(v map[string]int32) {
	o.AvailableFunds = v
}

// GetExpiredFunds returns the ExpiredFunds field value
func (o *GetWalletSummaryResponse) GetExpiredFunds() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.ExpiredFunds
}

// GetExpiredFundsOk returns a tuple with the ExpiredFunds field value
// and a boolean to check if the value has been set.
func (o *GetWalletSummaryResponse) GetExpiredFundsOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiredFunds, true
}

// SetExpiredFunds sets field value
func (o *GetWalletSummaryResponse) SetExpiredFunds(v map[string]int32) {
	o.ExpiredFunds = v
}

// GetExpirableFunds returns the ExpirableFunds field value
func (o *GetWalletSummaryResponse) GetExpirableFunds() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.ExpirableFunds
}

// GetExpirableFundsOk returns a tuple with the ExpirableFunds field value
// and a boolean to check if the value has been set.
func (o *GetWalletSummaryResponse) GetExpirableFundsOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirableFunds, true
}

// SetExpirableFunds sets field value
func (o *GetWalletSummaryResponse) SetExpirableFunds(v map[string]int32) {
	o.ExpirableFunds = v
}

// GetHoldFunds returns the HoldFunds field value
func (o *GetWalletSummaryResponse) GetHoldFunds() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.HoldFunds
}

// GetHoldFundsOk returns a tuple with the HoldFunds field value
// and a boolean to check if the value has been set.
func (o *GetWalletSummaryResponse) GetHoldFundsOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HoldFunds, true
}

// SetHoldFunds sets field value
func (o *GetWalletSummaryResponse) SetHoldFunds(v map[string]int32) {
	o.HoldFunds = v
}

func (o GetWalletSummaryResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetWalletSummaryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["balances"] = o.Balances
	toSerialize["availableFunds"] = o.AvailableFunds
	toSerialize["expiredFunds"] = o.ExpiredFunds
	toSerialize["expirableFunds"] = o.ExpirableFunds
	toSerialize["holdFunds"] = o.HoldFunds
	return toSerialize, nil
}

type NullableGetWalletSummaryResponse struct {
	value *GetWalletSummaryResponse
	isSet bool
}

func (v NullableGetWalletSummaryResponse) Get() *GetWalletSummaryResponse {
	return v.value
}

func (v *NullableGetWalletSummaryResponse) Set(val *GetWalletSummaryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetWalletSummaryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetWalletSummaryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetWalletSummaryResponse(val *GetWalletSummaryResponse) *NullableGetWalletSummaryResponse {
	return &NullableGetWalletSummaryResponse{value: val, isSet: true}
}

func (v NullableGetWalletSummaryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetWalletSummaryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


