/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
	"fmt"
)

// ConnectorConfig struct for ConnectorConfig
type ConnectorConfig struct {
	BankingCircleConfig *BankingCircleConfig
	CurrencyCloudConfig *CurrencyCloudConfig
	DummyPayConfig *DummyPayConfig
	ModulrConfig *ModulrConfig
	StripeConfig *StripeConfig
	WiseConfig *WiseConfig
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ConnectorConfig) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into BankingCircleConfig
	err = json.Unmarshal(data, &dst.BankingCircleConfig);
	if err == nil {
		jsonBankingCircleConfig, _ := json.Marshal(dst.BankingCircleConfig)
		if string(jsonBankingCircleConfig) == "{}" { // empty struct
			dst.BankingCircleConfig = nil
		} else {
			return nil // data stored in dst.BankingCircleConfig, return on the first match
		}
	} else {
		dst.BankingCircleConfig = nil
	}

	// try to unmarshal JSON data into CurrencyCloudConfig
	err = json.Unmarshal(data, &dst.CurrencyCloudConfig);
	if err == nil {
		jsonCurrencyCloudConfig, _ := json.Marshal(dst.CurrencyCloudConfig)
		if string(jsonCurrencyCloudConfig) == "{}" { // empty struct
			dst.CurrencyCloudConfig = nil
		} else {
			return nil // data stored in dst.CurrencyCloudConfig, return on the first match
		}
	} else {
		dst.CurrencyCloudConfig = nil
	}

	// try to unmarshal JSON data into DummyPayConfig
	err = json.Unmarshal(data, &dst.DummyPayConfig);
	if err == nil {
		jsonDummyPayConfig, _ := json.Marshal(dst.DummyPayConfig)
		if string(jsonDummyPayConfig) == "{}" { // empty struct
			dst.DummyPayConfig = nil
		} else {
			return nil // data stored in dst.DummyPayConfig, return on the first match
		}
	} else {
		dst.DummyPayConfig = nil
	}

	// try to unmarshal JSON data into ModulrConfig
	err = json.Unmarshal(data, &dst.ModulrConfig);
	if err == nil {
		jsonModulrConfig, _ := json.Marshal(dst.ModulrConfig)
		if string(jsonModulrConfig) == "{}" { // empty struct
			dst.ModulrConfig = nil
		} else {
			return nil // data stored in dst.ModulrConfig, return on the first match
		}
	} else {
		dst.ModulrConfig = nil
	}

	// try to unmarshal JSON data into StripeConfig
	err = json.Unmarshal(data, &dst.StripeConfig);
	if err == nil {
		jsonStripeConfig, _ := json.Marshal(dst.StripeConfig)
		if string(jsonStripeConfig) == "{}" { // empty struct
			dst.StripeConfig = nil
		} else {
			return nil // data stored in dst.StripeConfig, return on the first match
		}
	} else {
		dst.StripeConfig = nil
	}

	// try to unmarshal JSON data into WiseConfig
	err = json.Unmarshal(data, &dst.WiseConfig);
	if err == nil {
		jsonWiseConfig, _ := json.Marshal(dst.WiseConfig)
		if string(jsonWiseConfig) == "{}" { // empty struct
			dst.WiseConfig = nil
		} else {
			return nil // data stored in dst.WiseConfig, return on the first match
		}
	} else {
		dst.WiseConfig = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ConnectorConfig)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ConnectorConfig) MarshalJSON() ([]byte, error) {
	if src.BankingCircleConfig != nil {
		return json.Marshal(&src.BankingCircleConfig)
	}

	if src.CurrencyCloudConfig != nil {
		return json.Marshal(&src.CurrencyCloudConfig)
	}

	if src.DummyPayConfig != nil {
		return json.Marshal(&src.DummyPayConfig)
	}

	if src.ModulrConfig != nil {
		return json.Marshal(&src.ModulrConfig)
	}

	if src.StripeConfig != nil {
		return json.Marshal(&src.StripeConfig)
	}

	if src.WiseConfig != nil {
		return json.Marshal(&src.WiseConfig)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableConnectorConfig struct {
	value *ConnectorConfig
	isSet bool
}

func (v NullableConnectorConfig) Get() *ConnectorConfig {
	return v.value
}

func (v *NullableConnectorConfig) Set(val *ConnectorConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorConfig(val *ConnectorConfig) *NullableConnectorConfig {
	return &NullableConnectorConfig{value: val, isSet: true}
}

func (v NullableConnectorConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


