/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
	"time"
)

// StripeTimelineState struct for StripeTimelineState
type StripeTimelineState struct {
	// The id of the oldest BalanceTransaction fetched from stripe for this account
	OldestId *string `json:"oldestId,omitempty"`
	// The creation date of the oldest BalanceTransaction fetched from stripe for this account
	OldestDate *time.Time `json:"oldestDate,omitempty"`
	// The id of the more recent BalanceTransaction fetched from stripe for this account
	MoreRecentId *string `json:"moreRecentId,omitempty"`
	// The creation date of the more recent BalanceTransaction fetched from stripe for this account
	MoreRecentDate *time.Time `json:"moreRecentDate,omitempty"`
	NoMoreHistory *bool `json:"noMoreHistory,omitempty"`
}

// NewStripeTimelineState instantiates a new StripeTimelineState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripeTimelineState() *StripeTimelineState {
	this := StripeTimelineState{}
	return &this
}

// NewStripeTimelineStateWithDefaults instantiates a new StripeTimelineState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripeTimelineStateWithDefaults() *StripeTimelineState {
	this := StripeTimelineState{}
	return &this
}

// GetOldestId returns the OldestId field value if set, zero value otherwise.
func (o *StripeTimelineState) GetOldestId() string {
	if o == nil || isNil(o.OldestId) {
		var ret string
		return ret
	}
	return *o.OldestId
}

// GetOldestIdOk returns a tuple with the OldestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeTimelineState) GetOldestIdOk() (*string, bool) {
	if o == nil || isNil(o.OldestId) {
    return nil, false
	}
	return o.OldestId, true
}

// HasOldestId returns a boolean if a field has been set.
func (o *StripeTimelineState) HasOldestId() bool {
	if o != nil && !isNil(o.OldestId) {
		return true
	}

	return false
}

// SetOldestId gets a reference to the given string and assigns it to the OldestId field.
func (o *StripeTimelineState) SetOldestId(v string) {
	o.OldestId = &v
}

// GetOldestDate returns the OldestDate field value if set, zero value otherwise.
func (o *StripeTimelineState) GetOldestDate() time.Time {
	if o == nil || isNil(o.OldestDate) {
		var ret time.Time
		return ret
	}
	return *o.OldestDate
}

// GetOldestDateOk returns a tuple with the OldestDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeTimelineState) GetOldestDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.OldestDate) {
    return nil, false
	}
	return o.OldestDate, true
}

// HasOldestDate returns a boolean if a field has been set.
func (o *StripeTimelineState) HasOldestDate() bool {
	if o != nil && !isNil(o.OldestDate) {
		return true
	}

	return false
}

// SetOldestDate gets a reference to the given time.Time and assigns it to the OldestDate field.
func (o *StripeTimelineState) SetOldestDate(v time.Time) {
	o.OldestDate = &v
}

// GetMoreRecentId returns the MoreRecentId field value if set, zero value otherwise.
func (o *StripeTimelineState) GetMoreRecentId() string {
	if o == nil || isNil(o.MoreRecentId) {
		var ret string
		return ret
	}
	return *o.MoreRecentId
}

// GetMoreRecentIdOk returns a tuple with the MoreRecentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeTimelineState) GetMoreRecentIdOk() (*string, bool) {
	if o == nil || isNil(o.MoreRecentId) {
    return nil, false
	}
	return o.MoreRecentId, true
}

// HasMoreRecentId returns a boolean if a field has been set.
func (o *StripeTimelineState) HasMoreRecentId() bool {
	if o != nil && !isNil(o.MoreRecentId) {
		return true
	}

	return false
}

// SetMoreRecentId gets a reference to the given string and assigns it to the MoreRecentId field.
func (o *StripeTimelineState) SetMoreRecentId(v string) {
	o.MoreRecentId = &v
}

// GetMoreRecentDate returns the MoreRecentDate field value if set, zero value otherwise.
func (o *StripeTimelineState) GetMoreRecentDate() time.Time {
	if o == nil || isNil(o.MoreRecentDate) {
		var ret time.Time
		return ret
	}
	return *o.MoreRecentDate
}

// GetMoreRecentDateOk returns a tuple with the MoreRecentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeTimelineState) GetMoreRecentDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.MoreRecentDate) {
    return nil, false
	}
	return o.MoreRecentDate, true
}

// HasMoreRecentDate returns a boolean if a field has been set.
func (o *StripeTimelineState) HasMoreRecentDate() bool {
	if o != nil && !isNil(o.MoreRecentDate) {
		return true
	}

	return false
}

// SetMoreRecentDate gets a reference to the given time.Time and assigns it to the MoreRecentDate field.
func (o *StripeTimelineState) SetMoreRecentDate(v time.Time) {
	o.MoreRecentDate = &v
}

// GetNoMoreHistory returns the NoMoreHistory field value if set, zero value otherwise.
func (o *StripeTimelineState) GetNoMoreHistory() bool {
	if o == nil || isNil(o.NoMoreHistory) {
		var ret bool
		return ret
	}
	return *o.NoMoreHistory
}

// GetNoMoreHistoryOk returns a tuple with the NoMoreHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StripeTimelineState) GetNoMoreHistoryOk() (*bool, bool) {
	if o == nil || isNil(o.NoMoreHistory) {
    return nil, false
	}
	return o.NoMoreHistory, true
}

// HasNoMoreHistory returns a boolean if a field has been set.
func (o *StripeTimelineState) HasNoMoreHistory() bool {
	if o != nil && !isNil(o.NoMoreHistory) {
		return true
	}

	return false
}

// SetNoMoreHistory gets a reference to the given bool and assigns it to the NoMoreHistory field.
func (o *StripeTimelineState) SetNoMoreHistory(v bool) {
	o.NoMoreHistory = &v
}

func (o StripeTimelineState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.OldestId) {
		toSerialize["oldestId"] = o.OldestId
	}
	if !isNil(o.OldestDate) {
		toSerialize["oldestDate"] = o.OldestDate
	}
	if !isNil(o.MoreRecentId) {
		toSerialize["moreRecentId"] = o.MoreRecentId
	}
	if !isNil(o.MoreRecentDate) {
		toSerialize["moreRecentDate"] = o.MoreRecentDate
	}
	if !isNil(o.NoMoreHistory) {
		toSerialize["noMoreHistory"] = o.NoMoreHistory
	}
	return json.Marshal(toSerialize)
}

type NullableStripeTimelineState struct {
	value *StripeTimelineState
	isSet bool
}

func (v NullableStripeTimelineState) Get() *StripeTimelineState {
	return v.value
}

func (v *NullableStripeTimelineState) Set(val *StripeTimelineState) {
	v.value = val
	v.isSet = true
}

func (v NullableStripeTimelineState) IsSet() bool {
	return v.isSet
}

func (v *NullableStripeTimelineState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripeTimelineState(val *StripeTimelineState) *NullableStripeTimelineState {
	return &NullableStripeTimelineState{value: val, isSet: true}
}

func (v NullableStripeTimelineState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripeTimelineState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


