/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// ConnectorsConfigsResponseDataConnectorKey struct for ConnectorsConfigsResponseDataConnectorKey
type ConnectorsConfigsResponseDataConnectorKey struct {
	DataType *string `json:"dataType,omitempty"`
	Required *bool `json:"required,omitempty"`
}

// NewConnectorsConfigsResponseDataConnectorKey instantiates a new ConnectorsConfigsResponseDataConnectorKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorsConfigsResponseDataConnectorKey() *ConnectorsConfigsResponseDataConnectorKey {
	this := ConnectorsConfigsResponseDataConnectorKey{}
	return &this
}

// NewConnectorsConfigsResponseDataConnectorKeyWithDefaults instantiates a new ConnectorsConfigsResponseDataConnectorKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorsConfigsResponseDataConnectorKeyWithDefaults() *ConnectorsConfigsResponseDataConnectorKey {
	this := ConnectorsConfigsResponseDataConnectorKey{}
	return &this
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ConnectorsConfigsResponseDataConnectorKey) GetDataType() string {
	if o == nil || isNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorsConfigsResponseDataConnectorKey) GetDataTypeOk() (*string, bool) {
	if o == nil || isNil(o.DataType) {
    return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ConnectorsConfigsResponseDataConnectorKey) HasDataType() bool {
	if o != nil && !isNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *ConnectorsConfigsResponseDataConnectorKey) SetDataType(v string) {
	o.DataType = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ConnectorsConfigsResponseDataConnectorKey) GetRequired() bool {
	if o == nil || isNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorsConfigsResponseDataConnectorKey) GetRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.Required) {
    return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ConnectorsConfigsResponseDataConnectorKey) HasRequired() bool {
	if o != nil && !isNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ConnectorsConfigsResponseDataConnectorKey) SetRequired(v bool) {
	o.Required = &v
}

func (o ConnectorsConfigsResponseDataConnectorKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !isNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorsConfigsResponseDataConnectorKey struct {
	value *ConnectorsConfigsResponseDataConnectorKey
	isSet bool
}

func (v NullableConnectorsConfigsResponseDataConnectorKey) Get() *ConnectorsConfigsResponseDataConnectorKey {
	return v.value
}

func (v *NullableConnectorsConfigsResponseDataConnectorKey) Set(val *ConnectorsConfigsResponseDataConnectorKey) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorsConfigsResponseDataConnectorKey) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorsConfigsResponseDataConnectorKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorsConfigsResponseDataConnectorKey(val *ConnectorsConfigsResponseDataConnectorKey) *NullableConnectorsConfigsResponseDataConnectorKey {
	return &NullableConnectorsConfigsResponseDataConnectorKey{value: val, isSet: true}
}

func (v NullableConnectorsConfigsResponseDataConnectorKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorsConfigsResponseDataConnectorKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


