/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions />

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// WebhooksConfigResponse struct for WebhooksConfigResponse
type WebhooksConfigResponse struct {
	Data WebhooksConfig `json:"data"`
}

// NewWebhooksConfigResponse instantiates a new WebhooksConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhooksConfigResponse(data WebhooksConfig) *WebhooksConfigResponse {
	this := WebhooksConfigResponse{}
	this.Data = data
	return &this
}

// NewWebhooksConfigResponseWithDefaults instantiates a new WebhooksConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhooksConfigResponseWithDefaults() *WebhooksConfigResponse {
	this := WebhooksConfigResponse{}
	return &this
}

// GetData returns the Data field value
func (o *WebhooksConfigResponse) GetData() WebhooksConfig {
	if o == nil {
		var ret WebhooksConfig
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *WebhooksConfigResponse) GetDataOk() (*WebhooksConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *WebhooksConfigResponse) SetData(v WebhooksConfig) {
	o.Data = v
}

func (o WebhooksConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableWebhooksConfigResponse struct {
	value *WebhooksConfigResponse
	isSet bool
}

func (v NullableWebhooksConfigResponse) Get() *WebhooksConfigResponse {
	return v.value
}

func (v *NullableWebhooksConfigResponse) Set(val *WebhooksConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhooksConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhooksConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhooksConfigResponse(val *WebhooksConfigResponse) *NullableWebhooksConfigResponse {
	return &NullableWebhooksConfigResponse{value: val, isSet: true}
}

func (v NullableWebhooksConfigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhooksConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
