/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions />

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// WebhooksAttemptResponse struct for WebhooksAttemptResponse
type WebhooksAttemptResponse struct {
	Data WebhooksAttempt `json:"data"`
}

// NewWebhooksAttemptResponse instantiates a new WebhooksAttemptResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhooksAttemptResponse(data WebhooksAttempt) *WebhooksAttemptResponse {
	this := WebhooksAttemptResponse{}
	this.Data = data
	return &this
}

// NewWebhooksAttemptResponseWithDefaults instantiates a new WebhooksAttemptResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhooksAttemptResponseWithDefaults() *WebhooksAttemptResponse {
	this := WebhooksAttemptResponse{}
	return &this
}

// GetData returns the Data field value
func (o *WebhooksAttemptResponse) GetData() WebhooksAttempt {
	if o == nil {
		var ret WebhooksAttempt
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *WebhooksAttemptResponse) GetDataOk() (*WebhooksAttempt, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *WebhooksAttemptResponse) SetData(v WebhooksAttempt) {
	o.Data = v
}

func (o WebhooksAttemptResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableWebhooksAttemptResponse struct {
	value *WebhooksAttemptResponse
	isSet bool
}

func (v NullableWebhooksAttemptResponse) Get() *WebhooksAttemptResponse {
	return v.value
}

func (v *NullableWebhooksAttemptResponse) Set(val *WebhooksAttemptResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhooksAttemptResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhooksAttemptResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhooksAttemptResponse(val *WebhooksAttemptResponse) *NullableWebhooksAttemptResponse {
	return &NullableWebhooksAttemptResponse{value: val, isSet: true}
}

func (v NullableWebhooksAttemptResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhooksAttemptResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
