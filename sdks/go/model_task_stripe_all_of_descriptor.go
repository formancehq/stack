/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the TaskStripeAllOfDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskStripeAllOfDescriptor{}

// TaskStripeAllOfDescriptor struct for TaskStripeAllOfDescriptor
type TaskStripeAllOfDescriptor struct {
	Name string `json:"name"`
	Main *bool `json:"main,omitempty"`
	Account string `json:"account"`
}

// NewTaskStripeAllOfDescriptor instantiates a new TaskStripeAllOfDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskStripeAllOfDescriptor(name string, account string) *TaskStripeAllOfDescriptor {
	this := TaskStripeAllOfDescriptor{}
	this.Name = name
	this.Account = account
	return &this
}

// NewTaskStripeAllOfDescriptorWithDefaults instantiates a new TaskStripeAllOfDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskStripeAllOfDescriptorWithDefaults() *TaskStripeAllOfDescriptor {
	this := TaskStripeAllOfDescriptor{}
	return &this
}

// GetName returns the Name field value
func (o *TaskStripeAllOfDescriptor) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TaskStripeAllOfDescriptor) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TaskStripeAllOfDescriptor) SetName(v string) {
	o.Name = v
}

// GetMain returns the Main field value if set, zero value otherwise.
func (o *TaskStripeAllOfDescriptor) GetMain() bool {
	if o == nil || IsNil(o.Main) {
		var ret bool
		return ret
	}
	return *o.Main
}

// GetMainOk returns a tuple with the Main field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStripeAllOfDescriptor) GetMainOk() (*bool, bool) {
	if o == nil || IsNil(o.Main) {
		return nil, false
	}
	return o.Main, true
}

// HasMain returns a boolean if a field has been set.
func (o *TaskStripeAllOfDescriptor) HasMain() bool {
	if o != nil && !IsNil(o.Main) {
		return true
	}

	return false
}

// SetMain gets a reference to the given bool and assigns it to the Main field.
func (o *TaskStripeAllOfDescriptor) SetMain(v bool) {
	o.Main = &v
}

// GetAccount returns the Account field value
func (o *TaskStripeAllOfDescriptor) GetAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *TaskStripeAllOfDescriptor) GetAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *TaskStripeAllOfDescriptor) SetAccount(v string) {
	o.Account = v
}

func (o TaskStripeAllOfDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskStripeAllOfDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Main) {
		toSerialize["main"] = o.Main
	}
	toSerialize["account"] = o.Account
	return toSerialize, nil
}

type NullableTaskStripeAllOfDescriptor struct {
	value *TaskStripeAllOfDescriptor
	isSet bool
}

func (v NullableTaskStripeAllOfDescriptor) Get() *TaskStripeAllOfDescriptor {
	return v.value
}

func (v *NullableTaskStripeAllOfDescriptor) Set(val *TaskStripeAllOfDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskStripeAllOfDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskStripeAllOfDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskStripeAllOfDescriptor(val *TaskStripeAllOfDescriptor) *NullableTaskStripeAllOfDescriptor {
	return &NullableTaskStripeAllOfDescriptor{value: val, isSet: true}
}

func (v NullableTaskStripeAllOfDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskStripeAllOfDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


