/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: develop
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the Monetary1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Monetary1{}

// Monetary1 struct for Monetary1
type Monetary1 struct {
	Amount float32 `json:"amount"`
	Asset string `json:"asset"`
}

// NewMonetary1 instantiates a new Monetary1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonetary1(amount float32, asset string) *Monetary1 {
	this := Monetary1{}
	this.Amount = amount
	this.Asset = asset
	return &this
}

// NewMonetary1WithDefaults instantiates a new Monetary1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonetary1WithDefaults() *Monetary1 {
	this := Monetary1{}
	return &this
}

// GetAmount returns the Amount field value
func (o *Monetary1) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Monetary1) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Monetary1) SetAmount(v float32) {
	o.Amount = v
}

// GetAsset returns the Asset field value
func (o *Monetary1) GetAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *Monetary1) GetAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *Monetary1) SetAsset(v string) {
	o.Asset = v
}

func (o Monetary1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Monetary1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["asset"] = o.Asset
	return toSerialize, nil
}

type NullableMonetary1 struct {
	value *Monetary1
	isSet bool
}

func (v NullableMonetary1) Get() *Monetary1 {
	return v.value
}

func (v *NullableMonetary1) Set(val *Monetary1) {
	v.value = val
	v.isSet = true
}

func (v NullableMonetary1) IsSet() bool {
	return v.isSet
}

func (v *NullableMonetary1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonetary1(val *Monetary1) *NullableMonetary1 {
	return &NullableMonetary1{value: val, isSet: true}
}

func (v NullableMonetary1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonetary1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


