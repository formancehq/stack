/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
	"fmt"
)

// Stage struct for Stage
type Stage struct {
	StageDelay *StageDelay
	StageSend *StageSend
	StageWaitEvent *StageWaitEvent
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Stage) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into StageDelay
	err = json.Unmarshal(data, &dst.StageDelay);
	if err == nil {
		jsonStageDelay, _ := json.Marshal(dst.StageDelay)
		if string(jsonStageDelay) == "{}" { // empty struct
			dst.StageDelay = nil
		} else {
			return nil // data stored in dst.StageDelay, return on the first match
		}
	} else {
		dst.StageDelay = nil
	}

	// try to unmarshal JSON data into StageSend
	err = json.Unmarshal(data, &dst.StageSend);
	if err == nil {
		jsonStageSend, _ := json.Marshal(dst.StageSend)
		if string(jsonStageSend) == "{}" { // empty struct
			dst.StageSend = nil
		} else {
			return nil // data stored in dst.StageSend, return on the first match
		}
	} else {
		dst.StageSend = nil
	}

	// try to unmarshal JSON data into StageWaitEvent
	err = json.Unmarshal(data, &dst.StageWaitEvent);
	if err == nil {
		jsonStageWaitEvent, _ := json.Marshal(dst.StageWaitEvent)
		if string(jsonStageWaitEvent) == "{}" { // empty struct
			dst.StageWaitEvent = nil
		} else {
			return nil // data stored in dst.StageWaitEvent, return on the first match
		}
	} else {
		dst.StageWaitEvent = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Stage)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Stage) MarshalJSON() ([]byte, error) {
	if src.StageDelay != nil {
		return json.Marshal(&src.StageDelay)
	}

	if src.StageSend != nil {
		return json.Marshal(&src.StageSend)
	}

	if src.StageWaitEvent != nil {
		return json.Marshal(&src.StageWaitEvent)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableStage struct {
	value *Stage
	isSet bool
}

func (v NullableStage) Get() *Stage {
	return v.value
}

func (v *NullableStage) Set(val *Stage) {
	v.value = val
	v.isSet = true
}

func (v NullableStage) IsSet() bool {
	return v.isSet
}

func (v *NullableStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStage(val *Stage) *NullableStage {
	return &NullableStage{value: val, isSet: true}
}

func (v NullableStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


