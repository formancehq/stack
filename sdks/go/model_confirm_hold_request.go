/*
Formance Stack API

Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 

API version: v1.0.20230301
Contact: support@formance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package formance

import (
	"encoding/json"
)

// checks if the ConfirmHoldRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfirmHoldRequest{}

// ConfirmHoldRequest struct for ConfirmHoldRequest
type ConfirmHoldRequest struct {
	// Define the amount to transfer.
	Amount *int64 `json:"amount,omitempty"`
	// Define a final confirmation. Remaining funds will be returned to the wallet.
	Final *bool `json:"final,omitempty"`
}

// NewConfirmHoldRequest instantiates a new ConfirmHoldRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfirmHoldRequest() *ConfirmHoldRequest {
	this := ConfirmHoldRequest{}
	return &this
}

// NewConfirmHoldRequestWithDefaults instantiates a new ConfirmHoldRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfirmHoldRequestWithDefaults() *ConfirmHoldRequest {
	this := ConfirmHoldRequest{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ConfirmHoldRequest) GetAmount() int64 {
	if o == nil || IsNil(o.Amount) {
		var ret int64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfirmHoldRequest) GetAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ConfirmHoldRequest) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int64 and assigns it to the Amount field.
func (o *ConfirmHoldRequest) SetAmount(v int64) {
	o.Amount = &v
}

// GetFinal returns the Final field value if set, zero value otherwise.
func (o *ConfirmHoldRequest) GetFinal() bool {
	if o == nil || IsNil(o.Final) {
		var ret bool
		return ret
	}
	return *o.Final
}

// GetFinalOk returns a tuple with the Final field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfirmHoldRequest) GetFinalOk() (*bool, bool) {
	if o == nil || IsNil(o.Final) {
		return nil, false
	}
	return o.Final, true
}

// HasFinal returns a boolean if a field has been set.
func (o *ConfirmHoldRequest) HasFinal() bool {
	if o != nil && !IsNil(o.Final) {
		return true
	}

	return false
}

// SetFinal gets a reference to the given bool and assigns it to the Final field.
func (o *ConfirmHoldRequest) SetFinal(v bool) {
	o.Final = &v
}

func (o ConfirmHoldRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfirmHoldRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Final) {
		toSerialize["final"] = o.Final
	}
	return toSerialize, nil
}

type NullableConfirmHoldRequest struct {
	value *ConfirmHoldRequest
	isSet bool
}

func (v NullableConfirmHoldRequest) Get() *ConfirmHoldRequest {
	return v.value
}

func (v *NullableConfirmHoldRequest) Set(val *ConfirmHoldRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConfirmHoldRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConfirmHoldRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfirmHoldRequest(val *ConfirmHoldRequest) *NullableConfirmHoldRequest {
	return &NullableConfirmHoldRequest{value: val, isSet: true}
}

func (v NullableConfirmHoldRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfirmHoldRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


