/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Wallets {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Confirm a hold
   */
  async confirmHold(
    req: operations.ConfirmHoldRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ConfirmHoldResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConfirmHoldRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/holds/{hold_id}/confirm",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "confirmHoldRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    headers["Accept"] = "application/json";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ConfirmHoldResponse =
      new operations.ConfirmHoldResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 204:
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Create a balance
   */
  async createBalance(
    req: operations.CreateBalanceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateBalanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateBalanceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/wallets/{id}/balances",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createBalanceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    headers["Accept"] = "application/json;q=1, application/json;q=0";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.CreateBalanceResponse =
      new operations.CreateBalanceResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 201:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.createBalanceResponse = utils.objectToClass(
            httpRes?.data,
            shared.CreateBalanceResponse
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Create a new wallet
   */
  async createWallet(
    req: shared.CreateWalletRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateWalletResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateWalletRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/wallets/wallets";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    headers["Accept"] = "application/json;q=1, application/json;q=0";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.CreateWalletResponse =
      new operations.CreateWalletResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 201:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.createWalletResponse = utils.objectToClass(
            httpRes?.data,
            shared.CreateWalletResponse
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Credit a wallet
   */
  async creditWallet(
    req: operations.CreditWalletRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreditWalletResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreditWalletRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/wallets/{id}/credit",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "creditWalletRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    headers["Accept"] = "application/json";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.CreditWalletResponse =
      new operations.CreditWalletResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 204:
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Debit a wallet
   */
  async debitWallet(
    req: operations.DebitWalletRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DebitWalletResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DebitWalletRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/wallets/{id}/debit",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "debitWalletRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    headers["Accept"] = "application/json;q=1, application/json;q=0";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DebitWalletResponse =
      new operations.DebitWalletResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 201:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.debitWalletResponse = utils.objectToClass(
            httpRes?.data,
            shared.DebitWalletResponse
          );
        }
        break;
      case httpRes?.status == 204:
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get detailed balance
   */
  async getBalance(
    req: operations.GetBalanceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBalanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBalanceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/wallets/{id}/balances/{balanceName}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...config?.headers };
    headers["Accept"] = "application/json;q=1, application/json;q=0";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetBalanceResponse =
      new operations.GetBalanceResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.getBalanceResponse = utils.objectToClass(
            httpRes?.data,
            shared.GetBalanceResponse
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get a hold
   */
  async getHold(
    req: operations.GetHoldRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetHoldResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetHoldRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/holds/{holdID}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...config?.headers };
    headers["Accept"] = "application/json;q=1, application/json;q=0";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetHoldResponse = new operations.GetHoldResponse({
      statusCode: httpRes.status,
      contentType: contentType,
      rawResponse: httpRes,
    });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.getHoldResponse = utils.objectToClass(
            httpRes?.data,
            shared.GetHoldResponse
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get all holds for a wallet
   */
  async getHolds(
    req: operations.GetHoldsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetHoldsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetHoldsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/wallets/holds";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    headers["Accept"] = "application/json;q=1, application/json;q=0";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetHoldsResponse = new operations.GetHoldsResponse({
      statusCode: httpRes.status,
      contentType: contentType,
      rawResponse: httpRes,
    });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.getHoldsResponse = utils.objectToClass(
            httpRes?.data,
            shared.GetHoldsResponse
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  async getTransactions(
    req: operations.GetTransactionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransactionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransactionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/wallets/transactions";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    headers["Accept"] = "application/json;q=1, application/json;q=0";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetTransactionsResponse =
      new operations.GetTransactionsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.getTransactionsResponse = utils.objectToClass(
            httpRes?.data,
            shared.GetTransactionsResponse
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get a wallet
   */
  async getWallet(
    req: operations.GetWalletRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWalletResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWalletRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/wallets/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...config?.headers };
    headers["Accept"] = "application/json;q=1, application/json;q=0";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetWalletResponse = new operations.GetWalletResponse({
      statusCode: httpRes.status,
      contentType: contentType,
      rawResponse: httpRes,
    });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.getWalletResponse = utils.objectToClass(
            httpRes?.data,
            shared.GetWalletResponse
          );
        }
        break;
      case httpRes?.status == 404:
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get wallet summary
   */
  async getWalletSummary(
    req: operations.GetWalletSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWalletSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWalletSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/wallets/{id}/summary",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...config?.headers };
    headers["Accept"] = "application/json;q=1, application/json;q=0";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetWalletSummaryResponse =
      new operations.GetWalletSummaryResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.getWalletSummaryResponse = utils.objectToClass(
            httpRes?.data,
            shared.GetWalletSummaryResponse
          );
        }
        break;
      case httpRes?.status == 404:
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * List balances of a wallet
   */
  async listBalances(
    req: operations.ListBalancesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListBalancesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListBalancesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/wallets/{id}/balances",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...config?.headers };
    headers["Accept"] = "application/json";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ListBalancesResponse =
      new operations.ListBalancesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.listBalancesResponse = utils.objectToClass(
            httpRes?.data,
            shared.ListBalancesResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * List all wallets
   */
  async listWallets(
    req: operations.ListWalletsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListWalletsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListWalletsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/wallets/wallets";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    headers["Accept"] = "application/json";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ListWalletsResponse =
      new operations.ListWalletsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.listWalletsResponse = utils.objectToClass(
            httpRes?.data,
            shared.ListWalletsResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Update a wallet
   */
  async updateWallet(
    req: operations.UpdateWalletRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateWalletResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateWalletRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/wallets/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    headers["Accept"] = "application/json";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.UpdateWalletResponse =
      new operations.UpdateWalletResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 204:
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Cancel a hold
   */
  async voidHold(
    req: operations.VoidHoldRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VoidHoldResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VoidHoldRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/wallets/holds/{hold_id}/void",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...config?.headers };
    headers["Accept"] = "application/json";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.VoidHoldResponse = new operations.VoidHoldResponse({
      statusCode: httpRes.status,
      contentType: contentType,
      rawResponse: httpRes,
    });
    switch (true) {
      case httpRes?.status == 204:
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get server info
   */
  async walletsgetServerInfo(
    config?: AxiosRequestConfig
  ): Promise<operations.WalletsgetServerInfoResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/wallets/_info";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...config?.headers };
    headers["Accept"] = "application/json;q=1, application/json;q=0";
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.WalletsgetServerInfoResponse =
      new operations.WalletsgetServerInfoResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.serverInfo = utils.objectToClass(
            httpRes?.data,
            shared.ServerInfo
          );
        }
        break;
      default:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.walletsErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.WalletsErrorResponse
          );
        }
        break;
    }

    return res;
  }
}
