/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TransferInitiationPayments } from "./transferinitiationpayments";
import { TransferInitiationStatus } from "./transferinitiationstatus";
import { Expose, Transform, Type } from "class-transformer";

export enum TransferInitiationType {
  Transfer = "TRANSFER",
  Payout = "PAYOUT",
}

export class TransferInitiation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "asset" })
  asset: string;

  @SpeakeasyMetadata()
  @Expose({ name: "connectorID" })
  connectorID: string;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  @SpeakeasyMetadata()
  @Expose({ name: "destinationAccountID" })
  destinationAccountID: string;

  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata({ elemType: TransferInitiationPayments })
  @Expose({ name: "relatedPayments" })
  @Type(() => TransferInitiationPayments)
  relatedPayments?: TransferInitiationPayments[];

  @SpeakeasyMetadata()
  @Expose({ name: "scheduledAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceAccountID" })
  sourceAccountID: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: TransferInitiationStatus;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: TransferInitiationType;

  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;
}
