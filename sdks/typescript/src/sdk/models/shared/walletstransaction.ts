/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Posting } from "./posting";
import { WalletsVolume } from "./walletsvolume";
import { Expose, Transform, Type } from "class-transformer";

export class WalletsTransaction extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ledger" })
    ledger?: string;

    /**
     * Metadata associated with the wallet.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    metadata: Record<string, string>;

    @SpeakeasyMetadata({ elemType: WalletsVolume, elemDepth: 2 })
    @Expose({ name: "postCommitVolumes" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, Record<string, WalletsVolume>> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], WalletsVolume);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    postCommitVolumes?: Record<string, Record<string, WalletsVolume>>;

    @SpeakeasyMetadata({ elemType: Posting })
    @Expose({ name: "postings" })
    @Type(() => Posting)
    postings: Posting[];

    @SpeakeasyMetadata({ elemType: WalletsVolume, elemDepth: 2 })
    @Expose({ name: "preCommitVolumes" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, Record<string, WalletsVolume>> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], WalletsVolume);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    preCommitVolumes?: Record<string, Record<string, WalletsVolume>>;

    @SpeakeasyMetadata()
    @Expose({ name: "reference" })
    reference?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "timestamp" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    timestamp: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "txid" })
    txid: number;
}
