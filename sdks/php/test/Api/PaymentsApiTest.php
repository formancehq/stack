<?php
/**
 * PaymentsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Formance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Formance Stack API
 *
 * Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions />
 *
 * The version of the OpenAPI document: develop
 * Contact: support@formance.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Formance\Test\Api;

use \Formance\Configuration;
use \Formance\ApiException;
use \Formance\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * PaymentsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Formance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for connectorsStripeTransfer
     *
     * Transfer funds between Stripe accounts.
     *
     */
    public function testConnectorsStripeTransfer()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllConnectors
     *
     * Get all installed connectors.
     *
     */
    public function testGetAllConnectors()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllConnectorsConfigs
     *
     * Get all available connectors configs.
     *
     */
    public function testGetAllConnectorsConfigs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectorTask
     *
     * Read a specific task of the connector.
     *
     */
    public function testGetConnectorTask()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPayment
     *
     * Returns a payment..
     *
     */
    public function testGetPayment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for installConnector
     *
     * Install connector.
     *
     */
    public function testInstallConnector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listConnectorTasks
     *
     * List connector tasks.
     *
     */
    public function testListConnectorTasks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listPayments
     *
     * Returns a list of payments..
     *
     */
    public function testListPayments()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for paymentslistAccounts
     *
     * Returns a list of accounts..
     *
     */
    public function testPaymentslistAccounts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for readConnectorConfig
     *
     * Read connector config.
     *
     */
    public function testReadConnectorConfig()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for resetConnector
     *
     * Reset connector.
     *
     */
    public function testResetConnector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uninstallConnector
     *
     * Uninstall connector.
     *
     */
    public function testUninstallConnector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
