# coding: utf-8

"""
    Formance Stack API

    Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions />   # noqa: E501

    The version of the OpenAPI document: develop
    Contact: support@formance.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from Formance import schemas  # noqa: F401


class GetWalletSummaryResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "availableFunds",
            "balances",
            "expiredFunds",
            "holdFunds",
            "expirableFunds",
        }
        
        class properties:
            
            
            class balances(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BalanceWithAssets']:
                        return BalanceWithAssets
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['BalanceWithAssets'], typing.List['BalanceWithAssets']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'balances':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BalanceWithAssets':
                    return super().__getitem__(i)
            
            
            class availableFunds(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.IntSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
                ) -> 'availableFunds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class expiredFunds(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.IntSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
                ) -> 'expiredFunds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class expirableFunds(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.IntSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
                ) -> 'expirableFunds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class holdFunds(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.IntSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
                ) -> 'holdFunds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "balances": balances,
                "availableFunds": availableFunds,
                "expiredFunds": expiredFunds,
                "expirableFunds": expirableFunds,
                "holdFunds": holdFunds,
            }
    
    availableFunds: MetaOapg.properties.availableFunds
    balances: MetaOapg.properties.balances
    expiredFunds: MetaOapg.properties.expiredFunds
    holdFunds: MetaOapg.properties.holdFunds
    expirableFunds: MetaOapg.properties.expirableFunds
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balances"]) -> MetaOapg.properties.balances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableFunds"]) -> MetaOapg.properties.availableFunds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiredFunds"]) -> MetaOapg.properties.expiredFunds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirableFunds"]) -> MetaOapg.properties.expirableFunds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holdFunds"]) -> MetaOapg.properties.holdFunds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["balances", "availableFunds", "expiredFunds", "expirableFunds", "holdFunds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balances"]) -> MetaOapg.properties.balances: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableFunds"]) -> MetaOapg.properties.availableFunds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiredFunds"]) -> MetaOapg.properties.expiredFunds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirableFunds"]) -> MetaOapg.properties.expirableFunds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holdFunds"]) -> MetaOapg.properties.holdFunds: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["balances", "availableFunds", "expiredFunds", "expirableFunds", "holdFunds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        availableFunds: typing.Union[MetaOapg.properties.availableFunds, dict, frozendict.frozendict, ],
        balances: typing.Union[MetaOapg.properties.balances, list, tuple, ],
        expiredFunds: typing.Union[MetaOapg.properties.expiredFunds, dict, frozendict.frozendict, ],
        holdFunds: typing.Union[MetaOapg.properties.holdFunds, dict, frozendict.frozendict, ],
        expirableFunds: typing.Union[MetaOapg.properties.expirableFunds, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetWalletSummaryResponse':
        return super().__new__(
            cls,
            *_args,
            availableFunds=availableFunds,
            balances=balances,
            expiredFunds=expiredFunds,
            holdFunds=holdFunds,
            expirableFunds=expirableFunds,
            _configuration=_configuration,
            **kwargs,
        )

from Formance.model.balance_with_assets import BalanceWithAssets
