# coding: utf-8

"""
    Formance Stack API

    Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions />   # noqa: E501

    The version of the OpenAPI document: develop
    Contact: support@formance.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from Formance import schemas  # noqa: F401


class WorkflowInstanceHistoryStage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "input",
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
        
            @staticmethod
            def input() -> typing.Type['WorkflowInstanceHistoryStageInput']:
                return WorkflowInstanceHistoryStageInput
        
            @staticmethod
            def output() -> typing.Type['WorkflowInstanceHistoryStageOutput']:
                return WorkflowInstanceHistoryStageOutput
            error = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "input": input,
                "output": output,
                "error": error,
            }
    
    input: 'WorkflowInstanceHistoryStageInput'
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input"]) -> 'WorkflowInstanceHistoryStageInput': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["output"]) -> 'WorkflowInstanceHistoryStageOutput': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "input", "output", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input"]) -> 'WorkflowInstanceHistoryStageInput': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["output"]) -> typing.Union['WorkflowInstanceHistoryStageOutput', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "input", "output", "error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        input: 'WorkflowInstanceHistoryStageInput',
        name: typing.Union[MetaOapg.properties.name, str, ],
        output: typing.Union['WorkflowInstanceHistoryStageOutput', schemas.Unset] = schemas.unset,
        error: typing.Union[MetaOapg.properties.error, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowInstanceHistoryStage':
        return super().__new__(
            cls,
            *_args,
            input=input,
            name=name,
            output=output,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )

from Formance.model.workflow_instance_history_stage_input import WorkflowInstanceHistoryStageInput
from Formance.model.workflow_instance_history_stage_output import WorkflowInstanceHistoryStageOutput
