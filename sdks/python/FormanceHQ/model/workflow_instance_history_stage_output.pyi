# coding: utf-8

"""
    Formance Stack API

    Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions />   # noqa: E501

    The version of the OpenAPI document: v1.0.20230301
    Contact: support@formance.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from FormanceHQ import schemas  # noqa: F401


class WorkflowInstanceHistoryStageOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def GetAccount() -> typing.Type['AccountResponse']:
                return AccountResponse
        
            @staticmethod
            def CreateTransaction() -> typing.Type['TransactionsResponse']:
                return TransactionsResponse
        
            @staticmethod
            def RevertTransaction() -> typing.Type['TransactionResponse']:
                return TransactionResponse
        
            @staticmethod
            def GetPayment() -> typing.Type['PaymentResponse']:
                return PaymentResponse
        
            @staticmethod
            def DebitWallet() -> typing.Type['DebitWalletResponse']:
                return DebitWalletResponse
        
            @staticmethod
            def GetWallet() -> typing.Type['GetWalletResponse']:
                return GetWalletResponse
            __annotations__ = {
                "GetAccount": GetAccount,
                "CreateTransaction": CreateTransaction,
                "RevertTransaction": RevertTransaction,
                "GetPayment": GetPayment,
                "DebitWallet": DebitWallet,
                "GetWallet": GetWallet,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GetAccount"]) -> 'AccountResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreateTransaction"]) -> 'TransactionsResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RevertTransaction"]) -> 'TransactionResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GetPayment"]) -> 'PaymentResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DebitWallet"]) -> 'DebitWalletResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GetWallet"]) -> 'GetWalletResponse': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["GetAccount", "CreateTransaction", "RevertTransaction", "GetPayment", "DebitWallet", "GetWallet", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GetAccount"]) -> typing.Union['AccountResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreateTransaction"]) -> typing.Union['TransactionsResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RevertTransaction"]) -> typing.Union['TransactionResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GetPayment"]) -> typing.Union['PaymentResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DebitWallet"]) -> typing.Union['DebitWalletResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GetWallet"]) -> typing.Union['GetWalletResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["GetAccount", "CreateTransaction", "RevertTransaction", "GetPayment", "DebitWallet", "GetWallet", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        GetAccount: typing.Union['AccountResponse', schemas.Unset] = schemas.unset,
        CreateTransaction: typing.Union['TransactionsResponse', schemas.Unset] = schemas.unset,
        RevertTransaction: typing.Union['TransactionResponse', schemas.Unset] = schemas.unset,
        GetPayment: typing.Union['PaymentResponse', schemas.Unset] = schemas.unset,
        DebitWallet: typing.Union['DebitWalletResponse', schemas.Unset] = schemas.unset,
        GetWallet: typing.Union['GetWalletResponse', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowInstanceHistoryStageOutput':
        return super().__new__(
            cls,
            *_args,
            GetAccount=GetAccount,
            CreateTransaction=CreateTransaction,
            RevertTransaction=RevertTransaction,
            GetPayment=GetPayment,
            DebitWallet=DebitWallet,
            GetWallet=GetWallet,
            _configuration=_configuration,
            **kwargs,
        )

from FormanceHQ.model.account_response import AccountResponse
from FormanceHQ.model.debit_wallet_response import DebitWalletResponse
from FormanceHQ.model.get_wallet_response import GetWalletResponse
from FormanceHQ.model.payment_response import PaymentResponse
from FormanceHQ.model.transaction_response import TransactionResponse
from FormanceHQ.model.transactions_response import TransactionsResponse
