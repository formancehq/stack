# coding: utf-8

"""
    Formance Stack API

    Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions />   # noqa: E501

    The version of the OpenAPI document: v1.0.20230301
    Contact: support@formance.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from FormanceHQ import schemas  # noqa: F401


class StageSendDestination(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def wallet() -> typing.Type['StageSendSourceWallet']:
                return StageSendSourceWallet
        
            @staticmethod
            def account() -> typing.Type['StageSendSourceAccount']:
                return StageSendSourceAccount
        
            @staticmethod
            def payment() -> typing.Type['StageSendDestinationPayment']:
                return StageSendDestinationPayment
            __annotations__ = {
                "wallet": wallet,
                "account": account,
                "payment": payment,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet"]) -> 'StageSendSourceWallet': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> 'StageSendSourceAccount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment"]) -> 'StageSendDestinationPayment': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["wallet", "account", "payment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet"]) -> typing.Union['StageSendSourceWallet', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union['StageSendSourceAccount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment"]) -> typing.Union['StageSendDestinationPayment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["wallet", "account", "payment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        wallet: typing.Union['StageSendSourceWallet', schemas.Unset] = schemas.unset,
        account: typing.Union['StageSendSourceAccount', schemas.Unset] = schemas.unset,
        payment: typing.Union['StageSendDestinationPayment', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StageSendDestination':
        return super().__new__(
            cls,
            *_args,
            wallet=wallet,
            account=account,
            payment=payment,
            _configuration=_configuration,
            **kwargs,
        )

from FormanceHQ.model.stage_send_destination_payment import StageSendDestinationPayment
from FormanceHQ.model.stage_send_source_account import StageSendSourceAccount
from FormanceHQ.model.stage_send_source_wallet import StageSendSourceWallet
