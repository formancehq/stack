/*
 * Formance Stack API
 * Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: v1.0.20230301
 * Contact: support@formance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.formance.formance.model;

import java.util.Objects;
import java.util.Arrays;
import com.formance.formance.model.MigrationInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * LedgerInfoStorage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LedgerInfoStorage {
  public static final String SERIALIZED_NAME_MIGRATIONS = "migrations";
  @SerializedName(SERIALIZED_NAME_MIGRATIONS)
  private List<MigrationInfo> migrations = new ArrayList<>();

  public LedgerInfoStorage() {
  }

  public LedgerInfoStorage migrations(List<MigrationInfo> migrations) {
    
    this.migrations = migrations;
    return this;
  }

  public LedgerInfoStorage addMigrationsItem(MigrationInfo migrationsItem) {
    if (this.migrations == null) {
      this.migrations = new ArrayList<>();
    }
    this.migrations.add(migrationsItem);
    return this;
  }

   /**
   * Get migrations
   * @return migrations
  **/
  @javax.annotation.Nullable

  public List<MigrationInfo> getMigrations() {
    return migrations;
  }


  public void setMigrations(List<MigrationInfo> migrations) {
    this.migrations = migrations;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LedgerInfoStorage ledgerInfoStorage = (LedgerInfoStorage) o;
    return Objects.equals(this.migrations, ledgerInfoStorage.migrations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(migrations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LedgerInfoStorage {\n");
    sb.append("    migrations: ").append(toIndentedString(migrations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

