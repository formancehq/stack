/*
 * Formance Stack API
 * Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: develop
 * Contact: support@formance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.formance.formance.model;

import java.util.Objects;
import java.util.Arrays;
import com.formance.formance.model.BalanceWithAssets;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * GetWalletSummaryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GetWalletSummaryResponse {
  public static final String SERIALIZED_NAME_BALANCES = "balances";
  @SerializedName(SERIALIZED_NAME_BALANCES)
  private List<BalanceWithAssets> balances = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_FUNDS = "availableFunds";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_FUNDS)
  private Map<String, Integer> availableFunds = new HashMap<>();

  public static final String SERIALIZED_NAME_EXPIRED_FUNDS = "expiredFunds";
  @SerializedName(SERIALIZED_NAME_EXPIRED_FUNDS)
  private Map<String, Integer> expiredFunds = new HashMap<>();

  public static final String SERIALIZED_NAME_EXPIRABLE_FUNDS = "expirableFunds";
  @SerializedName(SERIALIZED_NAME_EXPIRABLE_FUNDS)
  private Map<String, Integer> expirableFunds = new HashMap<>();

  public static final String SERIALIZED_NAME_HOLD_FUNDS = "holdFunds";
  @SerializedName(SERIALIZED_NAME_HOLD_FUNDS)
  private Map<String, Integer> holdFunds = new HashMap<>();

  public GetWalletSummaryResponse() {
  }

  public GetWalletSummaryResponse balances(List<BalanceWithAssets> balances) {
    
    this.balances = balances;
    return this;
  }

  public GetWalletSummaryResponse addBalancesItem(BalanceWithAssets balancesItem) {
    this.balances.add(balancesItem);
    return this;
  }

   /**
   * Get balances
   * @return balances
  **/
  @javax.annotation.Nonnull

  public List<BalanceWithAssets> getBalances() {
    return balances;
  }


  public void setBalances(List<BalanceWithAssets> balances) {
    this.balances = balances;
  }


  public GetWalletSummaryResponse availableFunds(Map<String, Integer> availableFunds) {
    
    this.availableFunds = availableFunds;
    return this;
  }

  public GetWalletSummaryResponse putAvailableFundsItem(String key, Integer availableFundsItem) {
    this.availableFunds.put(key, availableFundsItem);
    return this;
  }

   /**
   * Get availableFunds
   * @return availableFunds
  **/
  @javax.annotation.Nonnull

  public Map<String, Integer> getAvailableFunds() {
    return availableFunds;
  }


  public void setAvailableFunds(Map<String, Integer> availableFunds) {
    this.availableFunds = availableFunds;
  }


  public GetWalletSummaryResponse expiredFunds(Map<String, Integer> expiredFunds) {
    
    this.expiredFunds = expiredFunds;
    return this;
  }

  public GetWalletSummaryResponse putExpiredFundsItem(String key, Integer expiredFundsItem) {
    this.expiredFunds.put(key, expiredFundsItem);
    return this;
  }

   /**
   * Get expiredFunds
   * @return expiredFunds
  **/
  @javax.annotation.Nonnull

  public Map<String, Integer> getExpiredFunds() {
    return expiredFunds;
  }


  public void setExpiredFunds(Map<String, Integer> expiredFunds) {
    this.expiredFunds = expiredFunds;
  }


  public GetWalletSummaryResponse expirableFunds(Map<String, Integer> expirableFunds) {
    
    this.expirableFunds = expirableFunds;
    return this;
  }

  public GetWalletSummaryResponse putExpirableFundsItem(String key, Integer expirableFundsItem) {
    this.expirableFunds.put(key, expirableFundsItem);
    return this;
  }

   /**
   * Get expirableFunds
   * @return expirableFunds
  **/
  @javax.annotation.Nonnull

  public Map<String, Integer> getExpirableFunds() {
    return expirableFunds;
  }


  public void setExpirableFunds(Map<String, Integer> expirableFunds) {
    this.expirableFunds = expirableFunds;
  }


  public GetWalletSummaryResponse holdFunds(Map<String, Integer> holdFunds) {
    
    this.holdFunds = holdFunds;
    return this;
  }

  public GetWalletSummaryResponse putHoldFundsItem(String key, Integer holdFundsItem) {
    this.holdFunds.put(key, holdFundsItem);
    return this;
  }

   /**
   * Get holdFunds
   * @return holdFunds
  **/
  @javax.annotation.Nonnull

  public Map<String, Integer> getHoldFunds() {
    return holdFunds;
  }


  public void setHoldFunds(Map<String, Integer> holdFunds) {
    this.holdFunds = holdFunds;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWalletSummaryResponse getWalletSummaryResponse = (GetWalletSummaryResponse) o;
    return Objects.equals(this.balances, getWalletSummaryResponse.balances) &&
        Objects.equals(this.availableFunds, getWalletSummaryResponse.availableFunds) &&
        Objects.equals(this.expiredFunds, getWalletSummaryResponse.expiredFunds) &&
        Objects.equals(this.expirableFunds, getWalletSummaryResponse.expirableFunds) &&
        Objects.equals(this.holdFunds, getWalletSummaryResponse.holdFunds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balances, availableFunds, expiredFunds, expirableFunds, holdFunds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWalletSummaryResponse {\n");
    sb.append("    balances: ").append(toIndentedString(balances)).append("\n");
    sb.append("    availableFunds: ").append(toIndentedString(availableFunds)).append("\n");
    sb.append("    expiredFunds: ").append(toIndentedString(expiredFunds)).append("\n");
    sb.append("    expirableFunds: ").append(toIndentedString(expirableFunds)).append("\n");
    sb.append("    holdFunds: ").append(toIndentedString(holdFunds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

