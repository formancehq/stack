/*
 * Formance Stack API
 * Open, modular foundation for unique payments flows  # Introduction This API is documented in **OpenAPI format**.  # Authentication Formance Stack offers one forms of authentication:   - OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: develop
 * Contact: support@formance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.formance.formance.model;

import java.util.Objects;
import java.util.Arrays;
import com.formance.formance.model.WebhooksConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * Attempt
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Attempt {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_WEBHOOK_I_D = "webhookID";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_I_D)
  private UUID webhookID;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private WebhooksConfig config;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_RETRY_ATTEMPT = "retryAttempt";
  @SerializedName(SERIALIZED_NAME_RETRY_ATTEMPT)
  private Integer retryAttempt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_NEXT_RETRY_AFTER = "nextRetryAfter";
  @SerializedName(SERIALIZED_NAME_NEXT_RETRY_AFTER)
  private OffsetDateTime nextRetryAfter;

  public Attempt() {
  }

  public Attempt id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public Attempt webhookID(UUID webhookID) {
    
    this.webhookID = webhookID;
    return this;
  }

   /**
   * Get webhookID
   * @return webhookID
  **/
  @javax.annotation.Nonnull

  public UUID getWebhookID() {
    return webhookID;
  }


  public void setWebhookID(UUID webhookID) {
    this.webhookID = webhookID;
  }


  public Attempt createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Attempt updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Attempt config(WebhooksConfig config) {
    
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @javax.annotation.Nonnull

  public WebhooksConfig getConfig() {
    return config;
  }


  public void setConfig(WebhooksConfig config) {
    this.config = config;
  }


  public Attempt payload(String payload) {
    
    this.payload = payload;
    return this;
  }

   /**
   * Get payload
   * @return payload
  **/
  @javax.annotation.Nonnull

  public String getPayload() {
    return payload;
  }


  public void setPayload(String payload) {
    this.payload = payload;
  }


  public Attempt statusCode(Integer statusCode) {
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Get statusCode
   * @return statusCode
  **/
  @javax.annotation.Nonnull

  public Integer getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public Attempt retryAttempt(Integer retryAttempt) {
    
    this.retryAttempt = retryAttempt;
    return this;
  }

   /**
   * Get retryAttempt
   * @return retryAttempt
  **/
  @javax.annotation.Nonnull

  public Integer getRetryAttempt() {
    return retryAttempt;
  }


  public void setRetryAttempt(Integer retryAttempt) {
    this.retryAttempt = retryAttempt;
  }


  public Attempt status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public Attempt nextRetryAfter(OffsetDateTime nextRetryAfter) {
    
    this.nextRetryAfter = nextRetryAfter;
    return this;
  }

   /**
   * Get nextRetryAfter
   * @return nextRetryAfter
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getNextRetryAfter() {
    return nextRetryAfter;
  }


  public void setNextRetryAfter(OffsetDateTime nextRetryAfter) {
    this.nextRetryAfter = nextRetryAfter;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attempt attempt = (Attempt) o;
    return Objects.equals(this.id, attempt.id) &&
        Objects.equals(this.webhookID, attempt.webhookID) &&
        Objects.equals(this.createdAt, attempt.createdAt) &&
        Objects.equals(this.updatedAt, attempt.updatedAt) &&
        Objects.equals(this.config, attempt.config) &&
        Objects.equals(this.payload, attempt.payload) &&
        Objects.equals(this.statusCode, attempt.statusCode) &&
        Objects.equals(this.retryAttempt, attempt.retryAttempt) &&
        Objects.equals(this.status, attempt.status) &&
        Objects.equals(this.nextRetryAfter, attempt.nextRetryAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, webhookID, createdAt, updatedAt, config, payload, statusCode, retryAttempt, status, nextRetryAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attempt {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    webhookID: ").append(toIndentedString(webhookID)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    retryAttempt: ").append(toIndentedString(retryAttempt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    nextRetryAfter: ").append(toIndentedString(nextRetryAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

